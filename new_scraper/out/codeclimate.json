[{"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "The following is a guest post from Cassiopeia, a SaaS solution that uses communication data to provide remote managers and team leaders with actionable insights regarding team dynamics, collaboration, and work-life wellness.\n\nAs distributed teams become the rule rather than the exception, managers and engineers are finding clear communication to be one of their biggest remote work challenges.\n\nRemote work requires extra communication \u2014 as remote teams, we\u2019re missing out on all the overheard discussions, cubicle wall meetings, and spontaneous brainstorms over lunch.\n\nFor engineering teams, a lack of clear communication patterns means there\u2019s greater risk that engineers will change and break code, overlap, and/or waste time doing unnecessary synchronous tasks.\n\nEngineering teams could fall into unhealthy distributed work patterns if managers don\u2019t set clear communication processes and structures."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "Engineering teams could fall into unhealthy distributed work patterns if managers don\u2019t set clear communication processes and structures.\n\nManagers can also help foster a more inclusive remote working experience by focusing on finding solutions for the communication hiccups within their distributed team.\n\nThe key to effective remote communication is to be much more intentional about how we communicate, when, and how often.\n\nHere are a few tips that can help you optimize your communication while working remotely:\n\n1.\n\nSet clear priorities and agendas.\n\nWhether in daily stand-ups or weekly team-wide meetings, be sure to set priorities for the week for all members of your team, so everyone is on the same page.\n\nAs the team gets bigger and each individual starts working on multiple aspects of a product, this added context will make it easier for developers to switch off with other members of the team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "As the team gets bigger and each individual starts working on multiple aspects of a product, this added context will make it easier for developers to switch off with other members of the team.\n\nIn an office setting, you would be able to walk over and review someone\u2019s code with them, but things are different virtually.\n\nIf managers set clear agendas and priorities for their entire team, it creates more transparency and a clearer direction.\n\n2.\n\nMake space and create processes for knowledge sharing.\n\nThe key to successful completion of engineering projects is an effective communication flow and smooth transition of intricate inter-dependencies.\n\nIf something changes in one aspect of a project, it will likely impact another team member and their workflow.\n\nThis is why regular communication, especially when working remotely, is recommended for engineering teams."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "This is why regular communication, especially when working remotely, is recommended for engineering teams.\n\nFrom our research we have found that one of the most effective ways for distributed engineers to work together on a task is by pair programming.\n\nJust sharing a screen enables devs to code anywhere, edit the same files, click through the same dev server, and share a virtual terminal shell for running tests and other commands.\n\nManagers should encourage members to participate in this type of knowledge sharing, and also design process maps that help set up performance benchmarks and metrics to measure success for each individual on the team.\n\nHave your team explicitly talk about their priorities for the day in your daily standup calls, and encourage them to discuss things like who will \u2018drive\u2019 the pairing session (i.e.\n\nwho will be actively coding), who will raise tickets, and who will review before the final sign-off."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "who will be actively coding), who will raise tickets, and who will review before the final sign-off.\n\nThis will help create a more inclusive work environment and combat the feeling of isolation when working remotely.\n\n3.\n\nDon\u2019t skip the 1:1 meetings.\n\nIn the Manager Tools podcast, host Mark Horstman calls 1:1 meetings, \u201cthe single most powerful thing we know a manager can do to improve their relationship with direct reports and get better results.\u201d These 1:1 meetings go beyond an open door policy.\n\nThey offer dedicated time for leaders to coach, mentor, and build a working relationship with their employees, and they can open the communication channels in a remote setting.\n\nIf, as a manager, you\u2019re tempted to skip the 1:1 because you just had a call with someone in a team setting, stop and reflect on the importance of this one-on-one time.\n\nRemember, this meeting isn\u2019t a performance review.\n\nA 1:1 is time for you to ask questions, listen to your employees, and coach where necessary."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "Remember, this meeting isn\u2019t a performance review.\n\nA 1:1 is time for you to ask questions, listen to your employees, and coach where necessary.\n\nWe suggest starting the meeting with, \u201chow\u2019s everything going?\u201d or, \u201chow\u2019s it been working on xyz project so far?\u201d\n\n4.\n\nOver-communicate and use external tools to stay on top of things.\n\nRemote engineering teams often work asynchronously because they\u2019re not in the same place.\n\nCEO of Remote Job van der Voort\u2019s biggest recommendation is to over-communicate.\n\n\u201cRemote team leads should always be writing more, saying more, the usual FYIs that you wouldn\u2019t necessarily mention when you\u2019re in an office space\u2026mention them out loud in a remote workspace.\u201d\n\n3 tools that can add value to a remote workplace:\n\nA shared calendar: Remote managers should be transparent regarding where (and with whom) their time is being spent.\n\nThis information should be made available to their entire team for the purpose of trust-building."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "This information should be made available to their entire team for the purpose of trust-building.\n\nVideo conferencing: Research shows that remote employees tend to be more distracted in audio-only calls, but more alert and productive when their video is on.\n\nWe recommend using Zoom, Slack Video, Teams, or any other video conferencing tool for calls that include more people, like company-wide meetings and team catch-ups.\n\nProject Management tool: Use a software like Jira or Trello to reflect on tasks and projects that members of the team are working on, and to monitor progress.\n\n5.\n\nCommunicate a clear Code Review process.\n\nDerek Parham was the former technical lead of Google Apps, where he scaled a team from one employee to over 100 in six years, and helped set up multiple processes that have contributed to better communication within the engineering team.\n\n\u201cGoogle Marketplace was one of our first early remote teams, so there were a bunch of communication breakdowns."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "\u201cGoogle Marketplace was one of our first early remote teams, so there were a bunch of communication breakdowns.\n\nThe design review process helped with that because we only spent a couple of weeks going back and forth instead of building a system for six months and then launching it only to realize it wouldn\u2019t work, or would break a bunch of other things, or didn\u2019t meet people\u2019s expectations.\u201d\n\nHe continues, \u201cIt\u2019s okay to have that time crunch in the beginning when you\u2019re writing the code and doing the review, because as soon as you launch the product, everyone knows what is going to be built.\u201d Having a clear review process from the start can help engineering teams avoid many future issues.\n\n6.\n\nUse a data-driven approach to increase visibility within the team and improve communication.\n\nWhen you\u2019re working with a virtual engineering setup, it can be a lot harder to gain visibility on your teams.\n\nBut it is possible."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "When you\u2019re working with a virtual engineering setup, it can be a lot harder to gain visibility on your teams.\n\nBut it is possible.\n\nEngineering and other technical teams actually generate a lot of data about their communication patterns on a daily basis.\n\nIt\u2019s important for managers to aggregate and analyze this data and extract useful insights to improve the way team members communicate and work together.\n\nBy doing so, managers can get a much clearer picture of how direct reports are communicating and collaborating.\n\nFor all you know, that quiet engineer may be contributing much more than you thought.\n\nAt Cassiopeia, we use communication patterns and related tracking metrics to help managers gain visibility and spot communication issues in a timely manner.\n\nManagers can track if and when there are any collaboration issues between or within teams, or spot people who might be feeling less connected, all by tracking communication metrics.\n\n7.\n\nSet daily \u2018focus time\u2019 for the team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "7.\n\nSet daily \u2018focus time\u2019 for the team.\n\nWhen you\u2019re working in a distributed team, it\u2019s easy to get drawn into conversations on Slack or Teams with colleagues.\n\nThe idea behind \u2018focus time\u2019 is to allow for dedicated work time, free from interruption and chatter.\n\nAs a manager, setting daily focus time explicitly allows people to tune out group communication, and that\u2019s an empowering move.\n\nHow does this work?\n\nAsk your team to turn off their Slack and Teams and work independently for set hours, either daily or weekly.\n\nThis prevents team members (and managers) from having to keep one eye on their Slack channels.\n\nQuiet hours can be set based either on time zones, individual schedules, or personal preferences.\n\nSome managers also choose to have no-meeting days, which can produce similar results.\n\nDespite the challenges, remote work can be very rewarding for organizations across the globe."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "Some managers also choose to have no-meeting days, which can produce similar results.\n\nDespite the challenges, remote work can be very rewarding for organizations across the globe.\n\nWith proper communication practices, the right tools, and a supportive work culture, distributed workforces can overcome common challenges and build more effective software and technical teams.\n\nCassiopeia is a SaaS solution that uses communication data to provide remote managers and team leaders with actionable insights to help improve team dynamics, collaboration, and work-life wellness.\n\nYou can read more about how to be an effective remote manager on their blog.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/7-biggest-communication-problems-facing-remote-engineering-teams", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/abandoned-pull-requests", "content": "Today we\u2019ll look at three terminal pull request outcomes and one way to increase velocity in your engineering process.\n\nEvery pull request has one of three outcomes\n\nEvery pull request has costs: engineering labor, product management, and opportunity cost, to name a few.\n\nEach also has an outcome: merged, closed without merging, or abandoned due to inactivity.\n\nHere\u2019s a look at how pull requests fare across the industry:\n\nIf you group closed and inactive pull requests together (\u201cAbandoned PRs\u201d), you can estimate that the\u00a0average engineer abandons 8% of the pull requests they create, which is equivalent to a loss of $24,000 per year1, or the cost of a 2018 Toyota Camry Hybrid.\n\n(We consider pull requests that have had zero activity for more than three days to be abandoned because our data shows a very low likelihood that PRs that go untouched for so long get merged later.)\n\nAchieving zero abandoned pull requests is an anti-goal, as it would require being extremely conservative when opening them."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/abandoned-pull-requests", "content": "Achieving zero abandoned pull requests is an anti-goal, as it would require being extremely conservative when opening them.\n\nHowever, a high rate of abandoned PRs can indicate inefficiency and opportunity for improvement within an engineering process.\n\nReducing PR loss by 20% on a team with 10 engineers could save $48,000 per year.\n\nHow does my team stack up?\n\nUsing an anonymized, aggregated analysis of thousands of engineering contributors, we\u2019re able to get an understanding of how an engineering organization compares to others in the industry:\n\nThis density plot shows that the average pull request loss rate across our dataset is 8% (with a median of 6%).\n\nA loss rate above 11% would be in the bottom quartile, and a loss rate below 3% would be upper quartile performance.\n\nImproving pull request outcomes\n\nAbandoned pull requests are, of course, a lagging indicator."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/abandoned-pull-requests", "content": "Improving pull request outcomes\n\nAbandoned pull requests are, of course, a lagging indicator.\n\nYou can tell because it would be ridiculous to go to an engineering team and say, \u201cAll those PRs that you\u2019re closing\u2026 merge them instead!\u201d\n\nPotential drivers lie upstream: late changing product requirements, shifting business priorities, unclear architectural direction and good ole\u2019 fashioned technical debt.\n\nIf you have an issue with abandoned pull requests, soliciting qualitative feedback is a great next step.\n\nTalk to your team.\n\nIdentify something that is impacting them and talk about how you might avoid it next time.\n\nThen, rather than focus on the absolute value of your starting point, you can monitor that your abandonment rate is going down over time.\n\nAfter all, you\u2019d probably rather not send a brand new Camry to the scrap yard every year.\n\n1\u00a0Assumes a fully loaded annual cost of $300k per developer.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/abandoned-pull-requests", "content": "1\u00a0Assumes a fully loaded annual cost of $300k per developer.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/achieve-continuous-delivery-with-velocity-metrics", "content": "Engineering leaders looking to drive high performance and achieve Continuous Delivery often hear that metrics are the answer.\n\nWith metrics, it\u2019s possible to objectively evaluate your team\u2019s progress, measure it against industry benchmarks, and set targets for improvement.\n\nBut how should metrics be used?\n\nIf you\u2019re looking to translate Continuous Delivery ideals into actual practices and processes, where should you start?\n\nIn this free, 30-minute on-demand webinar, Code Climate Engineering Data Specialist, Nico Snyder, explains how Velocity metrics can help you implement Continuous Delivery best practices on your team.\n\nHe offers actionable strategies for:\n\nIdentifying the metrics that matter most in your organization\n\nUsing metrics to understand where your team stands\n\nSetting quantitative targets and driving progress towards those goals\n\nTo find out more about how engineering metrics can help your team, reach out to one of our product specialists."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/achieve-continuous-delivery-with-velocity-metrics", "content": "Subscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/be-a-proactive-engineering-leader", "content": "A good leader can respond to issues and course correct in the moment, but a great leader is proactive about staying ahead of the curve.\n\nWith the help of data provided by Engineering Intelligence tools, an Engineering Manager can gain visibility into the development pipeline and stay equipped with the knowledge needed to cut problems off at the pass.\n\nNo matter where an EM is in their professional lifecycle, a proactive one can prioritize more successfully, strengthen coaching strategies, and boost team effectiveness in the short term, mid-term, and long term.\n\nShort Term Strategy: Spot Risk and Prevent Blockages\n\nA lot of dedication goes into keeping sprints on track and software delivery on schedule.\n\nWith so many moving parts in the development pipeline, an EM may find it tough to determine what needs their attention first, making it challenging to triage risks."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/be-a-proactive-engineering-leader", "content": "With so many moving parts in the development pipeline, an EM may find it tough to determine what needs their attention first, making it challenging to triage risks.\n\nHowever, by using an Engineering Intelligence Platform \u2014 like Code Climate Velocity \u2014\u00a0 that conveys insights based on aggregated data, an EM can swiftly analyze coding progress and prioritize their task list to focus on what\u2019s most important.\n\nFor example, an EM can assess PR and Commit data to surface at-risk work \u2014 work that could benefit from their time and attention.\n\nIf a Commit has had several days of inactivity and work on the associated PR has seemingly halted, it may indicate that the scope of the task is not clear to ICs, and that they require guidance.\n\nOr it may be a sign of task-switching, where too much Work In Progress pulls an IC\u2019s focus and makes it difficult to complete work."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/be-a-proactive-engineering-leader", "content": "Or it may be a sign of task-switching, where too much Work In Progress pulls an IC\u2019s focus and makes it difficult to complete work.\n\nThis is where data from an Engineering Management Platform is critical, as it can signal to a manager that a specific PR or Issue needs attention.\n\nVelocity enables EMs to set Risk Alerts for PRs based on custom criteria, since risk thresholds vary from team to team.\n\nFrom there, the EM can use that information in standups, retros, and other conversations with ICs to help identify the root cause of the blocker and provide coaching where needed.\n\nMid-term Strategy: Improve Collaboration\n\nAs a proactive leader, an EM must understand the nuances of collaboration between all parties to ensure ICs and teams are working together effectively and prioritizing issues that are aligned with company goals.\n\nIf teams fail to work cohesively, roadmaps may be thrown off course, deadlines may be missed, and knowledge silos may be created."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/be-a-proactive-engineering-leader", "content": "If teams fail to work cohesively, roadmaps may be thrown off course, deadlines may be missed, and knowledge silos may be created.\n\nUsing their Engineering Intelligence tools, an EM can easily surface the quantitative data needed to gain visibility into team collaboration and interdepartmental alignment.\n\nWhen it comes to collaboration on their team, an EM might want to look at review metrics, like Review Count.\n\nViewing the number of PRs reviewed by each contributor helps an EM understand how evenly reviews are distributed amongst their team.\n\nUsing these insights, a manager can see which contributors are carrying out the most reviews, and redistribute if the burden for some is too high.\n\nDoing so will not only help keep work in balance, but the redistribution will expose ICs to different parts of the codebase and help prevent knowledge silos.\n\nTo look at collaboration between teams, an EM can rely on quantitative data to help surface signs of misalignment."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/be-a-proactive-engineering-leader", "content": "To look at collaboration between teams, an EM can rely on quantitative data to help surface signs of misalignment.\n\nLooking at coding activity in context with information from Jira can help an EM identify PRs that signal a lack of prioritization, such as untraceable or unplanned PRs.\n\nSince these PRs are not linked back to initial project plans, it may indicate possible misalignment.\n\nLong Term Strategy: Support Professional Growth and Improve Team Health\n\nA proactive EM also needs to identify struggling IC\u2019s, while simultaneously keeping high performers engaged and challenged to prevent boredom.\n\nThis starts with understanding where each individual IC excels, where they want to go, and where they need to improve.\n\nUsing quantitative and qualitative data, an EM can gain a clearer understanding of what keeps each IC engaged, surface coaching opportunities, and improve collective team health."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/be-a-proactive-engineering-leader", "content": "Using quantitative and qualitative data, an EM can gain a clearer understanding of what keeps each IC engaged, surface coaching opportunities, and improve collective team health.\n\nQualitative data on each IC\u2019s coding history \u2014 Commits, Pushes, Rework, Review Speed \u2014 can help signal where an IC performs well and surface areas where it might be useful for an EM to provide coaching.\n\nAn EM can then use qualitative data from 1 on 1\u2019s and retros to contextualize their observations, ask questions about particular units of work, or discuss recurring patterns.\n\nFor example, if an EM notes high levels of Rework, this signals an opportunity to open up a meaningful discussion with the IC to surface areas of confusion and help provide clarity.\n\nOr, an EM might see that an IC has infrequent code pushes and can coach the IC on good coding hygiene by helping them break work down into smaller, more manageable pieces that can be pushed more frequently."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/be-a-proactive-engineering-leader", "content": "Using a combination of both data sets, a manager can initiate valuable dialogue and create a professional development roadmap for each IC that will nurture engagement and minimize frustration.\n\nProactivity as an EM \u2013 The Long and Short of It\n\nProactivity is a skill that can be developed over time and enhanced with the help of data.\n\nOnce empowered with the proper insights, EMs can more effectively monitor the health of their sprints, meet software delivery deadlines, keep engineers happy, and feel confident that they are well-informed and can make a marked, positive impact.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cd-is-a-culture", "content": "Continuous Delivery is the ability to ship code quickly, safely, and consistently, and it\u2019s a necessity for teams that wish to remain innovative and competitive.\n\nIt\u2019s focused on delivering value to the user and starting that feedback loop early \u2014 the ideal state of Continuous Delivery is one in which your code is always ready to be deployed.\n\nMany engineering leaders think of CD as a workflow and focus on the tooling and processes necessary to keep code moving from commit to deploy.\n\nBut CD is more than just a process \u2014 it\u2019s a culture.\n\nTo effectively practice CD, you need to:\n\nConvey the importance of CD to your team\n\nCreate a blameless culture, one in which developers feel safe dissecting and learning from mistakes\n\nFacilitate alignment between business goals and CD.\n\nWith the right culture in place, your team will be better positioned to get their code into production quickly and safely, over and over again."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cd-is-a-culture", "content": "With the right culture in place, your team will be better positioned to get their code into production quickly and safely, over and over again.\n\nExplain why CD is important\n\nProcesses fail when developers don\u2019t understand their rationale.\n\nThey may follow them in a nominal way, but they\u2019ll have a hard time making judgment calls when they don\u2019t know the underlying principles, and they may simply bend the processes to fit their preferred way of working.\n\nCode Climate\u2019s VP of Engineering, Ale Paredes, recommends starting with context over process.\n\nExplain why you want to implement CD, reminding your team members that new processes are designed to remove bottlenecks, facilitate collaboration, and help your team grow.\n\nAs they get code into production faster, they\u2019ll also get feedback faster, allowing them to keep improving their skills and their code.\n\nThen, you can set concrete, data-based goals that will allow you to track the impact of new processes."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cd-is-a-culture", "content": "Then, you can set concrete, data-based goals that will allow you to track the impact of new processes.\n\nNot only will your team members understand the theoretical value of CD, meeting these new goals will help prove that it works.\n\nConnect with individual team members\n\nAle warns that when an individual developer isn\u2019t bought into the idea of CD, they\u2019ll \u201ctry to hack the system,\u201d doing things the way they want to, while working to superficially meet your requirements.\n\nThis may seem like it accomplishes the same goal, but it\u2019s not sustainable \u2014 it\u2019s always counterproductive for a team member to be working against your processes, whether those processes are designed to promote CD or not.\n\nShe recommends using 1-on-1s to get a sense of what motivates someone.\n\nThen, you\u2019ll be able to demonstrate how CD can help support their goals.\n\nLet\u2019s say a developer is most excited about solving technical challenges."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cd-is-a-culture", "content": "Then, you\u2019ll be able to demonstrate how CD can help support their goals.\n\nLet\u2019s say a developer is most excited about solving technical challenges.\n\nYou might want to highlight that practicing CD will allow them to take end-to-end ownership of a project: they can build something, deploy it, and see if it works when they\u2019re shipping small units of work more frequently.\n\nIf another team member is motivated by customer feedback, you can remind them that they\u2019ll be getting their work into customers\u2019 hands even more quickly with CD.\n\nCreating a blameless culture\n\nOnce your team is bought into the idea of Continuous Delivery, you\u2019ll need to take things a step further.\n\nTo create the conditions in which CD can thrive, you\u2019ll need to create a blameless culture.\n\nIn a blameless culture, broken processes are identified so that they can be improved, rather than to levy consequences."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cd-is-a-culture", "content": "In a blameless culture, broken processes are identified so that they can be improved, rather than to levy consequences.\n\nIt\u2019s essential that team members feel safe flagging broken processes without worrying that they\u2019ll be penalized for doing so or that they\u2019re singling out a peer for punishment.\n\nA leader can help establish that blamelessness in the way they communicate with their team members.\n\nAle\u2019s rules for incident postmortems clearly state that there is no blame.\n\nNames aren\u2019t used when discussing incidents or writing incident reports because the understanding is that anyone could have made the same mistake.\n\nConvince the C-Suite\n\nFostering the right culture on your team is essential to effectively implementing Continuous Delivery, but it\u2019s not enough.\n\nCD also requires support from the top.\n\nIf your company is looking for big, splashy releases every quarter, Continuous Delivery will be a tough sell."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cd-is-a-culture", "content": "CD also requires support from the top.\n\nIf your company is looking for big, splashy releases every quarter, Continuous Delivery will be a tough sell.\n\nFrequent, incremental changes are almost fundamentally at odds with the roadmap that the organization will set out for engineering, and how it will measure success.\n\nTo bring Continuous Delivery to an organization like this one, you\u2019ll benefit from applying one of the core principles of CD: incremental change.\n\nYou won\u2019t be able to drive a seismic shift in one push.\n\nInstead, you might try Ale\u2019s strategy and look for ways to introduce small changes so you can start proving the value of CD.\n\nFor example, you might try automating deployments, which should cut back on incidences of human error and free up developer bandwidth for writing new code.\n\nThe Virtuous Circle\n\nProcess may start you on your way to Continuous Delivery, but you won\u2019t get far."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cd-is-a-culture", "content": "The Virtuous Circle\n\nProcess may start you on your way to Continuous Delivery, but you won\u2019t get far.\n\nPair those processes with a culture of CD, and you just might reach the Virtuous Circle of Software Delivery \u2014 the point at which each improvement yields benefits that motivate developers to keep improving.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/combat-performance-review-biases-with-objective-data", "content": "It\u2019s no secret that performance reviews are flawed.\n\nNot only is occasional feedback unlikely to affect meaningful growth, but the feedback itself can also be suspect \u2014 studies indicate that numerical ratings reveal more about the rater than the person being reviewed, while open-ended evaluations are subject to a host of performance review biases.\n\nDespite this research, most companies still rely on some form of performance review.\n\nThey\u2019re not ready to pivot from the idea of using reviews to promote professional development, and many employees aren\u2019t either.\n\nAs an engineering leader, you may not be able to overhaul your company\u2019s review process, but you can still take steps to minimize some of its flaws.\n\nEngineering data found in your VCS and project management tools can help by acting as a check against anecdotal evidence and gut feel, helping you combat some common performance review biases."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/combat-performance-review-biases-with-objective-data", "content": "Engineering data found in your VCS and project management tools can help by acting as a check against anecdotal evidence and gut feel, helping you combat some common performance review biases.\n\nCommon Performance Review Biases\n\nBiases may be evident in nearly every aspect of your day-to-day, but the open-ended format of most performance review frameworks is particularly vulnerable to some common biases.\n\nIf you\u2019re aware of their existence, you can take steps to counteract them.\n\nRecency Bias\n\nWhen reviews happen infrequently, the period of time right around review season is freshest in the reviewer\u2019s mind and tends to be given the most weight.\n\nWhat you can do: A skim of the Issues a developer worked on over the past year can be an important reminder of all they contributed, and a great way to refresh your memory.\n\nIn addition, a deep dive into specific engineering metrics can help you distinguish longstanding patterns from recent anomalies."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/combat-performance-review-biases-with-objective-data", "content": "In addition, a deep dive into specific engineering metrics can help you distinguish longstanding patterns from recent anomalies.\n\nFor example, you may have noticed that a developer is prioritizing their own work and putting off reviewing teammates\u2019 Pull Requests.\n\nBy looking at trends in a metric like Review Speed, you can determine whether or not that\u2019s a new development, so you can calibrate your conversation accordingly.\n\nHalo/Horns Effect\n\nThe Halo/Horns Effect occurs when a manager lets one trait \u2014 good or bad \u2014 skew their entire impression of an individual.\n\nWhat you can do: There may be an engineer on your team who rarely speaks during meetings, and only participates when directly spoken to.\n\nYou could take that as evidence that they\u2019re generally disengaged at work, but data might reveal otherwise.\n\nIf that same engineer has a consistently high PR Throughput and frequently participates in Code Review, it\u2019s more likely that they just don\u2019t like speaking up in group settings."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/combat-performance-review-biases-with-objective-data", "content": "If that same engineer has a consistently high PR Throughput and frequently participates in Code Review, it\u2019s more likely that they just don\u2019t like speaking up in group settings.\n\nWith this information, you can offer specific feedback about their participation in meetings, rather than general (and inaccurate) feedback about their overall level of engagement, or you can adapt your expectations to match their work style.\n\nGender Bias\n\nStudies show that reviewers tend to focus more on the personality traits of women and female-presenting individuals than on their skills or accomplishments.\n\nWhat you can do: Make a conscious effort to focus on an individual\u2019s work, and be sure to check any of your assumptions against objective data.\n\nFor example, you can look at a developer\u2019s history of commits, pushes, and review activity to confirm whether their work is in line with your expectations for a developer in their role."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/combat-performance-review-biases-with-objective-data", "content": "For example, you can look at a developer\u2019s history of commits, pushes, and review activity to confirm whether their work is in line with your expectations for a developer in their role.\n\nYou might expect a more senior developer to spend less time committing new code and more time giving feedback to their teammates, but your expectations may be the opposite for a more junior team member.\n\nSimilarity Bias\n\nThis is the tendency of a manager to look more favorably on team members who remind them of themselves, perhaps due to a particular personality trait, a shared work style, or an aspect of their training or background.\n\nWhat you can do: You may feel a particular kinship with a developer and assume that they\u2019re achieving at the level you would in their role, but a look at the data \u2014\u00a0whether it\u2019s their PR Throughput or a review of their contributions to Code Reviews \u2014\u00a0 can help you regain perspective and ground your assessment in the reality of their work."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/combat-performance-review-biases-with-objective-data", "content": "Using Data to Check Your Performance Review Biases\n\nData is not only a valuable tool for dismantling performance review biases, it can help you deliver specific, actionable feedback and collaborate with developers to set clear goals for the future.\n\nAs with any tool, however, it must be used carefully.\n\nQuantitative data should always be contextualized with qualitative data, and it\u2019s important to resist the urge to compare or rank the members of your team.\n\nDevelopers coding new features will naturally work at a different pace than those working through technical debt, and team leads will likely be focused more on coaching or project management than committing code.\n\nYou\u2019ll need to pair data with an understanding of the circumstances surrounding each team member\u2019s work in order to have a complete picture of their overall performance.\n\nIf you\u2019re interested in learning more about incorporating data into your performance reviews, speak to a Velocity product specialist."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/combat-performance-review-biases-with-objective-data", "content": "If you\u2019re interested in learning more about incorporating data into your performance reviews, speak to a Velocity product specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-best-practices", "content": "The authors of Accelerate surveyed over 23,000 individuals in 2,000 distinct software companies to uncover the methodologies that set top-performing organizations apart.\n\nTheir research suggests that \u201cspeed and stability are outcomes that enable each other\u201d and that any software organization can measure and improve these outcomes.\n\nThe Continuous Delivery (CD) best practices they recommend, such as keeping batch size small, automating repetitive tasks and investing in quick issue detection, all perpetuate speed and quality while instilling a culture of continuous improvement on the team.\n\nWhile most of the industry is actively adopting CD, few have set up any way to measure their progress.\n\nConcrete metrics, such as those found within Velocity, are a prerequisite to ensuring success in this transition.\n\nIn this guide, we\u2019ve outlined how you can use Velocity to answer:\n\nHow effectively is my team adopting CD practices?\n\nWhat\u2019s hindering faster adoption?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-best-practices", "content": "In this guide, we\u2019ve outlined how you can use Velocity to answer:\n\nHow effectively is my team adopting CD practices?\n\nWhat\u2019s hindering faster adoption?\n\nMeasure Improvement to Shipping Speed and Throughput\n\nThere are two success metrics that can represent how \u201ccontinuously\u201d your organization is shipping: speed (Cycle Time), and throughput (Pull Requests Merged or Deploy Volume).\n\nStart by looking at the Analytics report to see how well you\u2019ve been improving on one of those metrics.\n\nWe recommend looking back at least 90 days.\n\nCycle Time, or the time between an engineer\u2019s first commit to merging to production, should be trending down.\n\nGood coding habits, such as working in small batches, should keep changesets moving through the process with little friction, while CI/CD tooling should automate a lot of late engineering or QA work that frequently blocks merging to production.\n\nHere\u2019s how you can read this trend:\n\nDecreasing means you\u2019re moving in the right direction."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-best-practices", "content": "Here\u2019s how you can read this trend:\n\nDecreasing means you\u2019re moving in the right direction.\n\nYou\u2019ve already adopted some Continuous Delivery best practices that have unblocked engineers and enabled them to move a single work in progress through the pipeline as quickly as possible.\n\nFlat is what you\u2019d expect when you\u2019re not in a state of transition.\n\nTypically, teams hit a local maximum with process efficiency when they\u2019ve optimized as much as they can.\n\nIf you\u2019re in the middle of transitioning to CD, however, a flat Cycle Time is a bad thing.\n\nIt means that even if you\u2019ve changed some of the tooling or the messaging around how to ship software, this has not had the intended effect.\n\nSpiky indicates inconsistencies, and that your process is not delivering predictable results.\n\nYou\u2019ll want to take a closer look at days or weeks with particularly high Cycle Times to diagnose why work is getting stuck."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-best-practices", "content": "You\u2019ll want to take a closer look at days or weeks with particularly high Cycle Times to diagnose why work is getting stuck.\n\nIncreasing is not a state you want to be in for a prolonged period of time, but can be normal during change management, as your team learns new practices and transitions to new tooling.\n\nAlternatively, you can use Pull Requests Merged or Deploys as your yardstick.\n\nIn this case, you can invert how you interpret results.\n\nIncreasing throughput is desired, while flat and decreasing trends are a red flag that your team\u2019s new practices are not yet yielding better outcomes.\n\nDive Into Key Health Metrics Team by Team\n\nAfter understanding your overall engineering speed, you\u2019ll want to investigate health metrics to find specific areas for improvement.\n\nVelocity metrics can serve as strong proxies for the following Continuous Delivery practices:\n\nGood Coding Hygiene, which means working in small batch sets (PR size) and opening Pull Requests early (Time to Open)."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-best-practices", "content": "High Review Effectiveness, which means balancing review thoroughness (Review Coverage) and speed (Review Speed), while ensuring that comments lead to action (Review Influence).\n\nHigh Engineering Capacity, which means developers have enough time for engineering work (Weekly Coding Days).\n\nIn Velocity\u2019s Compare report, you can look at these metrics across teams or for individuals to identify coaching opportunities or process improvements.\n\nClick on a team to drill down and see performance on an individual basis:\n\nFinally, get more context on a team or individual by seeing how they\u2019ve performed on a specific metric, historically.\n\nThe Analytics report lets you pick how far back you look and then drill down into any units of work that are dragging the average up or down."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-best-practices", "content": "The Analytics report lets you pick how far back you look and then drill down into any units of work that are dragging the average up or down.\n\nFind the Biggest Opportunities for Improvement in Your Software Delivery Process\n\nNow that you have all the context for how your team is working, create a mental model of your software delivery pipeline to see where a unit of work is most likely to get stuck.\n\nThis will help you prioritize where you should start making optimizations.\n\nWe recommend breaking your process into three portions:\n\nTime to Open, or how long does development take.\n\nReview Speed, or how long does work sit before getting picked up for review.\n\nTime to Merge, or how long does the entire code review process take.\n\nYou can look at these three metrics side by side, by selecting them in the Analytics report and viewing them as bar graph clusters by week or by month.\n\nWith this data, you\u2019ll be able to determine which area of your process is worth a closer look."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-best-practices", "content": "With this data, you\u2019ll be able to determine which area of your process is worth a closer look.\n\nIf multiple stages need attention, we recommend starting with the one that comes earliest in your development pipeline, as improvements at early stages can have an impact downstream.\n\nTo dig into your own data and start measuring your progress towards Continuous Delivery, sign up for a free trial of our engineering analytics product, Velocity.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "This post is the fifth and final article in our Tactical Guide to a Shorter Cycle Time five-part series.\n\nRead the previous post here.\n\nIf developers\u2019 changesets aren\u2019t always deploy-ready upon merging, your team is not practicing Continuous Delivery.\n\nThe final step to fully optimizing your time to market (or your Cycle Time) is to indoctrinate seamless deployment, holding every engineer responsible for keeping the main production branch in a releasable state.\n\nImpediments to true Continuous Delivery fall into three categories:\n\nProcess: Your process involves many manual blockers, including QA and manual deployment.\n\nBehavioral: Your managers or engineers lack confidence.\n\nThey\u2019re not sure whether defects will be caught before merging or whether their team can respond to issues uncovered after deployment.\n\nTechnical: Your current tooling is either lacking, too slow, or breaks frequently."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Technical: Your current tooling is either lacking, too slow, or breaks frequently.\n\nThis post will walk you through mitigating each obstacle so that you can achieve a deploy-ready culture on your engineering team.\n\nWork through Process Impediments\n\nTransitioning to a CD process requires every person on your development team to spend their time as strategically as possible.\n\nThis ruthless approach to time management requires automating everything you can in the deployment process\u2014 particularly, any manual phases that completely block deployment.\n\nOn many teams, the hardest transition is moving away from a process in which humans gate shipping, such as manual QA and security checks.\n\nThese stamps of approval exist to give your team confidence that they\u2019re not shipping anything that isn\u2019t up to snuff.\n\nTo eliminate these blockers, you\u2019ll need to address quality concerns throughout your software dev process\u2014not just at the end."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "To eliminate these blockers, you\u2019ll need to address quality concerns throughout your software dev process\u2014not just at the end.\n\nRemove QA as a Blocker to Deployment\n\nThe purpose of testing, whether manual or automatic, is to ensure software quality is up to standard.\n\nMany of the practices within CD, such as working in small batches and conducting Code Review, inherently serve as quality control measures.\n\nAny major defects that your team doesn\u2019t catch during development should be caught with automated testing.\n\nTo reduce the risk associated with removing QA as a blocker:\n\nAutomate testing throughout the software development process (not just at the end).\n\nWhere and what you test will depend on a multitude of factors, but consider testing as early as possible to ensure developers can make changes before putting in too much work.\n\nDo not overtest.\n\nOvertesting may lead to long build times and will simply replace a manual bottleneck with an automated one."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Do not overtest.\n\nOvertesting may lead to long build times and will simply replace a manual bottleneck with an automated one.\n\nWe recommend trying to ensure that test coverage is sufficient enough.\n\nIf an issue isn\u2019t caught and does break in the middle of the night, it doesn\u2019t require waking up an engineer.\n\nUse feature flags and dark launches.\n\nIf there are deployment risks that you have not yet mitigated, use feature flags to roll out changes either internally or to a small sample of your customer base.\n\nFor further research, check out Launch Darkly\u2019s full e-book on Effective Feature Management.\n\nOnce you have these components in place, you\u2019ll want to make sure you have an effective monitoring system, where your tools surface issues as quickly as possible.\n\nMeasuring Mean Time to Discovery (MTTD) alongside Mean Time to Recovery (MTTR) will help you consistently track and improve the efficiency of both, your monitoring and your pre-deploy testing suite."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Measuring Mean Time to Discovery (MTTD) alongside Mean Time to Recovery (MTTR) will help you consistently track and improve the efficiency of both, your monitoring and your pre-deploy testing suite.\n\nShift Security & Compliance Checks left\n\nSecurity is one of the most important checks before deployment, which is why you shouldn\u2019t leave it open to human error.\n\nEnable your security experts to think strategically about what kind of testing they should run, while leaving much of the tactical security work to the machines.\n\nTo integrate security throughout your software delivery process, consider:\n\nInvolving security experts into the software planning and design process.\n\nWhenever a feature that handles particularly sensitive data is coming down the Continuous Delivery pipeline, include your security team in the planning and design process.\n\nThis way, security considerations are baked into the process and front-of-mind for the team as they build out the feature."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "This way, security considerations are baked into the process and front-of-mind for the team as they build out the feature.\n\nAutomated source code scanning (SAST): With 80% of attacks aimed at the application layer, SAST remains one of the best ways to keep your application secure.\n\nAutomated SAST tools detect all of the most threatening application risks, such as broken authentication, sensitive data expose, and misconfiguration.\n\nAutomated dynamic testing (DAST): Frequently called black-box testing, these tests try to penetrate the application from the outside, the way an attacker would.\n\nAny DAST tool would uncover two of the most common risks\u2014 SQL injection (SQLi) and cross-site scripting (XSS).\n\nAutomated testing for dependence on a commonly-known vulnerability (CVE): The CVE is a dictionary maintained by the Cybersecurity and Infrastructure Security Agency that you can use as a reference to make sure your automated testing has covered enough ground."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Building secure and reusable infrastructure for the team.\n\nWith the above covered, your security team can apply their expertise to create tools for the rest of the team in the form of modules or primitives.\n\nThis way, they\u2019ll enable developers without security training to write systems that are secure by default.\n\nNaturally, there will always be manual work for your security team, such as penetration testing.\n\nIf you\u2019re folding security into your development process, however, it won\u2019t become a bottleneck at the very end of the process, stopping features from getting out to customers.\n\nWork through Behavioral Impediments\n\nA survey conducted by DevOps Group found that organizational culture is the most significant barrier to CD implementation.\n\nThe behavioral change required to foster a culture of Continuous Delivery is the most difficult, yet the least discussed, aspect of adapting true CD practices."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "The behavioral change required to foster a culture of Continuous Delivery is the most difficult, yet the least discussed, aspect of adapting true CD practices.\n\nYour team needs to have confidence that their testing infrastructure and ability to respond to changes are strong enough to support Continuous Deployment.\n\nTo instill this certainty, you\u2019ll need to create alignment around CD benefits and encourage best practices throughout the software delivery process.\n\nCreate Organizational Alignment on Continuous Delivery\n\nIf properly communicated, the Continuous Delivery pipeline should not be a hard sell to engineers.\n\nCD unblocks developers to do what they like most\u2014building useful software and getting it out into the world.\n\nThree intended outcomes will help you get both managers and engineers invested in Continuous Delivery:\n\nLess risk."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Three intended outcomes will help you get both managers and engineers invested in Continuous Delivery:\n\nLess risk.\n\nIf the testing infrastructure is solid (more on this below), and the developers agree that it\u2019s solid, they will feel more comfortable shipping their changes upon merging.\n\nHigher impact for the individual developer.\n\nWhen developers have the power to merge to production, they feel more ownership over their work.\n\nDue to sheer expectations of speed, the Continuous Delivery pipeline minimizes top-down planning and gives developers the ability to make more choices related to implementation.\n\nLess blame.\n\nBecause ownership over a feature isn\u2019t siloed in one individual, the software development process becomes much more collaborative.\n\nDistributed ownership over features eliminates some of the anxiety (and potential blame) when developers decide to ship their changes to production."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Distributed ownership over features eliminates some of the anxiety (and potential blame) when developers decide to ship their changes to production.\n\nEquip Your Team for Change with Best Practices\n\nThus far, our Tactical Guide to a Shorter Cycle Time five-part series has included dozens of best practices that you can share with your team.\n\nIn addition to these phase-specific optimizations, you\u2019ll also want to coach these general principles:\n\nWork in small, discrete changes.\n\nWhen developers are scoping a Pull Request, they should be thinking: what is the smallest valuable step I can make towards this feature?\n\nWhen they\u2019ve scoped and built that Pull Request, it should be deployed to production.\n\nThey should avoid long-running feature branches.\n\nAlways prioritize work closest to completion.\n\nHave developers minimize work in progress as much as possible.\n\nIf you\u2019re using a Kanban board, this means prioritizing items that are closest to done."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Always prioritize work closest to completion.\n\nHave developers minimize work in progress as much as possible.\n\nIf you\u2019re using a Kanban board, this means prioritizing items that are closest to done.\n\nDon\u2019t be surprised if this transition process takes over six months.\n\nThe confidence required from your team will take a long time to build as they become accustomed to this new work style.\n\nIf you\u2019d like to move quickly, adopt CD with a team of early adopters who are already interested and motivated to make a positive change.\n\nYou can learn from adoption friction in a small environment to better ease the larger organization transition.\n\nWork through Technical Impediments\n\nYour team can\u2019t overcome either behavioral nor process impediments unless they have confidence in their suite of CI/CD tools.\n\nBuilds that perform automated testing and deployment should be fast and reliable, while your monitoring set up gives you clear and instant visibility into how things are running."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Builds that perform automated testing and deployment should be fast and reliable, while your monitoring set up gives you clear and instant visibility into how things are running.\n\nSharpen Your Tools\n\nYou\u2019re not able to ship features to customers multiple times a day, if either:\n\nYour build is flakey, or\n\nYour build is slow.\n\nAnd even if your tests pass, your team won\u2019t have the confidence to set up automatic deployment, if:\n\nYour monitoring isn\u2019t thorough, or\n\nYour monitoring isn\u2019t well-tuned.\n\nAgain, a safe way to test the waters is to use dark launches or feature flags.\n\nYour team will be able to test how quickly issues are caught and how quickly they can recover\u2014all without compromising the customer experience.\n\nAs you work to improve your testing builds and monitoring, we recommend slowly transitioning your manual deploy schedule to a more frequent cadence.\n\nStart with weekly deploys, then daily, then multiple deploys a day."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Start with weekly deploys, then daily, then multiple deploys a day.\n\nFinally, automate the deployment process once pressing the deploy button feels like a waste of time.\n\nThe Holy Grail of Software Delivery\n\nEvery article in our series has guided you through optimizing each phase in the software delivery process.\n\nIf you\u2019ve been successful with this, then your developers are making small incremental changes, pushing frequently, and moving work through the Continuous Delivery pipeline with little to no friction.\n\nBut unless you\u2019re actually shipping those changes to production, you\u2019re not practicing Continuous Delivery.\n\nThe point of CD (and Agile before that) was to shorten the feedback loop between customers and engineers.\n\nWorking incrementally, but still shipping massive releases, does not accomplish this objective.\n\nDeliver continuously to mitigate risk, respond quickly, and get the best version of your software into the hands of customers as quickly as possible."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/continuous-delivery-pipeline-deployment-blockers", "content": "Deliver continuously to mitigate risk, respond quickly, and get the best version of your software into the hands of customers as quickly as possible.\n\nCheck out the other articles in our Tactical Guide to a Shorter Cycle Time five-part series:\n\nPart I: The Virtuous Circle of Software Delivery\n\nPart II: The Single Greatest Lever in Shortening Cycle Time\n\nPart III: How to Stop Code Review from Bottlenecking Shipping\n\nPart IV: Keep Code Review from Being a Waste of Everyone\u2019s Time\n\nPart V: The Last Mile to True Continuous Delivery\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cto-and-ceo-alignment", "content": "For many CTOs, communicating with the CEO (or any member of the executive team) can be an unending source of frustration.\n\nThough I\u2019m a CEO today, I\u2019ve also been a CTO, and I\u2019ve seen firsthand the challenges that brings.\n\nIt\u2019s not easy to convey a complete picture of the state of an engineering organization to a technical leader who isn\u2019t involved in the team\u2019s day-to-day, and it\u2019s even harder when you\u2019re speaking to someone without a technical background.\n\nYou may be working towards the same goal, but if you\u2019re not aligned on how to get there or how things are going, you\u2019ll face unnecessary challenges at every turn.\n\nUnless you know the secret \u2014 the key to enhancing alignment with executive stakeholders, including the CEO \u2014 clear, objective reporting.\n\nReporting isn\u2019t just for your boss\n\nCTOs often face difficulties securing budget for critical initiatives, facilitating agreement on the state of a situation, explaining that engineering isn\u2019t always the bottleneck, and more."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cto-and-ceo-alignment", "content": "These may seem like distinct challenges, but in reality they share a common foundation \u2014 they\u2019re all difficulties rooted in issues of communication and alignment.\n\nA key responsibility of executive leadership is improving communication and facilitating alignment.\n\nNo matter how well your team performs, no matter how stellar your software, your department\u2019s success will likely be limited if you can\u2019t get stakeholders on the same page.\n\nIn order to promote alignment, you\u2019ll need to leverage one of the most underappreciated, oft-maligned tools at your disposal: reporting.\n\nThough it has a bad reputation \u2014 Office Space\u2019s TPS reports always come to mind \u2014 reporting has a lot to offer.\n\nNot timecards, not compulsory bureaucratic tracking, but great reporting (more on what that means in a moment), can offer enormous benefit to you and your team.\n\nDone well, reporting allows you to frame the conversations you need to have, and inform the decisions that need to be made."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cto-and-ceo-alignment", "content": "Done well, reporting allows you to frame the conversations you need to have, and inform the decisions that need to be made.\n\nEvery other department has already learned this lesson.\n\nSales, Marketing, HR, and Finance are all reporting on objective data, using it to advocate for their departments and drive critical discussions with the rest of the executive team.\n\nIt\u2019s time for engineering leaders to do the same.\n\nWhat is great reporting?\n\nIn this context, reporting is the process of gathering and sharing quantitative and qualitative information in order to create the opportunity for shared, fact-based understanding.\n\nIt ensures that everyone comes to the table with the same data, and that they\u2019re operating on the basis of facts, not feelings.\n\nUnderstanding occurs when that data is contextualized and internalized, and can be used to drive conversations and decisions.\n\nGreat reporting goes above and beyond the requirements of that definition."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cto-and-ceo-alignment", "content": "Understanding occurs when that data is contextualized and internalized, and can be used to drive conversations and decisions.\n\nGreat reporting goes above and beyond the requirements of that definition.\n\nIt involves:\n\nConsistent data \u2014 Tracking the same metrics in every report makes it possible to track trends and surface patterns.\n\nCurated data \u2014 Sticking to the most relevant data makes reporting more useful; too much information can be just as useless as none at all.\n\nPredictable intervals \u2014 Reporting on a regular cadence helps establish and strengthen understanding.\n\nAppropriate context \u2014 Sharing additional information \u2014 for instance, pairing data with industry benchmarks, past trends, or other relevant metrics \u2014 can help tell a more complete story.\n\nNecessary precision \u2014 Using the most logical unit of measurement is important; if you measure something in hours instead of minutes or days, it can be a distraction unless the reason for that interval is clear."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cto-and-ceo-alignment", "content": "Correct elevation \u2014 Choosing data with the right level of granularity can make it easier for your report\u2019s recipient to understand.\n\nReporting establishes a shared foundation for having critical conversations and making key decisions, but it\u2019s just a starting point.\n\nYour report might show your CEO that things are going well, or that a major initiative is off-track, but it can\u2019t explain why, nor can it solve problems.\n\nStill, when done well, reporting can be the basis for productive collaboration, and can help you drive success in your organization.\n\nTo find out how to leverage clear, objective reporting to meet your organizational goals, speak to one of our product specialists.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/cto-and-ceo-alignment", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/culture-of-feedback-engineering", "content": "Technology leaders looking to drive high performance can support the evolution of their teams by creating a culture of feedback in their organization.\n\nRead on to find out why honest and constructive feedback is crucial to engineering success.\n\nThe Importance of Routine Feedback\n\nRegular feedback on particular units of work, processes, and best practices can be an effective way to help ensure agile teams are aligned and that all requirements are understood and met.\n\nEmployees who receive regular feedback on their work feel more confident and secure in their positions because they understand what is expected of them and the role they play in the organizational structure.\n\nAccording to one report, only 43% of highly-engaged employees received feedback on a weekly basis, while an astonishing 98% said they fail to be engaged when managers give little to no feedback, showcasing how essential feedback is to the cohesiveness of teams."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/culture-of-feedback-engineering", "content": "Furthermore, a positive culture of feedback can enhance psychological safety on teams.\n\nWhen feedback is a fundamental part of a blameless team culture, team members understand that feedback is critical to growing as a team and achieving key goals, and will likely feel more secure in sharing ideas, acknowledging weaknesses, and asking for help.\n\nHow to Foster a Feedback-rich Culture\n\nAs an executive, it is important to lead by example, as your actions can serve as a benchmark for best practices to be followed throughout the organization.\n\nLeverage the Power of 1:1\u2019s\n\nRegular check-ins can play an integral role in building a successful feedback culture.\n\nProviding dedicated time for managers and direct reports to discuss goals, share feedback, and more, 1:1\u2019s are a great way to engage employees and build trust."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/culture-of-feedback-engineering", "content": "Providing dedicated time for managers and direct reports to discuss goals, share feedback, and more, 1:1\u2019s are a great way to engage employees and build trust.\n\nDuring your 1:1\u2019s, you\u2019ll have the opportunity to ask questions and make statements that:\n\nBuild an interpersonal connection \u2013 \u201cHow are you and your family\u201d Encourage collaboration \u2013 \u201cWhat\u2019s on your mind?\n\nIs there anything I can help you with that you may be stuck on?\u201d\u00a0 Show recognition, appreciation, or provide coaching\n\nHere at Code Climate, our executives and managers hold weekly 1:1\u2019s with their direct reports to surface any process blockers, discuss ambitions, and generally catch up.\n\nWe are committed to this practice as a way to foster safety, transparency, and cohesion within our organization.\n\nWe aim to ensure that each team member understands how their work fits into larger company initiatives and feels secure enough to share ideas that enable us to continually innovate and improve."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/culture-of-feedback-engineering", "content": "We aim to ensure that each team member understands how their work fits into larger company initiatives and feels secure enough to share ideas that enable us to continually innovate and improve.\n\nEnhance Feedback with Engineering Data\n\nThe most effective feedback is specific and actionable, so it can be helpful to use engineering data to ground conversations in particular units of work.\n\nFor example, if you have a question on a specific Pull Request, it can be helpful to surface detailed information on that particular PR to help you place progress in context and check any assumptions you may have.\n\nObjective data can also help you identify areas where coaching may be beneficial or showcase areas where you might not have known an IC was excelling.\n\nFurthermore, data can help you set and track progress towards goals, adding value and effectiveness to your feedback."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/culture-of-feedback-engineering", "content": "Furthermore, data can help you set and track progress towards goals, adding value and effectiveness to your feedback.\n\nFeedback Goes Both Ways\n\nA culture of feedback is most effective when it\u2019s holistic, so it\u2019s important to make sure you\u2019re giving your team members the opportunity to impart their feedback on processes, workflow, expectations, and more.\n\nTo help achieve this, you can provide your team members with a forum to share viewpoints during 1:1\u2019s, standups, and retrospectives.\n\nIn doing so, you regularly afford yourself the opportunity to actively listen to and learn from your team.\n\nFeedback is an essential tool that helps leaders drive excellence on their teams."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/culture-of-feedback-engineering", "content": "In doing so, you regularly afford yourself the opportunity to actively listen to and learn from your team.\n\nFeedback is an essential tool that helps leaders drive excellence on their teams.\n\nRemember:\n\nA culture of positive feedback helps create the ideal conditions for innovation\n\n1:1\u2019s can be a powerful way to build trust and create alignment\n\nEngineering data can help you place observations in context\n\nA true culture of feedback requires that team members are also empowered to speak up and offer their feedback\n\nWith a thoughtful approach, you can cultivate a safe and welcoming work environment that motivates teams to strive for excellence.\n\nTo find out how to employ data-driven feedback in your organization, reach out to a product specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/culture-of-feedback-engineering", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "Metrics are an essential tool for engineering leaders looking to gain objective insights about the teams they manage.\n\nIn order to improve business outcomes and overall team health, leaders must identify which metrics to track and apply the data with intention.\n\nCode Climate\u2019s Senior Product Manager, Mike Koeneke, sat down with three directors of engineering: Sophie Roberts of Shopify; Mojtaba Hosseini of Zapier; and Romain Dupas of Code Climate, to discuss how they each define and utilize metrics to meet their goals.\n\nRead on for highlights from their conversation.\n\nAnswers have been shortened for length and clarity.\n\nDefining Metrics: Which metrics do engineering leaders look at, and why?\n\nSophie: There are four kinds of metrics I look at on a regular basis:\n\nOperational or system health metrics: These include SLAs, API failure rates, system throughput \u2014 the things that tell you, as an engineering leader, if your product is healthy."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "Development metrics: Your average time to commit, your average build time, and your build success failure, which fall under engineering productivity, helping us understand how to improve the productivity of our engineering teams.\n\nOrganizational health metrics: Team composition, retention, employee morale, and ability to actually hit goals that you set.\n\nIt helps us understand if our people are in a good place and are being effective.\n\nBusiness metrics: These metrics show that the business is moving forward.\n\nAre we having the impact on the business that we expect to have with regards to things like revenue, customer acquisition, efficiency?\n\nMojtaba: One thing we\u2019ve started to do at Zapier is to talk about hierarchy of metrics that go beyond engineering, and trying to tie in the engineering metrics into a larger set."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "Mojtaba: One thing we\u2019ve started to do at Zapier is to talk about hierarchy of metrics that go beyond engineering, and trying to tie in the engineering metrics into a larger set.\n\nAs a SaaS company, we\u2019ve got our financial metrics which are very top of mind for the board and the C levels\u2026[so for example,] your customer metrics: your churn and activation\u2026if you\u2019re developing quickly, if you\u2019re getting that feedback, if your teams are high performing and happy and engaged.\n\nIf so, you probably are creating good products, which bring in users, which then brings in the revenue.\n\nRomain: I look at metrics corresponding to all aspects of our process and our goals: Team goals such as OKRs, financial goals, computing metrics, API metrics, productivity.\n\nAt the end of the day, any goal or process needs to be measurable.\n\nDefining those goals and metrics will make the process more efficient."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "At the end of the day, any goal or process needs to be measurable.\n\nDefining those goals and metrics will make the process more efficient.\n\nBalancing Intuition With Objective Data\n\nSophie: The superpower of actually using metrics is to combine the data with judgment and instincts.\n\nIf someone on your team is in the lower bound of what you\u2019ve chosen as a performance metric, and you substitute the metric for your judgment and say they\u2019re underperforming, you\u2019re making a bad decision.\n\nWhen it comes to things like organizational metrics or individual performance metrics, I don\u2019t even look at those as objective pieces of data.\n\nI look at those as pieces of data that allow us to explore the margins and find things to be curious about.\n\nThat\u2019s where your judgment and instinct come in.\n\nMojtaba: I have a mental model around using metrics: the dashboard of a car.\n\nThe car\u2019s purpose is to serve the drivers and the passengers."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "That\u2019s where your judgment and instinct come in.\n\nMojtaba: I have a mental model around using metrics: the dashboard of a car.\n\nThe car\u2019s purpose is to serve the drivers and the passengers.\n\nThe dashboard, intrinsically, is of no real value if the humans don\u2019t get where they want to go.\n\nYou need the objective data: What is my speed?\n\nWhat is the oil gauge telling me?\n\nThe speedometer?\n\nBut you still need the human to decide where to go.\n\n[As the driver], I might know the maintenance history of the car, so even if the manufacturer tells me I can go faster, I\u2019m not going to push the car to the maximum speed \u2014 because of experience and intuition.\n\nThe intuition by itself can be too vague and needs the objective data, a reality check.\n\nBut the reality check without that vision just becomes a bunch of numbers.\n\nRomain: Continuing with the car analogy, on the dashboard is a limited amount of space to show the information that matters."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "But the reality check without that vision just becomes a bunch of numbers.\n\nRomain: Continuing with the car analogy, on the dashboard is a limited amount of space to show the information that matters.\n\nYou don\u2019t have anything related to what\u2019s in your trunk; the only information you have is what\u2019s valuable: information about the safety of your car.\n\nWith metrics, you don\u2019t measure everything; understand what you want to measure for your own goal.\n\nContext is Key: Make Sure Your Team Knows Their Purpose\n\nSophie: It\u2019s critical for me, and I think for all businesses, for every single engineer to understand how the work contributes to the business\u2019 success.\n\nWhen people understand that, then they understand what [things like] an outage actually mean for our merchants."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "When people understand that, then they understand what [things like] an outage actually mean for our merchants.\n\nMy engineering team will sit in on interviews with our customers on a weekly basis and they\u2019ll just chat and understand the pain points, because it\u2019s really important that people can tie the experience of your customers to the metrics of the work that they\u2019re doing.\n\nMojtaba: The job of the leader is to understand how pieces work together and track the outcome they\u2019re working towards.\n\nIf a platform team is going very slowly, that\u2019s okay, because they are the platform team.\n\nThey build, they make it so that other teams can go faster.\n\nAt a high level, we\u2019re still going fast, but I\u2019m not going to tell the platform team they should be going as fast as these other non-platform teams.\n\nThey fulfill different functions, and it\u2019s the aggregate of those that really brings value.\n\nThat interpretation, that context, is what leaders need to bring together."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "They fulfill different functions, and it\u2019s the aggregate of those that really brings value.\n\nThat interpretation, that context, is what leaders need to bring together.\n\nBe Transparent: Share Metrics With Your Team\n\nSophie: Don\u2019t hide your business metrics from the engineering team.\n\nIf I could get anyone to take an action item from this, it would be that if your engineering team isn\u2019t getting a copy of your Monthly Business Review (MBR), make that happen.\n\nRomain: My team and I actually set the OKRs together to be aligned with the business OKRs.\n\nI ask the team, What do you think we can do to move the organization in accordance with the business OKRs?\n\nAnd that works very well because it goes back to the idea of making sure that the team understands the metrics and is motivated to reach that goal, instead of imposing from the top down that you have to fit these metrics into your day-to-day work."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "Using Metrics for Compensation: What to Avoid and What to Reward\n\nSophie: You want people to take risks, you want people to fail, and you want the metrics to reflect the fact that things failed, but you don\u2019t want to punish people.\n\nSo there are a whole bunch of cultural interdependencies there that you have to manage.\n\nThe metrics can show us if the work is successful or not, but [for me], the metrics themselves don\u2019t tie into people\u2019s compensation.\n\nWhat ties into people\u2019s compensation is how they approach solving the problem.\n\nI think that\u2019s the only way you can do it if you\u2019re going to build a culture where experimentation, risk, and failure are genuinely valid, as opposed to just being talking points on a wall.\n\nMojtaba: We don\u2019t use the metrics in any way, even in the conversations we have about performance.\n\nThis might sound controversial, but we don\u2019t even have performance evaluation of individual contributors tied to compensation.\n\nWe have competency levels tied to compensation."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "This might sound controversial, but we don\u2019t even have performance evaluation of individual contributors tied to compensation.\n\nWe have competency levels tied to compensation.\n\nRomain: Metrics are a foundational bed to talk with my engineers about how we can make our process better.\n\nAnd the compensation aspect would be more about where we are today, and where we want to be.\n\nWho are the contributors that are going to lead the team, and what will be the involvement and quality of their contribution?\n\n[I base compensation on] what their work brings to the table to help the company, more than on the metrics themselves.\n\nTo find out what else Sohpie, Mojtaba, and Romain had to say, listen to the full discussion here.\n\nTo find out how you can use metrics to help your team meet their goals, request a free demo of Code Climate Velocity.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-engineering-leadership", "content": "To find out how you can use metrics to help your team meet their goals, request a free demo of Code Climate Velocity.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "As part of our ongoing series on data-driven performance reviews, Code Climate Founder and CEO, Bryan Helmkamp, sat down with Katie Wilde, VP of Engineering at Ambassador Labs, and Smruti Patel, Head of Engineering, LEAP & Data Platform, at Stripe to discuss the intricacies of performance reviews and how to best conduct them with the help of objective data.\n\nRead on to learn how leveraging objective data in your reviews can improve retention, mitigate bias, and positively impact developer confidence.\n\nTo see the conversation in full, check out the recording here.\n\nPerformance Reviews \u2013 Intended and Ancillary Benefits\n\nObjective data can assist in conducting fair and equitable performance reviews that help to improve retention and save organizations the added expense of sourcing and hiring new talent.\n\n\u201cEngineering hiring right now is extremely difficult, and what would be really great is if you didn\u2019t have to backfill roles on your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "\u201cEngineering hiring right now is extremely difficult, and what would be really great is if you didn\u2019t have to backfill roles on your team.\n\nIf you manage to retain people, that\u2019s way better than having to hire a bunch of new folks,\u201d Katie says, adding \u201c[Performance reviews] are extremely important for cultivating and retaining our top people and that\u2019s a different \u2018why\u2019 to the kind of thing people think of with performance reviews\u2026 yeah, sometimes we need to fire people for not doing a good job, but it\u2019s actually far more important to make sure that the people that are doing a fantastic job don\u2019t leave.\u201d\n\nTo Katie\u2019s point \u2014\u00a0a survey conducted by LinkedIn reports that, depending on the role, it can take the average organization over 40 days to fill a technical position, while the US Bureau of Labor Statistics projects that the demand for software engineers will grow 22% over the next decade, signaling hiring challenges to come in the space."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "Echoing Katie\u2019s sentiment, Smruti adds \u201c[Data-driven performance reviews] are key for supporting your high performers who want a formal way of [understanding], what does the next year look like?\n\nOr what does the next part of the journey look like?\n\nAnd so for me, this process, at the very least, provides missing data where a manager or organization might not even be aware of all the things that [a developer] is involved in, or the initiatives that they\u2019ve led and delivered.\u201d\n\nUsing Objective Data to Combat Biases\n\nBiases are a noted flaw of performance reviews, and a great way to mitigate those prejudices is to check assumptions against objective data.\n\nKatie has seen firsthand the inequities gender bias in particular can cause.\n\nIn one instance, when it came time to review a female engineer, Katie noticed inconsistencies between the engineer\u2019s self-review and her peer reviews.\n\nWhile the engineer had given herself a strong rating, her peers stated that her work pace was a little slow."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "While the engineer had given herself a strong rating, her peers stated that her work pace was a little slow.\n\nKatie decided to dig deeper and determine the cause of this discrepancy: had the engineer overstated her own abilities, or were her peers being overly critical?\n\nUsing Code Climate Velocity, Katie dug into the engineer\u2019s work and discovered that her PRs were in fact moving more slowly through the development pipeline, but not for the reason one might expect.\n\nHer PRs were getting held up in code review by change requests, and the requests were often for minor, stylistic changes.\n\nFurther investigation revealed that requests of this kind were not common across the team, and PRs written by male engineers tended to be approved quickly, without getting stuck in a similar feedback loop.\n\nWith this information, Katie was able to check her assumptions, calibrate her feedback, and uncover bias in both the review process and the team\u2019s day-to-day work."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "With this information, Katie was able to check her assumptions, calibrate her feedback, and uncover bias in both the review process and the team\u2019s day-to-day work.\n\nReflecting on the experience, Katie says \u201cSo that review cycle for that entire team went a completely different way than if I hadn\u2019t used data.\n\n[Without objective data] I absolutely would have done the review of, give all the men great reviews, tell the woman she needs to be more productive and get her act together, that she\u2019s got some decent skills, but she\u2019s got to do a better job, not promote her, and carry on.\n\nIt\u2019s just quite eye-opening.\n\nI am a woman in engineering.\n\nI know how hard it is.\n\nSo yeah, that\u2019s a case where I\u2019m just very grateful to have had that data.\u201d\n\nArticulating Impact with Engineering Data\n\nMany times during the performance review process, ICs are asked to conduct a self-evaluation."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "This portion of the review process surfaces an opportunity for ICs to share their perspectives on their own performance, actions, and choices.\n\nIt also helps managers understand how ICs view themselves in relation to their team and the company as a whole.\n\nCiting personal experience, Smruti observed that ICs can be so focused on what they\u2019ve built and delivered, that they often fail to see why their work mattered and the impact it had on the organization.\n\nShe noticed that this lack of self-advocacy rang especially true for underrepresented minorities.\n\nTo combat this, Smruti uses data to link individual achievements to verifiable facts to help ICs break the glass ceiling of self-perception.\n\n\u201cSo for me, when it comes down to quantifiable or qualitative data, it comes down to finding the right engineering data that best articulates that impact to the team on business goals."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "\u201cSo for me, when it comes down to quantifiable or qualitative data, it comes down to finding the right engineering data that best articulates that impact to the team on business goals.\n\nSo if you think about it, you can use a very irrefutable factor, say, \u2018I shipped X, which reduced the end-to-end API latency from 4 or 5 seconds to 2.5 seconds.\n\nAnd this is how it impacted the business.\u2019\u201d\n\nIn using objective data, ICs are able to see the impact their work has on their organization, and advocate for themselves to secure promotions and higher salaries.\n\nThe Annual Performance Review Process, Optimized\n\nWith Engineering Intelligence data at their fingertips, leaders can develop a review approach that places quantitative and qualitative data into context to deliver meaningful and actionable feedback that promotes the well-being of ICs and the growth of their teams."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/data-driven-performance-reviews", "content": "Speak to a Code Climate product specialist and see for yourself how data can help you conduct more effective annual performance reviews and drive engineering excellence.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "Born from frustration at the silos between development and operations teams, the DevOps philosophy encourages trust, collaboration, and the creation of multidisciplinary teams.\n\nAs DevOps rose in popularity, DevOps Research and Assessment (DORA) began with the goal of gaining a better understanding of the practices, processes, and capabilities that enable teams to achieve a high velocity and performance when it comes to software delivery.\n\nThe startup identified four key metrics \u2014 the \u201cDORA Metrics\u201d \u2014 that engineering teams can use to measure their performance in four critical areas.\n\nThis empowers engineering leaders, enabling them to benchmark their teams against the rest of the industry, identify opportunities to improve, and make changes to address them.\n\nWhat is DORA?\n\nDevOps Research and Assessment (DORA) is a startup created by Gene Kim and Jez Humble with Dr. Nicole Forsgren at the helm.\n\nGene Kim and Jez Humble are best known for their best-selling books, such as The DevOps Handbook."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "Gene Kim and Jez Humble are best known for their best-selling books, such as The DevOps Handbook.\n\nDr. Nicole Forsgren also joined the pair to co-author Accelerate in 2018.\n\nThe company provided assessments and reports on organizations\u2019 DevOps capabilities.\n\nThey aimed to understand what makes a team successful at delivering high-quality software, quickly.\n\nTheir annual reports present their findings, a combination of industry trends and learnings that can help other teams improve performance.\n\nThe startup was acquired by Google in 2018.\n\nWhat are DORA metrics?\n\nDORA metrics are a set of four measurements identified by DORA as the metrics most strongly correlated with success \u2014\u00a0they\u2019re measurements that DevOps teams can use to gauge their performance.\n\nThe four metrics are: Deployment Frequency, Mean Lead Time for Changes, Mean Time to Recover, and Change Failure Rate.\n\nThey were identified by analyzing survey responses from over 31,000 professionals worldwide over a period of six years."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "They were identified by analyzing survey responses from over 31,000 professionals worldwide over a period of six years.\n\nThe team at DORA also identified performance benchmarks for each metric, outlining characteristics of Elite, High-Performing, Medium, and Low-Performing teams.\n\nDeployment Frequency\n\nDeployment Frequency (DF) measures the frequency at which code is successfully deployed to a production environment.\n\nIt is a measure of a team\u2019s average throughput over a period of time, and can be used to benchmark how often an engineering team is shipping value to customers.\n\nEngineering teams generally strive to deploy as quickly and frequently as possible, getting new features into the hands of users to improve customer retention and stay ahead of the competition.\n\nMore successful DevOps teams deliver smaller deployments more frequently, rather than batching everything up into a larger release that is deployed during a fixed window."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "More successful DevOps teams deliver smaller deployments more frequently, rather than batching everything up into a larger release that is deployed during a fixed window.\n\nHigh-performing teams deploy at least once a week, while teams at the top of their game \u2014 peak performers \u2014\u00a0deploy multiple times per day.\n\nLow performance on this metric can inform teams that they may need to improve their automated testing and validation of new code.\n\nAnother area to focus on could be breaking changes down into smaller chunks, and creating smaller pull requests (PRs)\u200c, or improving overall Deploy Volume.\n\nMean Lead Time for Changes\n\nMean Lead Time for Changes (MLTC) helps engineering leaders understand the efficiency of their development process once coding has begun.\n\nThis metric measures how long it takes for a change to make it to a production environment by looking at the average time between the first commit made in a branch and when that branch is successfully running in production."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "It quantifies how quickly work will be delivered to customers, with the best teams able to go from commit to production in less than a day.\n\nAverage teams have an MLTC of around one week.\n\nDeployments can be delayed for a variety of reasons, including batching up related features and ongoing incidents, and it\u2019s important that engineering leaders have an accurate understanding of how long it takes their team to get changes into production.\n\nWhen trying to improve on this metric, leaders can analyze metrics corresponding to the stages of their development pipeline, like Time to Open, Time to First Review, and Time to Merge, to identify bottlenecks in their processes.\n\nTeams looking to improve on this metric might consider breaking work into smaller chunks to reduce the size of PRs, boosting the efficiency of their code review process, or investing in automated testing and deployment processes."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "Change Failure Rate\n\nThe Change Failure Rate (CFR) is a calculation of the percentage of deployments causing a failure in production, and is found by dividing the number of incidents by the total number of deployments.\n\nThis gives leaders insight into the quality of code being shipped and by extension, the amount of time the team spends fixing failures.\n\nMost DevOps teams can achieve a change failure rate between 0% and 15%.\n\nWhen changes are being frequently deployed to production environments, bugs are all but inevitable.\n\nSometimes these bugs are minor, but in some cases these can lead to major failures.\n\nIt\u2019s important to bear in mind that these shouldn\u2019t be used as an occasion to place blame on a single person or team; however, it\u2019s also vital that engineering leaders monitor how often these incidents happen.\n\nThis metric is an important counterpoint to the DF and MLTC metrics."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "This metric is an important counterpoint to the DF and MLTC metrics.\n\nYour team may be moving quickly, but you also want to ensure they\u2019re delivering quality code \u2014 both stability and throughput are important to successful, high-performing DevOps teams.\n\nTo improve in this area, teams can look at reducing the work-in-progress (WIP) in their iterations, boosting the efficacy of their code review processes, or investing in automated testing.\n\nMean Time to Recovery\n\nThe Mean Time to Recovery (MTTR) measures the \u200ctime it takes to restore a system to its usual functionality.\n\nFor elite teams, this looks like being able to recover in under an hour, whereas for many teams, this is more likely to be under a day.\n\nFailures happen, but the ability to quickly recover from a failure in a production environment is key to the success of DevOps teams.\n\nImproving MTTR requires DevOps teams to improve their observability so that failures can be identified and resolved quickly."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "Improving MTTR requires DevOps teams to improve their observability so that failures can be identified and resolved quickly.\n\nAdditional actions that can improve this metric are: having an action plan for responders to consult, ensuring the team understands the process for addressing failures, and improving MLTC.\n\nWhy should engineering leaders think about DORA metrics?\n\nMaking meaningful improvements to anything requires two elements \u2014 goals to work towards and evidence to establish progress.\n\nBy establishing progress, this evidence can motivate teams to continue to work towards the goals they\u2019ve set.\n\nDORA benchmarks give engineering leaders concrete objectives, which then break down further into the metrics that can be used for key results.\n\nDORA metrics also provide insight into team performance.\n\nLooking at Change Failure Rate and Mean Time to Recover, leaders can help ensure that their teams are building robust services that experience minimal downtime."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/dora-metrics", "content": "Looking at Change Failure Rate and Mean Time to Recover, leaders can help ensure that their teams are building robust services that experience minimal downtime.\n\nSimilarly, monitoring Deployment Frequency and Mean Lead Time for Changes gives engineering leaders peace of mind that the team is working quickly.\n\nTogether, the metrics provide insight into the team\u2019s balance of speed and quality.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-knowledge-silos", "content": "Knowledge silos are more than just a frustration or an inconvenience \u2014 they\u2019re a serious threat to productivity.\n\nYet with a few tweaks to team processes, and a commitment to intentional communication, engineering leaders can break down existing knowledge silos, and make it less likely that new ones will form.\n\nWhat are Knowledge Silos?\n\nKnowledge silos are individuals or groups in possession of information that is not readily accessible to the rest of an organization.\n\nSometimes knowledge silos are formed by the intentional withholding of information \u2014 an individual or team wants to be the go-to source for answers on a certain topic \u2014 but often they\u2019re the result of workflows that fail to encourage collaboration and knowledge sharing.\n\nGenerally, \u201cknowledge silo\u201d is not used to describe situations where the information in question is privileged or confidential, but rather, situations where sharing information would enable team members to work more efficiently or effectively."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-knowledge-silos", "content": "What Do you Stand to Gain from Knowledge Sharing?\n\nWhen engineers lack access to key information, they might end up spending time devising a new solution to a problem that has already been solved elsewhere in the codebase.\n\nOr, they may be forced to make assumptions, some of which will be incorrect, about how their work fits into the broader context of a feature or roadmap.\n\nWhen your team is solving the same problems over and over, or acting on incorrect assumptions, they\u2019ll be less efficient, more frustrated, and more likely to perform unnecessary rework.\n\nIn the more extreme cases, when knowledge only resides with one person on a team, that person\u2019s absence can bring work to a standstill.\n\nAt Code Climate, an initiative to promote intentional knowledge sharing, including logging key decisions and documenting new tracks of work, helped boost throughput almost 70%."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-knowledge-silos", "content": "At Code Climate, an initiative to promote intentional knowledge sharing, including logging key decisions and documenting new tracks of work, helped boost throughput almost 70%.\n\nA broader study, GitHub\u2019s 2021 State of the Octoverse, found that specific knowledge-sharing practices like creating and maintaining up-to-date, quality documentation, can increase developer productivity by 50%.\n\nHow Can you Break Down Knowledge Silos on Your Engineering Team?\n\nKnowledge silos are a natural and expected part of any evolving organization, particularly as it scales, but there are process-level measures leaders can take to actively encourage knowledge sharing.\n\nDocumentation \u2013 Though writing code may get all the glory, writing documentation is critical to the success of engineering projects.\n\nDocumentation allows teams to share context and to align on everything from best practices to project specifications.\n\nWhen documentation isn\u2019t written or maintained, information is harder to access."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-knowledge-silos", "content": "Documentation allows teams to share context and to align on everything from best practices to project specifications.\n\nWhen documentation isn\u2019t written or maintained, information is harder to access.\n\nEngineers not only need to know who to ask about a particular feature or project, they also have to feel comfortable reaching out with their question.\n\nPair Programming \u2013 Knowledge exchange is one of the most well-known benefits of pair programming.\n\nWhen two developers are working on the same piece of code, they\u2019ll exchange context and perspectives to arrive at a shared solution.\n\nWith pair programming, more junior team members will have the opportunity to ask questions; more senior team members can share wisdom culled from their own experiences; and team members with different specialties and skill sets can learn from each other."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-knowledge-silos", "content": "Code Review \u2013 While different organizations employ different best practices for Code Review, it is a fundamental opportunity for engineers to share knowledge and offer feedback to help improve each other\u2019s work.\n\nIf you\u2019re using an Engineering Management Platform like Velocity, metrics like Review Speed and Review Influence can help provide a sense of whether engineers are prioritizing Code Reviews, whether reviewers are leaving impactful feedback or rubber-stamping code, and if PRs are evenly distributed among reviewers.\n\nIf one reviewer is disproportionately commenting on certain kinds of PRs, or PRs associated with a particular area of the codebase, that could indicate a potential knowledge silo.\n\nDraft PRs \u2013 Designed to encourage collaboration, Draft PRs enable developers to signal to potential reviewers that code is a work in progress while still opening the door for feedback."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-knowledge-silos", "content": "Draft PRs \u2013 Designed to encourage collaboration, Draft PRs enable developers to signal to potential reviewers that code is a work in progress while still opening the door for feedback.\n\nThis allows developers to gain perspective from teammates at the earliest stages while ensuring that work in progress code does not get merged or prematurely factor into any review metrics being tracked in an Engineering Management Platform.\n\nBy implementing processes that require communication and collaboration, teams can actively encourage information sharing, rather than leaving it up to chance.\n\nWith more information exchanged, existing knowledge silos will break down, fewer new ones will form, and overall team productivity will get a boost.\n\nTo learn more about using an Engineering Management Platform to spot blockers like knowledge silos and improve engineering processes, speak to an Engineering Data Specialist.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-knowledge-silos", "content": "Subscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "Preparing for a board meeting is a stressful experience for everyone.\n\nFor many CTOs, it\u2019s also an exercise in futility, trying to zero in on engineering KPIs that accurately represent everything that\u2019s happened in the department.\n\nThe information that usually makes it to the board deck \u2014 information on completed features and incident reports \u2014 doesn\u2019t tell the whole story.\n\nA list of features shows what the team accomplished, but doesn\u2019t reveal anything about how the team works.\n\nIt can\u2019t reveal process issues that need to be addressed or highlight challenges the team has overcome.\n\nSimilarly, incident reports might illuminate problems in the codebase, but they\u2019re devoid of context about how the team is dealing with those issues.\n\nOther departments have self-evident, objective KPIs.\n\nSales, for example, can walk through their pipeline from demos booked to contracts signed, using objective measurements to chart their department\u2019s progress over time."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "Sales, for example, can walk through their pipeline from demos booked to contracts signed, using objective measurements to chart their department\u2019s progress over time.\n\nEngineering leaders, on the other hand, must get creative to provide that level of clarity.\n\nYou\u2019ll need to think carefully about the story you want your slides to tell, then choose engineering KPIs that map to those specific insights.\n\nWhen considering a metric, we recommend asking:\n\nWill this demonstrate the department\u2019s success (or lack thereof)?\n\nDoes this highlight something interesting or unexpected, and start a conversation?\n\nWill this help me ask for advice from the board?\n\nThese parameters will help you select the right data to drive productive conversations, so you can walk away with actionable guidance from the board.\n\nStart with Engineering Success Metrics\n\nTo convey big-picture information, start your presentation with engineering success metrics."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "Start with Engineering Success Metrics\n\nTo convey big-picture information, start your presentation with engineering success metrics.\n\nSuccess metrics speak to outcomes; they measure the results your team is getting.\n\nIn engineering, there are two aspects of success: planning and execution.\n\nEngineering decks usually include feature lists, which speak to your team\u2019s ability to plan.\n\nBut most engineering decks stop there.\n\nTo dig into execution \u2014 your team\u2019s ability to consistently ship projects \u2014 you\u2019ll need another set of success metrics.\n\nWhen choosing success metrics that highlight execution, look for metrics based on objective data rather than subjective measurements like story points.\n\nWith objective data, you\u2019ll be able to track progress across teams, projects, and quarters, and set more effective goals for your department.\n\nUse metrics like:\n\nDeploy Volume \u2013 A count of the engineering team\u2019s deploys within a given period of time, Deploy Volume can help quantify the engineering team\u2019s capacity."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "Use metrics like:\n\nDeploy Volume \u2013 A count of the engineering team\u2019s deploys within a given period of time, Deploy Volume can help quantify the engineering team\u2019s capacity.\n\nPR Throughput \u2013 The number of Pull Requests merged over a period of time.\n\nSimilar to Deploy Volume, PR Throughput can help you quantify how much the engineering team is getting done.\n\nCycle Time \u2013 The time between the first commit logged in a Pull Request, and when that Pull Request is merged.\n\nCycle Time acts as a proxy for engineering speed and can help you communicate how quickly the team is moving.\n\nDrill Down with Revealing Engineering KPIs\n\nAfter you report on success metrics, you\u2019ll want to dive into additional metrics that provide critical context and perspective.\n\nThink about what you know to be true for your team, and then pick the data that will help you illustrate that to the board."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "Think about what you know to be true for your team, and then pick the data that will help you illustrate that to the board.\n\nYou might want to include information that reveals the impact of a key decision or highlight a specific data point that raises an important question for discussion.\n\nBe open to all kinds of data \u2014 both quantitative and qualitative \u2014 and consider pairing multiple metrics to add dimension, or to answer questions before they arise.\n\nTo determine which additional metrics might be useful, ask yourself:\n\nWhat did we promise the board at our last meeting, and how can we represent whether we made good on that promise?\n\nWhat took up a lot of engineering time this quarter?\n\nFor example, were you making a big security push, focused on new features, or working through technical debt?\n\nWhat big changes or strategic decisions did we make this quarter?\n\nFor example, did you increase headcount, initiate a re-org, or change an aspect of your review process?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "What big changes or strategic decisions did we make this quarter?\n\nFor example, did you increase headcount, initiate a re-org, or change an aspect of your review process?\n\nYour answers will be different every quarter, and they won\u2019t always be noteworthy enough for the board.\n\nBut your line of questioning might also uncover something that is important to share and not already covered in the deck.\n\nFor example, let\u2019s say at last quarter\u2019s board meeting, you discussed implementing a support engineering rotation.\n\nThis quarter, you might want to show the board that it\u2019s having a positive impact on the team\u2019s ability to resolve customer issues.\n\nTo do that, you could report on the Issue Cycle Time of Escalations, which measures how long it takes for an escalation to be addressed once it\u2019s opened.\n\nThough highly specific, this software development metric would demonstrate the success of the support initiative."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "Though highly specific, this software development metric would demonstrate the success of the support initiative.\n\nPut Engineering Metrics in Conversation\n\nPutting metrics in conversation with each other can also help paint a more complete picture of what\u2019s happening on your team.\n\nFor example, it might be useful to share the engineering department\u2019s PR Throughput, coupled with incident data.\n\nEither one of these metrics would be useful in isolation, but taken alone, a high PR Throughput might raise the implicit question: is the engineering team sacrificing quality in order to keep deployment high?\n\nBy pairing PR Throughput with incident data, you\u2019d be able to demonstrate that the team isn\u2019t solely focused on deployments, they\u2019re also consistently delivering quality code.\n\nYou might also consider pairing metrics to demonstrate the impact of a strategic decision.\n\nLet\u2019s say you recently hired three new engineers."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "You might also consider pairing metrics to demonstrate the impact of a strategic decision.\n\nLet\u2019s say you recently hired three new engineers.\n\nYou might want to share PR Throughput, paired with Active Contributors, to illustrate the team\u2019s increasing output as the newly onboarded engineers begin to contribute more and more to the codebase.\n\nMost board meetings include a lot of anecdotal evidence from the engineering department.\n\nThe inclusion of objective metrics can help you show the board exactly what\u2019s happening on your team, so they can participate in the conversation more effectively, and offer up more useful guidance.\n\nMake Board Meetings Work for You\n\nThe goal of a board meeting is to provide vital context so that the board can do what it\u2019s there to do \u2014 offer advice and help with key strategic decisions.\n\nSubjective metrics and flawed measurements might feel like relevant updates, but they won\u2019t reveal enough actionable information about what\u2019s going on in your department."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-kpis-board-deck", "content": "Subjective metrics and flawed measurements might feel like relevant updates, but they won\u2019t reveal enough actionable information about what\u2019s going on in your department.\n\nThink about what you want to get out of the board meeting, and then choose the data that provides essential context for those conversations.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-leaders-business-language", "content": "Historically, engineering departments have been without reliable, objective metrics, leaving engineering leaders at a disadvantage in conversations with executives and board members.\n\nIt\u2019s part of the reason engineering is often viewed as a \u2018black box\u2019 \u2014 where departments like sales and marketing have clear numbers that demonstrate the efficacy of their processes, or their direct impact on the company\u2019s bottom line, engineering has been reliant on reporting progress in ways that often raise more questions than they answer.\n\nA list of features completed, for example, doesn\u2019t convey the amount of work that went into delivering each feature, and doesn\u2019t account for variations in difficulty or complexity.\n\nWhen a list is shorter one quarter, the immediate conclusion may not be that the features were more complicated, but that the engineering team is starting to fall behind.\n\nReporting on incidents is similarly flawed."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-leaders-business-language", "content": "Reporting on incidents is similarly flawed.\n\nThe frequency of incidents may increase when the engineering team is encouraged to pursue an ambitious product roadmap without being afforded the time to address technical debt.\n\nThese incidents may be seen as a reflection of subpar work by the engineering team, when in reality they\u2019re a result of poor planning and prioritization.\n\nTo communicate effectively with the rest of the business, engineering needs to speak the language of the rest of the business.\n\nTo do that, engineering leaders need objective metrics.\n\nObjective metrics translate across teams, individuals, and projects.\n\nThey provide a concrete basis for critical conversations about everything from resource allocation to strategic decisions.\n\nRather than simply asking stakeholders to trust your conclusions, you can use data to show them how you got there."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-leaders-business-language", "content": "Rather than simply asking stakeholders to trust your conclusions, you can use data to show them how you got there.\n\nFor example, you can make the case for increasing headcount by explaining that your current team isn\u2019t large enough to keep up with the proposed product roadmap, or you can look at a throughput metric like Deploy Volume and illustrate the engineering team\u2019s capacity with concrete numbers.\n\nOn the flip side, you can demonstrate the success of a recent hiring push and illustrate the effectiveness of your onboarding practices with a graph of your team\u2019s Cycle Time (a great proxy for engineering speed), demonstrating how quickly new hires are getting up to speed.\n\nTrust is important, but it\u2019s not enough.\n\nWhen you\u2019re advocating for your department \u2014 pushing for key resources, raising an issue, or celebrating a success \u2014 data will help you make a stronger case.\n\nOf course, metrics are not a replacement for experience, intuition, and expertise."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-leaders-business-language", "content": "Of course, metrics are not a replacement for experience, intuition, and expertise.\n\nAs the expert, it\u2019s still your job to put metrics in context, analyze them, and draw the right conclusions.\n\nWhen communicating with key stakeholders, you\u2019ll need to choose the metrics that matter most to the rest of your organization, and situate them within the larger story of your department.\n\nBook a call with one of our product specialists and find out how Code Climate Velocity can help you communicate more effectively with key stakeholders.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-metrics-are-business-metrics", "content": "According to a McKinsey study of over 400 large enterprises across 12 industries, companies with high-performance engineering teams best their competition in all areas, including revenue growth, customer satisfaction, and brand perception.\n\nThe evidence is so clear that the study itself is called, \u201cHow software excellence fuels business performance,\u201d and it concludes that software development is integral to business success in all industries \u2014 retail, financial services, manufacturing, and of course, software companies, all require a strong engineering department to succeed.\n\nYet, many executives view their engineering departments as a \u201cblack box.\u201d While other departments report on their success with metrics like revenue, customer retention rate, or cost of new customer acquisition, engineering metrics don\u2019t often make it into the board deck.\n\nBut engineering metrics are essential to understanding how your company is doing."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-metrics-are-business-metrics", "content": "But engineering metrics are essential to understanding how your company is doing.\n\nThey convey critical information about your company\u2019s ability to deliver value to your customers, and your company\u2019s potential for future success.\n\nPlus, engineering is expensive \u2014 it\u2019s important to know whether that\u2019s money well-spent.\n\nFor a holistic picture of how your engineering department \u2014 and your business \u2014 is doing, you need to start tracking engineering metrics.\n\nWhat\u2019s your Time to Market?\n\nTime to Market is a measurement of how quickly your organization can deliver on an idea.\n\nIt encompasses two phases of development: the design and planning done by the product and engineering teams, as well as the coding, testing, and implementation done by engineers.\n\nThe faster your organization can get a new product or feature to market, the faster it can start generating revenue for the business."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-metrics-are-business-metrics", "content": "The faster your organization can get a new product or feature to market, the faster it can start generating revenue for the business.\n\nA low Time to Market also makes it more likely that your organization will be able to out-innovate the competition and respond to customer feedback or changes in the marketplace.\n\nThe more competitive your industry, the more essential innovation is to your company\u2019s survival.\n\nTo understand your engineering department\u2019s contribution to Time To Market, look at their Cycle Time.\n\nCycle Time tracks engineering work from the moment it\u2019s started on a developer\u2019s computer, to the time it\u2019s shipped to customers.\n\nIt\u2019s the software development team\u2019s speedometer \u2014 by eliminating the variable design and planning component of Lead Time, Cycle Time acts as a reliable end-to-end measure of how long it takes the engineering team to deliver value to an end user."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-metrics-are-business-metrics", "content": "As your engineering department works towards a predictably low Cycle Time, they will also be increasing their output and efficiency, enabling your organization to innovate faster.\n\nUnderstanding Cycle Time can help you have more informed conversations about your engineering department\u2019s speed and capacity.\n\nYou\u2019ll have concrete information about how consistently and quickly features are shipping, which will make it easier to support engineering and communicate with technical leaders about how their department is doing.\n\nYou\u2019ll also be able to track the impact of certain key business decisions \u2014 like a hiring push or a reorg \u2014 on the team\u2019s ability to bring a product or feature to market.\n\nHow much product have you shipped?\n\nFor a more complete picture of your engineering department\u2019s impact, you\u2019ll also want to know how much the team is getting done.\n\nSpeed is important, but it doesn\u2019t paint a full picture \u2014 even teams with a low Cycle Time might be facing other obstacles to shipping product."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-metrics-are-business-metrics", "content": "Speed is important, but it doesn\u2019t paint a full picture \u2014 even teams with a low Cycle Time might be facing other obstacles to shipping product.\n\nTo get a better sense of the quantity of work being delivered to the end user, you may want to look at Deploy Volume, which is a count of the engineering team\u2019s distinct deploys over a period of time.\n\nIt can help quantify the engineering team\u2019s capacity at a given moment, and it\u2019s a powerful way to understand how much work engineering is getting done.\n\nDeploy Volume is a great starting point for informed conversations about strategic roadmaps and resource allocation.\n\nWhen your company\u2019s engineering department tracks and reports Deploy Volume, it can help you determine whether or not certain initiatives, like increased investment in the engineering department, are having a concrete impact on how much work is getting done."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-metrics-are-business-metrics", "content": "An Essential Component of Business Success\n\nWhether your product is software, or you employ software to add value for your customers, the success of your business depends on the success of its engineers.\n\nDon\u2019t let the engineering department be your blindspot.\n\nWith the right metrics, a CEO can gain critical visibility into development activities, gleaning valuable insights about the often inscrutable \u201cblack box\u201d of their company\u2019s engineering department.\n\nThose insights will allow you to make data-driven, strategic decisions, and steer your business into the future.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "To deliver maximum value within an organization, engineering teams must balance strategic, long-term vision with enough flexibility to react to unforeseen, yet inevitable, changes along the way.\n\nAn operational cadence \u2014 a scaffolding of benchmarks and meetings that provide structure for a team\u2019s activities \u2014 is one way successful teams stay focused on goals, improve performance, respond to changes, and communicate with other business units within their organizations.\n\nWe recently went in-depth on the subject in a virtual conversation between Code Climate Founder and CEO, Bryan Helmkamp, and Juan Pablo Buritic\u00e1, SVP of Engineering at Ritchie Bros.\n\nRead on for highlights and check out the on-demand recording here to see the full conversation.\n\nWhat is an operational cadence anyway?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "Juan Pablo kicked the conversation off by summarizing an operational cadence as a collection of meetings, ceremonies, or regular communications that \u201chelp create a rhythm for an organization on which to operate, on which to become predictable and do things better.\u201d\n\nBryan quickly agreed, \u201cI think about operational cadences as really being almost like an operating system\u2026 [a cadence is] a set of interlocking practices, some of them might be daily, weekly, monthly, quarterly, annually\u2026together these give the organization the ability to have a shared understanding of what\u2019s happening.\u201d He elaborated that in addition to creating a predictable schedule, operational cadences allow organizations \u201cto have a shared language to talk about, \u2018this is what we do each month and this is what that means,\u2019 without having to explain it from scratch every time.\u201d\n\nFostering alignment, predictability, observability, and autonomy\n\nWith the structure and high level benefits of an operational cadence introduced, the conversation turned to the specific value that observing this cadence delivers to engineering teams and their organizations."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "Bryan zeroed in on one crucial benefit, alignment, and the ripple effect that ensues once alignment is achieved: \u201cWith an established cadence, you have the opportunity to increase alignment.\n\nAnd alignment is\u2026 a huge factor into how much impact a given effort\u2019s going to have.\u201d\n\nHe elaborated on the importance of this alignment, \u201cParts of a cadence can serve as a way to identify issues earlier.\n\nBecause if you have an issue and it doesn\u2019t get surfaced until it\u2019s been going on for months, the cost associated with that and the waste associated with that can be quite significant."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "Because if you have an issue and it doesn\u2019t get surfaced until it\u2019s been going on for months, the cost associated with that and the waste associated with that can be quite significant.\n\nBy having a regular cadence and set of interlocking processes, you get this backstop at a minimum that makes sure that if there\u2019s an alignment issue, if there\u2019s a change in context that requires a change in priorities, that it\u2019s going to get surfaced and be able to be addressed with appropriate visibility and appropriate collaboration and stakeholders.\u201d\n\nJuan Pablo added his own perspective, \u201cI\u2019d distill the value to three things.\n\nWhen I was in startups, the principal value I got was predictability.\n\nI didn\u2019t like running a team where the strategy was changing every week.\n\nBy pushing strategic reviews into a monthly cadence or a little bit of a longer stretch, we got air cover to work, and we also got the leadership group some checkpoints.\n\nNext, observability."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "By pushing strategic reviews into a monthly cadence or a little bit of a longer stretch, we got air cover to work, and we also got the leadership group some checkpoints.\n\nNext, observability.\n\nIf it is a larger organization, if it\u2019s grown past 40, 50, 60 engineers, it\u2019s hard to know \u2014 and you shouldn\u2019t be looking to know \u2014 what everyone is doing, but rather trying to observe the system or monitor the system from outside\u2026And then the last thing is autonomy.\n\nIf you have predictability and observability, then teams can be autonomous\u2026 to not have a ton of oversight, but there\u2019s still this broadcast of information that is flowing.\u201d\n\nIdentifying the optimal cadence\n\nAs the conversation progressed, Bryan and Juan Pablo transitioned from the abstract to a more detailed discussion of how and when to implement an organizational cadence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "One thing was immediately apparent \u2014 there is no universal \u201coptimal cadence.\u201d With variables such as size, structure, goals, and more affecting each business differently, teams must identify what works best for their unique situation.\n\nJuan Pablo shared his personal preference, \u201cI generally like\u2026 having some weekly ceremonies, some biweekly ceremonies, monthly, quarterly, and then either every six months or a year.\u201d He emphasized that this varies by organization however, \u201cdepending on your stage, if you\u2019re trying to move really, really quickly, doing quarterly or yearly planning doesn\u2019t really make sense.\u201d\n\nBryan expanded on Juan Pablo\u2019s assessment, \u201cI 100% agree that there\u2019s no single right answer."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "There might be a this-is-best-for-us-right-now answer that everybody can work towards, and it\u2019s a moving target.\u201d He then encouraged people to think about their own organizational rhythms that may be on a longer timeline than a weekly sprint, suggesting that teams supplement their sprints with sessions on a monthly, or even quarterly basis, which \u201ccan be very helpful both in terms of the planning side of things, to give people more information about what to expect\u2026 and also for the standpoint of that continuous improvement process.\u201d\n\nBryan then compared the benefits of a strategic organizational cadence against the commonly-used retrospective, \u201cI think retrospectives are fantastic tools, but they tend to gravitate towards small incremental improvements.\u201d He then clarified, \u201cThey don\u2019t naturally serve as well to press the really big questions\u2026 when you have 45 minutes to try to make some improvements for the next week."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "And I think what we\u2019ve seen is there\u2019s a benefit to being able to ask bigger questions and to think about bigger time horizons as a supplement to whatever\u2019s working well for you at the tactical execution level.\u201d\n\nBorrowing cross-functional best practices\n\nAs the conversation touched on the strategies and practices Juan Pablo and Bryan\u2019s own organizations employ, Bryan relayed several things that he has picked up from watching non-engineering departments within Code Climate.\n\nIn particular, his sales team caught his attention, \u201cSome of the things that they do that I think have a really interesting opportunity for helping on the engineering side as well, are things like internal QBRs, or Quarterly Business Reviews.\n\nThey\u2019re not really running team-level weekly retrospectives, but each quarter they pull out, \u2018What were all of our successes and opportunities for improvement that we learned over the past quarter."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "They\u2019re not really running team-level weekly retrospectives, but each quarter they pull out, \u2018What were all of our successes and opportunities for improvement that we learned over the past quarter.\n\nWhat are our key focus areas going forward for next quarter?\u2019 Maybe there are new ways we\u2019re going to do things or there\u2019s new content that we\u2019re going to introduce into our sales process, and that\u2019s at the quarterly level.\u201d\n\nJuan Pablo responded to Bryan\u2019s point about QBRs with a practice he has put into place, \u201cThe QBR is a written exercise."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "So all engineering groups report on their business metrics because that helps engineers understand what levers they have\u2026 it starts giving insight to other people about how things are working, how they\u2019re being impactful or not, and how to be a little bit more business-oriented.\u201d\n\nBryan tied their ideas on the topic together, \u201cTwo elements of that that I think are really powerful: One is that shift from verbal communication or informal communication to written and structured communication.\n\nAnd that\u2019s something that as organizations get larger, I think becomes more and more important."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "And that\u2019s something that as organizations get larger, I think becomes more and more important.\n\nAnd you just hit this tipping point where if it\u2019s not written down, then this is not going to work.\u201d\n\nHe continued on, \u201cBut with respect to sort of data and metrics, part of what I\u2019m hearing in there is that there\u2019s advantage to using regular operating cadences as an opportunity to push information out to the collaborators and to those other stakeholders who would benefit from having that same understanding of what\u2019s going on.\n\nAnd I think that that\u2019s an area where every department can always be improving, but engineering in some ways has been a little bit further behind than some of the other functional areas in organizations.\u201d\n\nMetrics as a shared language\n\nWith the conversation pivoting to the idea of using metrics as a shared language to ensure cross-functional alignment, Juan Pablo relayed a fitting anecdote."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "When a former boss approached him to ask why their team was operating slowly, he was initially unable to answer the question.\n\nHowever, after a few months of digging into the metrics, \u201cI was able to talk a lot more about Cycle Time and throughput, and not only talk about it, but visualize it.\n\nI started\u2026 to understand how to distill all of that to the board of directors who shouldn\u2019t really know that much about capabilities or many of the underlying reasons for these metrics, but every board meeting I could show, \u2018This is how far we are."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "Here\u2019s an industry comparison, what a high performing engineering organization is\u2026 how far we are, and the impact we\u2019ve had.\u201d\n\nWith Juan Pablo\u2019s board and team aligned on metrics and strategy, the results followed shortly after, \u201cTwo or three quarters after we had started our acceleration strategy, you could clearly see the reduction of Cycle Time\u2026 In the period of 18 months, we reduced it by 10 times because we had visibility, and I could explain it and continue to track it with the executive team and with the board, but also I was able to give concrete direction to the engineering group.\u201d\n\nBalancing proactive planning with reactive needs\n\nIn a perfect world, organizations would identify their optimal cadence, align business units and goals based on universally understood metrics, and proactively address anything looming on the horizon.\n\nUnfortunately, real life gets more complicated and situations arise that teams are forced to address reactively."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "Unfortunately, real life gets more complicated and situations arise that teams are forced to address reactively.\n\nJuan Pablo discussed how he manages this reality, \u201cI\u2019ve learned that once I\u2019ve moved to a certain level of direction, I can\u2019t be prescriptive on how we achieve our goals.\n\nWhere I need to focus is on drawing the line and ensuring that our product strategy and our business strategy is solid\u2026 Product engineering needs to find ways to achieve those outcomes."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "Because then the agility is really only on how they are getting it.\u201d\n\nBryan distilled his thoughts on the balance succinctly, \u201cThere\u2019s a value in being proactively reactive.\u201d He elaborated with an example, \u201cI\u2019m thinking about how there\u2019s this tension between, for example, roadmap feature work and things that might come up from incidents, escalations, or customer requests\u2026 I think that\u2019s the first piece, to plan for the fact that some of the work is going to need to be reactive and you\u2019re not going to know what it is until it comes along, but you know that something is going to come along.\u201d\n\nImplementing and optimizing an organizational cadence\n\nTo close out the conversation, Bryan and Juan Pablo turned to the practical matter of who should be responsible for deciding upon and implementing an organization\u2019s cadence, and how to do so."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "Juan Pablo laid out his perspective that while cadence should be coordinated with the executive group to ensure company-wide alignment, it \u201cshould be sponsored by the leaders who have ownership over it.\n\nI think engineering managers can only get as far as their own group, some of their peers groups, product, or other functions that they work in, but they\u2019re going to have zero influence on strategic executive planning or other things.\u201d\n\nBryan added, \u201cI would say don\u2019t make perfect the enemy of good.\n\nGet started with understanding that you\u2019re going to iterate the cadence itself.\n\nEverything\u2019s going to be iterated.\n\nAnd I agree 100% with what Juan Pablo said, that leaders do need to lead, and this is an area where leadership is really important.\u201d\n\nUsing data to drive engineering success beyond the sprint\n\nSuccessful engineering teams can leverage data in tandem with an organizational cadence to stay aligned and perform at their highest level."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/engineering-success-beyond-the-sprint", "content": "To learn more, watch the full webinar or speak to a product specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "When building a high-performance engineering organization, it\u2019s not enough to hire top talent \u2014 leaders must also create an environment that\u2019s conducive to productivity.\n\nEven the most skilled developers will be hamstrung by ineffective processes and other bottlenecks that stand in the way of deploying code.\n\nThat doesn\u2019t mean it\u2019s easy to identify the blockers that are slowing down your team.\n\nWhen code is making it through to production, it\u2019s easy to assume that your processes are functioning.\n\nLeaders often lack the visibility to pinpoint bottlenecks, and developers may be reluctant to raise their hands and voice concerns, particularly if their concerns are based on gut feel.\n\nTo effectively remove blockers and boost engineering productivity, you need data.\n\nWith the right information, you\u2019ll be able to enhance visibility and supplement gut feel, making it possible to quickly spot bottlenecks in your software development pipeline and empower developers to collaborate on effective solutions."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "How to Use Data to Identify Bottlenecks in Your Processes\n\nUsed thoughtfully, data is a critical tool for identifying and refining broken processes, as well as optimizing processes that are functional, but could be even more efficient.\n\nWith the right data, you can:\n\nCheck your assumptions.\n\nData can provide the objective evidence necessary to challenge your assumptions about what should be working.\n\nWhen confronted with concrete numbers, you may find that certain \u2018best practices\u2019 are not practical for your team, or processes that seem logical on paper may not hold up in practice.\n\nFor example, though Code Review can be a critical way to vet code and share knowledge across your team, there\u2019s no one-size-fits all solution for keeping code moving quickly through the review process.\n\nWith an objective look at the way PRs move through review, you\u2019ll be able to refine your process and find the one that works best for your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "With an objective look at the way PRs move through review, you\u2019ll be able to refine your process and find the one that works best for your team.\n\nVelocity\u2019s Code Review Report provides a visual summary of the way PRs move through your review process.\n\nFor example, some globally distributed teams prefer to allow low-impact changes to bypass the review process entirely, rather than waiting around to be approved by teammates in different timezones.\n\nOne Code Climate customer dealt with a Code Review bottleneck by letting pair-programmed PRs skip review \u2014 these PRs are already well-vetted, because they\u2019ve been worked over by two developers.\n\nThis change, among others, helped the customer decrease their Cycle Time by 35% within 10 months of implementing Velocity and becoming a data-driven engineering organization.\n\nLook at change over time.\n\nData makes it possible to compare your current progress to past trends."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "Look at change over time.\n\nData makes it possible to compare your current progress to past trends.\n\nNot only will you be able to tell if your team is, in fact, moving more slowly, you\u2019ll have the information you need to investigate each phase of development and identify the source of the slowdown.\n\nA team in the midst of a transition, like a hiring push or a switch to remote work, might find this kind of comparison to be particularly useful.\n\nLooking at key metrics before and after a big change can make it easier to identify which parts of the process are most impacted by the change and therefore most in need of attention.\n\nVelocity can help you visualize trends in the way your team is working.\n\nLa Haus started using Velocity to investigate a general feeling that their newly-remote engineering team was moving slowly.\n\nAs Co-Founder and CTO Santiago Garc\u00eda explains, \u201cyou can\u2019t make decisions with a feeling.\u201d You can, however, guide decisions with concrete data."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "As Co-Founder and CTO Santiago Garc\u00eda explains, \u201cyou can\u2019t make decisions with a feeling.\u201d You can, however, guide decisions with concrete data.\n\nGarc\u00eda was able to use Velocity to identify exactly which metrics were trending in the wrong direction, design improved processes to address those concerns, and then measure their success.\n\nImproving inefficient processes more than doubled the team\u2019s engineering speed, and La Haus\u2019s engineers were able to cut their Cycle Time from 72 to 30 hours.\n\nFind opportunities for improvement upstream.\n\nData allows you to measure and track the impact of small adjustments, some of which may have a big impact on overall productivity and efficiency.\n\nA team that\u2019s struggling to keep code moving through Code Review could focus on refining their review process, but should first take a look at some key metrics earlier on in their pipeline.\n\nThe true source of the bottleneck might not be the review process at all, but something else entirely."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "The true source of the bottleneck might not be the review process at all, but something else entirely.\n\nIdentify these impactful, early-process issues by looking at metrics like Time to Open and PR Size.\n\nTime to Open can help you spot developers who are taking a long time to open a PR, which could be a sign of anything from unclear technical direction, to a lack of time to work in the codebase.\n\nA large PR Size may signal a tendency to open large Pull Requests, which can get stuck in even the most efficient development workflow.\n\nIdentify and scale effective processes.\n\nData can make it easier to spot high-performing teams in your organization and determine the reasons for their success.\n\nIf you look at key metrics for specific parts of the development pipeline, you\u2019ll be able to see where your best teams are at their strongest."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "If you look at key metrics for specific parts of the development pipeline, you\u2019ll be able to see where your best teams are at their strongest.\n\nFrom there, you can borrow their most effective practices and adapt them for other engineering teams, making it possible for your teams to learn from each other and contribute to the success of the entire department.\n\nVelocity can help you see where each team excels in relation to the rest of your organization.\n\nRoger Deetz used this strategy successfully at Springbuk.\n\nWhen he joined the company as VP of Engineering, he used Velocity to identify and replicate the practices of the most effective teams, ultimately boosting PR throughput by 64%.\n\n\u201cMeasurement helped us find focus.\n\nWe saw what agile practices were working and shared them across teams.\u201d\n\nHelp individual engineers get unstuck.\n\nData enables a granularity and immediacy that isn\u2019t possible through stand ups and sporadic check-ins."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "Data enables a granularity and immediacy that isn\u2019t possible through stand ups and sporadic check-ins.\n\nWith the proper tools, you can quickly surface at-risk work and step in with the appropriate support before it becomes a true bottleneck.\n\nFor example, with Code Climate Velocity you can spot a developer who is churning, or one with a long-running PR, and help them get moving again, perhaps by clearing up a confusion with the codebase, or removing a roadblock caused by a third party.\n\nUse the Pull Requests report to view at-risk PRs that might derail your sprint.\n\nRemove Blockers By Empowering Developers\n\nThe most successful engineering leaders will involve their team members in the process of spotting and removing bottlenecks.\n\nAt the most basic level, you\u2019ll need to involve your team members to contextualize quantitative information."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "At the most basic level, you\u2019ll need to involve your team members to contextualize quantitative information.\n\nData is not diagnostic, and though it can point you in the right direction, it\u2019s impossible to know exactly what is happening without talking to your team members.\n\nYour team members will be even more invested if you give them the opportunity to propose process improvements and take ownership of their implementation.\n\nThis collaborative approach ensures that developers understand why certain changes are being made, that they\u2019re on board with new processes from the start, and that they have a vested interest in sticking with them.\n\nAs you and your team members work together to remove blockers and optimize processes, each improvement will motivate further improvements."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "As you and your team members work together to remove blockers and optimize processes, each improvement will motivate further improvements.\n\nYou\u2019ll set a critical engineering flywheel in motion, setting off the Virtuous Circle of Software Delivery, in which developers reap the benefits of improved processes and are motivated to keep seeking opportunities for continued growth and success.\n\nWith fewer blockers standing in their way, developers will be happier, more productive, and more likely to excel \u2014 and you\u2019ll be one step closer to building a high-performance team.\n\nTo find out how Code Climate Velocity can provide the data you need to remove bottlenecks from your engineering pipeline, reach out to one of our product specialists.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-identify-bottlenecks-engineering", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-unblock-engineers-and-boost-engineering-productivity", "content": "One of the first and most essential uses of Velocity is to cut through the noise and help managers identify the signals of stuck engineers.\n\nThis enables management to eliminate unnecessary check-ins, while still having the ability to unblock engineers and boost engineering productivity by stepping in to help an engineer who might hesitate to raise their hand.\n\nVelocity provides visibility into:\n\nWho on your team is blocked\n\nWhose work has been churning\n\nLook out for four main behavioral patterns in Velocity to help address these concerns.\n\nEngineers Who Haven\u2019t Committed for a Long Time\n\nA quick scan of the Activity tab will help you identify developers who aren\u2019t checking in code.\n\nHead into the Team360 report, select the Activity tab, and look for team members with few or no commits, represented as purple circles.\n\nIn the example above, Hecate hasn\u2019t committed in a couple of days."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-unblock-engineers-and-boost-engineering-productivity", "content": "In the example above, Hecate hasn\u2019t committed in a couple of days.\n\nThis could indicate that she is:\n\nWorking on a large chunk of work locally\n\nStuck for whatever reason\n\nTied up in non-engineering related projects\n\nIf you see a similar work pattern in your team\u2019s Activity Log, you might want to check in to identify the bottleneck and help your developer get back on track.\n\nEngineers Who Are Committing but Churning\n\nAny developers who are committing, but not opening PRs, might be churning.\n\nOnce again, go to the Activity tab in the Team360 report to see which engineers\u2019 work appears to be blocked.\n\nAs noted in the key, Commits and Merged Commits are indicated by dark and light purple circles respectively and open PRs by light blue diamonds.\n\nYou\u2019ll want to look out for clusters with a high count of circles and a missing count of diamonds.\n\nAs you can see in the top row, Donalbain has been consistently committing code, but not opening any PRs."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-unblock-engineers-and-boost-engineering-productivity", "content": "As you can see in the top row, Donalbain has been consistently committing code, but not opening any PRs.\n\nThis could be because he is:\n\nCommitting a lot then planning to open one big PR (which isn\u2019t ideal)\n\nCommitting something, then redoing the work he just did for some reason\n\nCommitting something, then heading off in a different direction and starting a new track of work\n\nTake this opportunity to dive in and identify the issue.\n\nEngineers Who Have Long-running PRs\n\nLong-running PRs may indicate that an engineer is stuck on that particular unit of work, or that they\u2019re multi-tasking, causing delays for multiple PRs.\n\nInvestigate all open and active PRs in the Pull Requests report.\n\n(Note that if you look at this report in the morning, it might look bare, since it automatically shows \u201ctoday\u2019s\u201d activity.\n\nIn this case, use the date picker to extend to yesterday, or the past two days to see what\u2019s in progress).\n\nTo surface the oldest PRs, sort by age by clicking on the \u201cAGE\u201d header."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-unblock-engineers-and-boost-engineering-productivity", "content": "In this case, use the date picker to extend to yesterday, or the past two days to see what\u2019s in progress).\n\nTo surface the oldest PRs, sort by age by clicking on the \u201cAGE\u201d header.\n\nPay close attention to anything that\u2019s been open for over 72 hours.\n\nA PR might be long-running because:\n\nAn engineer is having trouble with this PR and keeps adding on commits.\n\nIt\u2019s unclear whether this PR is done.\n\nAn engineer\u2019s PR hasn\u2019t been picked up for review, either because it was overlooked or because it\u2019s perceived as complex.\n\nAn engineer is blocked on another third party.\n\nEngineers Whose Work is Stuck in the Review Process\n\nFinally, the Analytics tab is a good place to go to identify late-stage churn.\n\nYou\u2019ll want to run a query for Review Cycles, or the number of times a Pull Request has gone back and forth between the author and reviewer.\n\nTo obtain this report, select Review Cycles as your metric, and group by contributor."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-unblock-engineers-and-boost-engineering-productivity", "content": "To obtain this report, select Review Cycles as your metric, and group by contributor.\n\nRun a query for the last week or two, and scroll to the bottom until you see the following bar graph visualization:\n\nWhen Review Cycles are high, it may indicate:\n\nThere are differing opinions about what \u201cdone\u201d means.\n\nThere\u2019s misalignment around what kind of changes are expected to come out of the review process.\n\nThere are conflicting ideas about how a solution should be implemented.\n\nBoost Your Own Engineering Productivity with Data\n\nWith the right data, you can identify which of your team members are stuck right now, so you can help remove the roadblock and get things moving again.\n\nIf you want to boost engineering productivity, but don\u2019t have a way to track and analyze your engineering metrics, reach out to find out more about our engineering analytics platform, Velocity.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/how-to-unblock-engineers-and-boost-engineering-productivity", "content": "Subscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/introducing-the-engineering-leaders-guide-to-data-driven-leadership", "content": "Engineering metrics can be a powerful tool for tracking and communicating engineering progress, debugging processes, boosting team performance, and much more \u2013 but they must be wielded with care.\n\nWhen misused, metrics can backfire, creating confusion and resentment.\n\nTo help engineering leaders successfully leverage metrics, Code Climate has partnered with\u00a0 LeadDev on a series of blog posts and webinars that explore the fundamentals of data-driven leadership.\n\nDrawing on the expertise of engineering leaders from a range of industries, we highlight real-world perspectives on the what, why, and how of measuring as an engineering leader.\n\nWe touch on everything from selecting the best metrics to track for your organization, to introducing metrics successfully, and specific use cases, like using metrics to run more impactful standups.\n\nHere are some key insights:\n\n\u201cI\u2019ve found that metrics are valuable in helping zero in on what might be getting in the team\u2019s way."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/introducing-the-engineering-leaders-guide-to-data-driven-leadership", "content": "Here are some key insights:\n\n\u201cI\u2019ve found that metrics are valuable in helping zero in on what might be getting in the team\u2019s way.\n\nInstead of treating them as a way to judge performance, I believe metrics are most useful in bringing to light areas of opportunity.\u201d Leslie Cohn-Wein, Engineering Manager, Netlify\n\n\u201cFirst and foremost, I use metrics to help me identify what the biggest bottlenecks are across different teams.\n\nWithout metrics, I\u2019d be left to make this judgment based on hearsay instead of methodology.\n\nThe second reason I use metrics is to understand changes over time, particularly as we undergo organizational changes or make investments in specific areas.\u201d Abi Noda, Developer Experience Expert\n\n\u201cCycle Time is a metric that I consistently come back to \u2014 it\u2019s a great proxy for engineering speed, and can be a useful high-level look at whether certain key decisions are having the desired impact."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/introducing-the-engineering-leaders-guide-to-data-driven-leadership", "content": "If we\u2019re moving slower than we had been, I can then isolate parts of the engineering pipeline and investigate where exactly things are going off track.\u201d James McGill, VP of Engineering, Code Climate\n\n\u201cThe outcomes of productive standups ripple throughout the engineering team.\n\nBy discussing specific metrics in standups, you can tell if your team is moving forward.\n\nYou can ensure that the risks are being addressed from an objective, quantifiable standpoint rather than opinion.\u201d Khan Smith, VP of Product, Code Climate\n\nTo dig deeper into what engineering leaders are doing today with metrics, check out the full series.\n\nReady to get started with engineering metrics in your organization?\n\nContact our product specialists.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/introducing-the-engineering-leaders-guide-to-data-driven-leadership", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/metrics-manage-large-team", "content": "The more engineers on your team, the harder it is to gain visibility.\n\nIf you\u2019re managing four people or more, you\u2019re probably asking questions like:\n\nHow do I supervise the work of all of these engineers?\n\nHow do I make sure I\u2019m adding value where needed?\n\nYou can leverage Velocity to address both of these concerns.\n\nGet Immediate Visibility into Your Engineers\u2019 Work\n\nA quick scan of the Activity tab in the Team360 report will give you a sense of both what your team is working on right now and their general work habits.\n\nHover over a purple circle to see your team\u2019s commits and understand what they\u2019re working on without having to tap them on the shoulder.\n\nLook for:\n\nDevelopers who haven\u2019t committed code for a few days.\n\nThey might be bottlenecked, especially if they\u2019re new to the team.\n\nDevelopers whose commits don\u2019t match your expectations for what the team is working on.\n\nBig commits and PRs (visualized by the largest shapes on the graph)."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/metrics-manage-large-team", "content": "Developers whose commits don\u2019t match your expectations for what the team is working on.\n\nBig commits and PRs (visualized by the largest shapes on the graph).\n\nWork that is distributed in a way that doesn\u2019t match your expectations.\n\nUse this concrete data as a jumping-off point for in-depth conversations with your team.\n\nIdentify High-Risk Pull Requests\n\nUse the Pull Requests report to see PRs that may warrant your attention.\n\nMost managers start by looking for open, high activity PRs.\n\nActivity is defined as PRs that are getting either a lot of commits or a lot of comments.\n\nTo surface the oldest PRs, sort by age by clicking on the \u201cAGE\u201d header.\n\nPay close attention to anything that\u2019s been open for over 72 hours.\n\nYou might want to talk to someone like Harry Potter to see if there\u2019s anything you can do to unblock him."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/metrics-manage-large-team", "content": "Pay close attention to anything that\u2019s been open for over 72 hours.\n\nYou might want to talk to someone like Harry Potter to see if there\u2019s anything you can do to unblock him.\n\nUnderstand Which Developers Might Need Help\n\nThere are a number of metrics that can help you find stuck engineers:\n\nWeekly Coding Days represents engineering capacity, or how much time per week developers are able to spend actually coding.\n\nWhen this metric dips, it\u2019s an indicator that a team member might be (1) working in large chunks or (2) stuck on a feature or bug.\n\nPR Throughput & PRs Reviewed are output metrics.\n\nIf these look unexpectedly low, it might be worth a quick conversation to understand what\u2019s going on.\n\nReview Cycles & Rework are both proxies for churn.\n\nReview Cycles represent the number of times a Pull Request has gone back and forth between the author and reviewer."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/metrics-manage-large-team", "content": "Review Cycles & Rework are both proxies for churn.\n\nReview Cycles represent the number of times a Pull Request has gone back and forth between the author and reviewer.\n\nRework is the percentage of lines of code that have been rewritten by the same developer within 3 weeks and is helpful for identifying churn earlier on in the development cycle.\n\nCompare these metrics by team or by person in the Compare report to identify who is stuck.\n\nDive Deeper into Churn Metrics\n\nHigh Review Cycles and high Rework represent waste in the development process and are therefore a great place to start optimizing.\n\nA developer with high Review Cycles has been asked to go back and fix things in their PRs multiple times.\n\nIf you see someone with higher than expected Review Cycles, you can investigate further by going into the Analytics tab.\n\nRun a query for Review Cycles, grouped by contributor over the last week or two."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/metrics-manage-large-team", "content": "If you see someone with higher than expected Review Cycles, you can investigate further by going into the Analytics tab.\n\nRun a query for Review Cycles, grouped by contributor over the last week or two.\n\nScroll to the bottom until you see the following bar graph visualization:\n\nTo understand what\u2019s blocking specific engineers, like Hecate, you can click the arrow next to her Review Cycle count to drill down into specific PRs.\n\nSort the number of Review Cycles from high to low and look through the ones that have been open the longest.\n\nAnything above 1.5 Review Cycles may indicate a problem.\n\nIn this case, the top two open PRs with 4 Review Cycles is a good place to start.\n\nYou can run this same process for Rework, which is another indicator of churn, but at the coding level.\n\nNote that the top quartile of engineering organizations keep their Rework to less than 4%."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/metrics-manage-large-team", "content": "You can run this same process for Rework, which is another indicator of churn, but at the coding level.\n\nNote that the top quartile of engineering organizations keep their Rework to less than 4%.\n\nUse Metrics to Enhance Visibility\n\nThough metrics can\u2019t tell managers everything they need to know, they can be a valuable tool for gaining insight into the work that\u2019s happening on your team.\n\nWith data like that found in Velocity, you can spot stuck work before it becomes a bottleneck, and make sure your team\u2019s processes are effective.\n\nIf you\u2019re not already using Velocity, speak to one of our specialists and find out how you can get a more complete picture of the work being done on your team.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/metrics-manage-large-team", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "Engineering managers often rely on subjective clues to assess how their team is doing.\n\nBut decisions made based on gut feel and imperfect measurements are less than ideal \u2014 sometimes they result in team success; other times they result in disappointment.\n\nSubjective measures need to be supplemented with objective data; with a combination of the two, managers are more likely to make choices that benefit their teams.\n\nWhen baseball managers learned this lesson, it got the Hollywood treatment.\n\nMoneyball depicted the metrics-first approach to baseball management popularized by Billy Beane, former General Manager of the Oakland A\u2019s.\n\nEmploying three lessons from Beane\u2019s management approach can help engineering leaders drive productivity and efficiency on their teams.\n\nLesson #1: Use objective metrics\n\nBeane gained notoriety for prioritizing statistics over scouts\u2019 instincts and consistency over flash."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "Lesson #1: Use objective metrics\n\nBeane gained notoriety for prioritizing statistics over scouts\u2019 instincts and consistency over flash.\n\nThis approach is rooted in sabermetrics \u2014 the field dedicated to \u201cthe search for objective knowledge about baseball\u201d and statistical analysis of the sport.\n\nThough sabermetrics was founded by baseball fans, Beane applied this predilection for objectivity to managing his team.\n\nRather than relying on scouts\u2019 instincts, intangibles like a player\u2019s footwork, or prestigious metrics like batting average, Beane favored a selection of under-appreciated metrics more closely correlated with consistent results.\n\nHistorically, software development has been a field lacking in objective measurements.\n\nClassic workload estimates like T-shirt sizes can be useful for internal scoping but are too subjective to translate throughout an org; one team\u2019s size \u201cXL\u201d project is another team\u2019s \u201cMedium.\u201d\n\nEngineering leaders need objective measurements."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "Our version of sabermetrics involves analyzing the data generated by our own VCS, which is full of objective data about the number of Commits logged in a given period, or the length of time a Pull Request stays open before it\u2019s picked up for review.\n\nObjective measurements can help engineering leaders measure progress across teams, projects, and quarters, and are instrumental in setting and achieving effective departmental goals.\n\nLesson #2: Focus on leading indicators\n\nOf course, not all objective data is equally useful; one of the hallmarks of Beane\u2019s strategy involved the careful selection of metrics.\n\nWhen recruiting, most managers looked at a player\u2019s batting average \u2014 the number of times they hit a ball into fair territory and successfully reached first base, divided by their number of at-bats.\n\nBeane looked at their on-base percentage, or OBP, a measure of how often a batter reaches first base, even if they get there without actually hitting the ball."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "Beane looked at their on-base percentage, or OBP, a measure of how often a batter reaches first base, even if they get there without actually hitting the ball.\n\nA player must be a good hitter to have a good batting average, but what puts them in a position to score a run is getting to first base.\n\nFrom a data-first perspective, the value of an at-bat is not in the hit itself but in the player\u2019s two feet making it safely to first.\n\nSimilarly, to the rest of the organization, your team may be defined by their most eye-catching stats and praised when they deploy a much-anticipated revenue-generating feature.\n\nBut just as a player\u2019s batting average doesn\u2019t account for every time they get on base, a list of features completed can only reveal so much about your team\u2019s productivity.\n\nThe true measure of your team\u2019s success will be their ability to deliver value in a predictable, reliable manner."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "The true measure of your team\u2019s success will be their ability to deliver value in a predictable, reliable manner.\n\nTo track that, you\u2019ll need to look past success metrics and dig into health metrics, measurements that can help you assess your team\u2019s progress earlier in the process.\n\nFor example, an engineering manager might look at \u201cTime to Open,\u201d which is a measure of the period between when a developer first logs a Commit in a Pull Request and when that Pull Request is finally opened.\n\nCode can\u2019t move through your development pipeline until a Pull Request is opened, and smaller Pull Requests will move through your pipeline more quickly.\n\nTime to Open is similar to OBP.\n\nIt\u2019s not a prestigious metric, but it\u2019s a critical one.\n\nJust as you can\u2019t score if you don\u2019t get on base, your team can\u2019t deploy code that never makes it to a Pull Request.\n\nAs a manager, you need to make sure that developers are opening small, frequent Pull Requests."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "As a manager, you need to make sure that developers are opening small, frequent Pull Requests.\n\nIf they\u2019re not, it may be worth reinforcing good code hygiene practices across your team and speaking directly with developers to determine whether there\u2019s something particular that\u2019s tripping them up in the codebase.\n\nLesson #3: Use Metrics in Context\n\nOf course, Beane\u2019s approach wasn\u2019t perfect.\n\nMetrics alone can\u2019t tell you everything you need to know about a potential player, nor do they hold all of the answers when it comes to engineering.\n\nData is useful, but leaning too strongly on one metric is shortsighted.\n\nThough Beane was famous for seeing the value in a player\u2019s OBP, there\u2019s also evidence that at times, he relied too heavily on that one metric.\n\nNot every college player with a strong OBP was cut out to play professional baseball.\n\nWhile a scout might be able to differentiate between a promising young athlete and one who was unlikely to succeed, a metric can\u2019t make that distinction."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "While a scout might be able to differentiate between a promising young athlete and one who was unlikely to succeed, a metric can\u2019t make that distinction.\n\nAs an engineering leader, you need to rely on a combination of instinct and data.\n\nStart with how you feel \u2014 is your engineering team moving slow?\n\n\u2014 and then use metrics to confirm or challenge your assumptions.\n\nWhen something is surprising, consider it a signal that you need to investigate further.\n\nYou might need to re-evaluate a broken process or find new ways to communicate within your team.\n\nBeane\u2019s approach to managing his team was headline-grabbing because it was revolutionary, representing a major shift in the way fans, commentators, and managers thought about the sport of baseball.\n\nMany of his groundbreaking strategies are now commonplace, having been adopted across the league.\n\nData-informed engineering leadership is still at that revolutionary stage."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/moneyball-engineering-metrics", "content": "Many of his groundbreaking strategies are now commonplace, having been adopted across the league.\n\nData-informed engineering leadership is still at that revolutionary stage.\n\nIt\u2019s not standard practice to use objective engineering metrics to assess your team\u2019s progress or guide its strategy, but it will be.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "This post is the second article in our Tactical Guide to a Shorter Cycle Time five-part series.\n\nRead the previous post\u00a0here.\n\nYou discover your engineering team has a long Cycle Time compared to the rest of the organization or compared to the industry\u2019s top performers.\n\nNow what?\n\nWhen we ran an analysis on 19k+ contributors\u2019 data, we uncovered that of all the identified key drivers, a low Time to Open (time between the earliest commit in a pull request and when the pull request is opened) had the highest correlation to a short\u00a0Cycle Time.\n\nThe\u00a0correlation coefficient\u00a0chart above illustrates that Time to Open has the highest impact on overall Cycle Time of all analyzed drivers.\n\nSince Time to Open is a component of Cycle Time, it\u2019s natural to expect some correlation.\n\nWhat\u2019s remarkable, however, is that work practices that take place before a pull request is opened have a higher impact on Cycle Time than those that take place after (including the Code Review process)."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "This data supports the most important principle of Continuous Delivery: keeping batch sizes small has significant positive downstream effects.\n\nBy virtue of being small and discreet, each change will easily move through each phase of the software delivery process:\n\nReview\u00a0will happen sooner because reviewers perceive the work to be less challenging and time-consuming to review.\n\nApproval\u00a0will happen sooner because there will be fewer back-and-forths and the revisions will be less substantial.\n\nDeploy\u00a0will happen sooner since less work in progress combined with lower risk encourages developers to deploy quickly.\n\nTime to Open is thus one of the most impactful software metrics and serves as a great starting point for optimizing your Cycle Time.\n\nScoping the Opportunity for Improvement\n\nBefore going in and making changes to improve Time to Open, you\u2019ll want to have an understanding of what \u201cgood\u201d looks like."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "Scoping the Opportunity for Improvement\n\nBefore going in and making changes to improve Time to Open, you\u2019ll want to have an understanding of what \u201cgood\u201d looks like.\n\nYou can look at this metric team-to-team to see how your top performers are doing:\n\nVelocity\u00a0lets you compare by team or by individual to the organization\u2019s average.\n\nBright green represents the top 5%, while bright red represents bottom 5% in each metric.\n\nYou can also gauge the performance of your entire organization by comparing them to the industry average.\n\nThis will help you understand your starting point and how to benchmark progress."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "You can also gauge the performance of your entire organization by comparing them to the industry average.\n\nThis will help you understand your starting point and how to benchmark progress.\n\nOur data analysis reveals the following benchmarks for Time to Open:\n\nThe top 25% of engineering orgs open pull requests in\u00a0under 3 hours\u00a0on average\n\nThe industry median is about\u00a0one day\n\nThe bottom 25% take\u00a0over two days\u00a0to open a pull request\n\nOnce you know how your teams and your organization as a whole are doing, you can start diving into where, specifically, your team is experiencing friction in the beginning of your software delivery process."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "Time to Open Diagnostics\n\nA long Time to Open indicates one or several of three things might be happening on your team:\n\nBatch sizes are too large, evidenced by the\u00a0Pull Request Size\u00a0metric\n\nThere is a high amount of code churn, evidenced by the\u00a0Rework\u00a0metric\n\nThere\u2019s a lot of multi-tasking and task-switching, evidenced by the amount of\u00a0Work in Progress\u00a0there is at any one given time.\n\nUse the software metrics below as signals in conjunction with qualitative data to understand how to improve your Time to Open.\n\nPull Request Size\n\nLook at pull request sizes (i.e., batch sizes) to see whether your team is consistently pushing small, easy-to-review changes.\n\nOur analysis shows that high-performing teams typically open PRs that are smaller than 150 LOC.\n\nLook at this metric for the entire organization, each team, and then individuals to isolate the problem.\n\nVelocity\u00a0lets you look at PR size grouped by team, cohort, or individual to help identify the scope of the problem."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "Velocity\u00a0lets you look at PR size grouped by team, cohort, or individual to help identify the scope of the problem.\n\nIf PR Size is high, it may indicate:\n\nThe practice of pushing small batch sizes isn\u2019t viewed as important,\n\nThere\u2019s a lack of experience with keeping batch sizes small,\n\nYour team hasn\u2019t built up this habit yet\n\nWhen large PR sizes are systemic across your team or organization, bring this data into discussions with your managers to find out why the team feels comfortable with large changes.\n\nEncourage teams to optimize this metric until it drives down Cycle Time and the effects of less bottlenecks are felt.\n\nWhen this metric is high for an individual, it presents a coaching opportunity.\n\nEncourage mentors to show how to approach problems with smaller, more incremental changes.\n\nRework\n\nWe define Rework, or code churn, as a percentage of code changes in which an engineer rewrites code that they recently updated (within the past three weeks)."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "Rework\n\nWe define Rework, or code churn, as a percentage of code changes in which an engineer rewrites code that they recently updated (within the past three weeks).\n\nWe\u2019ve found that top-performing teams keep their Rework under 4%, but this number can vary.\n\nWhile some Rework is a natural and expected part of the software development process, high or increased Rework indicates wasted effort that is both slowing down productivity and frustrating engineers.\n\nVelocity\u00a0provides a Coaching Summary for managers to see how Rework of a particular team or individual compares to the rest of the org.\n\nHigh Rework on the team or organization level can be a signal that there was a misalignment between product and engineering.\n\nIt often indicates unclear technical direction or consistently late changing product requirements.\n\nWhen Rework is high for individuals, it\u2019s often a symptom of a lack of experience.\n\nNewer team members tend to have higher Rework."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "When Rework is high for individuals, it\u2019s often a symptom of a lack of experience.\n\nNewer team members tend to have higher Rework.\n\nIf this isn\u2019t decreasing significantly throughout the onboarding of a team member or cohort, consider improving onboarding or mentoring processes.\n\nWork in Progress (WIP)\n\nA principle of lean product development, often discussed in the context of Kanban, is limiting Work in Progress.\n\nPractically, this means your team should be consistently progressing the unit of work that is closest to complete so that context-switching is minimal.\n\nLooking at WIP per contributor helps you understand whether your teams are juggling multiple tracks of work, slowing the time to completion for each.\n\nVelocity\u00a0lets you see the WIP per contributor with a breakdown of the most active pull requests below.\n\nHigh WIP for your team or organization is another indication of unclear or conflicting priorities, which cause team members to abandon work and move onto the next project."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "High WIP for your team or organization is another indication of unclear or conflicting priorities, which cause team members to abandon work and move onto the next project.\n\nSimilarly, high WIP per Contributor can be systemic in a team with too many dependencies.\n\nWhen team members are constantly blocked, they have no choice but to move forward onto other tracks of work.\n\nHigh WIP for an individual can be indicative of a bad work habit and should be addressed by mentors or managers through coaching.\n\nWhat\u2019s Next\n\nThe effects of improving Time to Open will immediately improve Cycle Time and team morale.\n\nOnce engineers feel unblocked and see the impact of their work more frequently, they\u2019ll be eager to uncover more opportunities to further optimize how they work.\n\nThis will set in motion a Virtuous Circle of Software Delivery which managers can use to facilitate a culture of continuous improvement."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "This will set in motion a Virtuous Circle of Software Delivery which managers can use to facilitate a culture of continuous improvement.\n\nTo learn where your team should focus next, stay tuned for the upcoming articles in our Tactical Guide to a Shorter Cycle Time five-part series:\n\nPart I:\u00a0The Virtuous Circle of Software Delivery\n\nPart II:\u00a0The Single Greatest Lever in Shortening Cycle Time\n\nPart III:\u00a0How to Stop Code Review from Bottlenecking Shipping\n\nPart IV:\u00a0Keep Code Review from Being a Waste of Everyone\u2019s Time\n\nPart V: The Last Mile to True Continuous Delivery\n\nOr, if you can\u2019t wait, sign up for a trial of\u00a0Velocity, our Engineering Intelligence product and have a data specialist guide you through each step within Velocity.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/most-impactful-software-metrics", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "Gathering context and showing empathy may be the most difficult parts of a performance review, but they\u2019re also the most important \u2014 this year, more than ever.\n\nEven in the best of times, performance reviews can be harmful.\n\nIn the era of COVID, with team members already contending with external stressors and verging on burnout, a poorly-executed performance review is likely to be even more damaging to your team members\u2019 morale.\n\nWith a little extra care, leaders can avoid giving a review that focuses on business goals at the expense of the individual \u2014 and hopefully, can take a few additional steps towards boosting their team members\u2019 motivation and well-being.\n\nAfter working with 1000s of engineering teams on improving performance, we\u2019ve learned a few things about successful end-of-year reviews."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "After working with 1000s of engineering teams on improving performance, we\u2019ve learned a few things about successful end-of-year reviews.\n\nWe recommend that reviewers:\n\nTake measures to check assumptions and assume best intentions\n\nContextualize the limited information available\n\nBe specific and focus on coaching opportunities\n\nThese strategies will help you give an effective yet compassionate review, and are worth keeping in mind any time you need to give constructive feedback.\n\nCheck your biases and assumptions with data\n\nMost managers are aware that they have innate biases that can hamper their ability to fairly and accurately evaluate their team members.\n\nBut awareness isn\u2019t enough.\n\nThe most effective way to reduce bias is to check your instincts against objective data.\n\nFor example, performance reviews are particularly subject to recency bias."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "But awareness isn\u2019t enough.\n\nThe most effective way to reduce bias is to check your instincts against objective data.\n\nFor example, performance reviews are particularly subject to recency bias.\n\nThe last few weeks or even months of work loom largest in your memory, which means they are most likely to influence your opinion about your team member\u2019s performance, even if they represent a small sliver of the past year.\n\nIf your team member has been writing fewer commits than usual over the last month, you might remember them as writing less code for the entire year, even if that is not the case.\n\nObjective data can help you check that bias, as a quick look at your team member\u2019s Commit Volume for the past year can confirm that their current drop in productivity is temporary and not representative of their performance as a whole.\n\nYou can use data to check other assumptions as well."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "You can use data to check other assumptions as well.\n\nLet\u2019s say one of your team members has been taking afternoons off to supervise remote learning or to care for an elderly relative.\n\nYou might fall prey to negativity bias, a universal bias in which negative impressions \u2014 in this case, your team member\u2019s truncated working hours \u2014 make a larger impact than positive ones.\n\nAs a result, you might overlook your team member\u2019s positive contributions to the team and assume that they have been less productive because they\u2019ve been working fewer hours.\n\nBut with objective data, you\u2019ll know for sure.\n\nYou might check their Pull Request Throughput over the last year and find out that, in fact, your team member has been just as productive than usual, if not more, because they\u2019ve been hyper-focused during their limited working hours in an effort to get everything done.\n\nPut everything in context\n\nOf course, data doesn\u2019t tell the whole story."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "Put everything in context\n\nOf course, data doesn\u2019t tell the whole story.\n\nIt\u2019s always important to put all quantitative data in context, but it\u2019s particularly important now, when everyone is in need of a little extra compassion and support.\n\nWith the right context, you can get a more complete picture of your team members\u2019 circumstances, and gain a better understanding of their current needs.\n\nLet\u2019s go back to the example of the team member who has been writing fewer commits than usual over the past month.\n\nIt might be helpful to use that information to start a conversation and find out why they\u2019ve had a hard time getting into the codebase.\n\nYou might find out that schools in their area recently shut down, and they\u2019ve been struggling to get into a new routine with the added responsibility of supervising remote learning."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "You might find out that schools in their area recently shut down, and they\u2019ve been struggling to get into a new routine with the added responsibility of supervising remote learning.\n\nWith that information, you can develop a plan to better support that team member, whether it\u2019s temporarily taking some work off their plate or offering them a little time off until they can get their bearings.\n\nOn the other hand, your conversation might reveal information that has nothing to do with their personal circumstances at all.\n\nFor example, you might find out that the team member who has been logging fewer commits has been taking time out of their workday to help with onboarding new team members and improving process documentation.\n\nWith that knowledge, you can have a more targeted conversation about your team member\u2019s interests and professional goals."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "With that knowledge, you can have a more targeted conversation about your team member\u2019s interests and professional goals.\n\nIf it turns out your team member prefers working with new developers to writing new code, you might be able to help them reshape their role and find more opportunities for coaching and mentorship.\n\nAnd don\u2019t forget \u2014 positive data needs context too.\n\nYou might be pleased to find that a team member has been more productive than ever over the past year, with a consistently high Commit Volume and PR Throughput, but it\u2019s still worth having a conversation about why that is and how it\u2019s impacting them.\n\nThat team member might reveal that they\u2019ve been feeling overwhelmed and insecure due to the current economic and political climate, so they\u2019ve been taking on extra projects and working long hours to ensure their job security."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "As their manager, you can use this information to help reassure your team member that their contribution is valued and to help take some of the pressure off.\n\nYou might even want to discuss their priorities and reallocate certain tasks, so you can help your team member avoid burning out.\n\nUse data to provide specific, actionable feedback\n\nThe most effective feedback is specific and actionable.\n\nData can help you focus your conversations on certain aspects of a developer\u2019s workflow, or specific units of work, so you can more effectively coach each individual developer.\n\nFor example, let\u2019s say one of the developers on your team is consistently opening large Pull Requests.\n\nYou could simply encourage them to \u201copen smaller Pull Requests,\u201d but that feedback might not be effective if they\u2019re having trouble finding ways to break down their work.\n\nInstead, it can be helpful to identify some of their largest Pull Requests and bring them to your evaluation."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "Instead, it can be helpful to identify some of their largest Pull Requests and bring them to your evaluation.\n\nThat way, you can take a look at some actual Pull Requests together and discuss ways they could be broken down into smaller parts.\n\nWith concrete examples and a bit of focused coaching, that developer will walk away from your conversation with actionable strategies for opening smaller Pull Requests, and you\u2019ll be more likely to see them achieve the desired result.\n\nIn cases where your team members are seriously underperforming to the point where their job really is at risk, it can be helpful to set clear, specific performance expectations.\n\nWith easy-to-understand targets, that team member may have an easier time doing what they need to do to stay afloat."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "With easy-to-understand targets, that team member may have an easier time doing what they need to do to stay afloat.\n\nThink beyond the annual review\n\nEven if you\u2019re able to run objective, compassionate performance reviews that leave your team members with actionable feedback, annual performance reviews happen too infrequently to maximize their potential for positive impact.\n\nIt\u2019s not always easy for a team member to speak up and ask for support, and it\u2019s difficult for developers to keep growing when they\u2019re only getting feedback once a year.\n\nIf you don\u2019t use them already, consider making regular 1-on-1s part of your management repertoire.\n\nWith frequent 1-on-1s, you\u2019ll get to know your team members on a more personal level, and with more frequent check-ins, you\u2019ll be able to more effectively support them through difficult situations, whether it\u2019s a personal challenge, like a sick loved one, or a professional one, like a communication breakdown with a fellow team member."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "Re-evaluate your evaluation process\n\nIf there was ever a year to re-evaluate the way you handle performance evaluations, this is it.\n\nWhile current circumstances may have generated extra pressure to meet business numbers, they have also created extra reason to be compassionate.\n\nAs a leader, it\u2019s your responsibility to ensure that business pressure doesn\u2019t compromise your team member\u2019s well-being, and to create the best possible circumstances for your team member to do their job.\n\nNo matter what you do, some of your team members may be struggling due to circumstances completely beyond either of your control.\n\nIt may not be the right time for them to boost their productivity or reach the next level of professional success, and that\u2019s ok.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/performance-reviews", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "The final principle in the Agile manifesto urges developers to reflect on the past and use that knowledge to improve future outcomes.\n\nSince we learn from the past, holding sprint retrospectives is key to improving the results of future iterations.\n\nConducted well, sprint retrospectives can boost outputs and propel teams forward; conducted poorly, they may breed toxicity.\n\nThe careful use of objective data can help you steer your retro in the right direction \u2014\u00a0read on to find out how to leverage data from the beginning to the end of the retrospective process, so you can maximize the value of this key opportunity for continuous improvement.\n\nPreparing for Your Sprint Retrospective\n\nPractices vary by organization, but sprint retrospectives may be facilitated by anyone familiar with the sprint, from a developer on the team to a stakeholder from another department."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "If you find yourself in the facilitator role, it\u2019s crucial that you build a strong foundation for your retro by performing an audit to collect data in advance.\n\nLook back on the lifetime of the sprint, and ask yourself questions like:\n\nWhat was finished?\n\nDid we deliver all the items we intended to?\n\nIf not, why?\n\nWhat specific units of work didn\u2019t get shipped?\n\nWhat bottlenecks or blockers arose, and are they part of a pattern?\n\nThe answers will help you identify patterns and problem areas and formulate meaningful conversation points to guide the retrospective.\n\nFor example, if your sprint finished with a lot of unshipped work, you\u2019ll want to know that in advance, so you can dig into the reasons during the retrospective.\n\nLook for unassigned tickets, which may indicate that some units of work were not prioritized correctly or that tickets were lost or overlooked unintentionally \u2014 though you\u2019ll need to bring these tickets up at the retro to know for sure."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "You\u2019ll also want to look at the Issues from the iteration that are still categorized as In Progress, and see how many days they\u2019ve been open.\n\nYou can dig deeper by looking at the Pull Requests (PRs) associated with that Issue, and taking a look at relevant activity and comments for each.\n\nThis can help you formulate a hypothesis as to why a unit of work was unshipped.\n\nFor example, Issues with many PRs may indicate that work was not batched efficiently, while PRs with high levels of Rework may signal that an engineer was struggling with a difficult area of the codebase, or unclear technical direction.\n\nYou can further investigate that hypothesis during your retro by discussing particular units of work to gain additional context and information.\n\nWhile you can piece together this information from your VCS and project management tools, gaining a holistic view can be tedious as this data is typically dispersed."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "While you can piece together this information from your VCS and project management tools, gaining a holistic view can be tedious as this data is typically dispersed.\n\nAn Engineering Intelligence Solution, like Velocity, can save time and add a layer of valuable insights by aggregating that data in a series of customizable dashboards and rich visualizations.\n\nPrioritize Your Sprint Retrospective\n\nTypically, retrospectives last approximately 30 minutes for each week of the sprint, so if your sprint was three weeks long, you may want to carve out an hour and a half for your retro.\n\nKeep this time frame in mind to help you prioritize speaking points and focus on conversation topics that will keep your team engaged and on task.\n\nOnce you have compiled a list of topics, see if you discover any common themes and group them together.\n\nIt may be helpful to get the perspective of your team members when you reach this point."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "Once you have compiled a list of topics, see if you discover any common themes and group them together.\n\nIt may be helpful to get the perspective of your team members when you reach this point.\n\nHere at Code Climate, our facilitators ask the team to vote on which items should be talked through first to ensure engagement and alignment.\n\nOpen the Floor to Collaboration\n\nIn order to have a productive retrospective \u2014 one that surfaces meaningful opportunities for improvement \u2014 the team must feel safe talking through any missteps.\n\nThe purpose of a retrospective is to measure processes, not individuals, so it\u2019s important to remind your team to focus on the work, and not on the people behind it.\n\nAs you set the stage for your retro, keep in mind that the data you gathered during preparation is to be used purely as an empowerment tool."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "As you set the stage for your retro, keep in mind that the data you gathered during preparation is to be used purely as an empowerment tool.\n\nWhen used appropriately, data can keep the conversation grounded in facts and tackle negative biases, allowing you and your team to have genuine conversations about things that could have been done better without making developers feel singled out.\n\nDiscuss\n\nNow to discuss.\n\nBased on the topics you prioritized, you can split your sprint retrospective discussion portion into easily digestible parts.\n\nThough format can vary based on team and personal preference, many teams focus on three categories using a \u201cStart, Stop, Continue\u201d exercise, which asks developers to provide feedback on the following:\n\nStart: Actions we should start taking\n\nStop: Actions we should stop or do away with\n\nContinue: Actions we should continue and codify\n\nIt can be helpful to use a visual aid to facilitate this exercise and keep the conversation on track."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "For in-person teams, that might mean distributing sticky notes that can be written on and affixed to a board; for remote teams, that might mean using a collaborative online platform like Trello.\n\nTake time to talk through each part, and\u2026\n\nDevelop an Action Plan\n\nBy the end of the sprint retrospective, you and your team should have several actionable ideas to put into practice to help the next iteration go smoother.\n\nWhile this data is qualitative in nature, these new ideas can then be measured against the quantitative data (such as PR size) they are meant to improve during the next sprint, enabling you to enhance software development strategies as time goes on.\n\nStandardize Sprint Retrospectives and Keep Improving\n\nBest practices are best utilized when reinforced.\n\nEach new retro you hold keeps you on the path of continuous improvement.\n\nWhile there is no golden rule as to how retros should be structured and held, some form of review is vital to achieving continuous improvement."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/plan-retrospectives-with-data", "content": "While there is no golden rule as to how retros should be structured and held, some form of review is vital to achieving continuous improvement.\n\nBy incorporating data into your retros, you can maximize the value of your discussions and help build a highly capable team that can successfully drive business goals.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/prepare-for-standups", "content": "In the classic standup meeting, the onus is on individual contributors to come prepared.\n\nQuestions are asked of the group \u2014\u00a0questions like \u201cwhat are you working on?\u201d, and \u201cwhat blockers are you facing?\u201d \u2014 and each team member has a turn to answer.\n\nThough this approach is theoretically designed to help facilitate alignment and detect possible issues before they derail sprints, it often results in unengaging, ineffective meetings.\n\nIt\u2019s not enough for a manager to pose broad questions and expect ICs to come prepared to discuss their work.\n\nTo run a truly impactful standup, the expectation needs to be flipped.\n\nTo ensure an engaging, high-value meeting, the Engineering Manager is the one who needs to show up prepared.\n\nIt\u2019s Not Reasonable to Expect ICs to Surface All Potential Issues\n\nWhen an IC is engaged with their work and invested in the outcome, it should be easy for them to show up at standup and give a status update.\n\nIt\u2019s getting to the next level that\u2019s often difficult."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/prepare-for-standups", "content": "It\u2019s getting to the next level that\u2019s often difficult.\n\nEven when you\u2019ve done the work to foster psychological safety on your team, developers may still be hesitant to surface an issue or ask questions in a public forum.\n\nIt\u2019s not necessarily that they fear punishment or don\u2019t want to appear uninformed \u2014 they may simply want the satisfaction of solving a tough problem before they share it with the team.\n\nOr, they may lack the context to realize that their teammates are working on a similar problem and that all of them would benefit from some discussion and collaboration.\n\nAnd in the most blameless of cultures, where a developer feels comfortable flagging an issue or asking a question about their own work, it\u2019s likely that same developer will hesitate to publicly bring up an issue that directly involves a teammate, for fear of being seen to call that teammate out."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/prepare-for-standups", "content": "Why it\u2019s Critical for Engineering Managers to Show up for Standups Prepared\n\nWhen an Engineering Manager walks into standup prepared, they can help guide their team past surface-level updates, towards higher-value conversations.\n\nA prepared manager has context \u2014 they understand how units of work fit together, and know when a team member\u2019s work has critical downstream impacts, or when one developer has previously worked through an issue similar to one that another developer is struggling with.\n\nWith that perspective, it\u2019s possible to make connections and facilitate conversations and collaboration.\n\nIn a typical standup, a team member might just say they\u2019re almost ready to ship a particular feature.\n\nYet if the Engineering Manager comes prepared to that same standup, they\u2019ll be able to have more informed conversations about the work."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/prepare-for-standups", "content": "Yet if the Engineering Manager comes prepared to that same standup, they\u2019ll be able to have more informed conversations about the work.\n\nThey might note that the developer\u2019s work bounced back and forth in Code Review more than normal, and ask them if it would be helpful to take a step back and review the architecture.\n\nOr, they may flag an uptick in Rework, prompting the developer to volunteer that they\u2019re working through a bug, and opening up an opportunity to pair them with a teammate who recently had a similar issue.\n\nThe information Engineering Managers need to prepare for standup is already there, in their VCS and project management tools.\n\nAn engineering intelligence platform can help make it more accessible, pulling together data on everything from Code Review to Rework, and highlighting Pull Requests that aren\u2019t moving through the development pipeline as expected."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/prepare-for-standups", "content": "If Engineering Managers take the time to review that data and gain context before standup, they\u2019ll be able to help their team skip past the status update and spend their valuable meeting time having more impactful conversations \u2014 conversations that not only help move the work forward, but which improve alignment, foster collaboration, and help their team excel.\n\nReach out to our product specialists to find out how Velocity\u2019s Workstreams report can help you walk into standups prepared, so you can get more out of your meetings.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "A retrospective is a time for our team to look back.\n\nIts function, however, is to improve the way in which we move forward.\n\nLet\u2019s digest the\u00a0original definition\u00a0from Scrum:\n\n\u201cThe Sprint Retrospective is an opportunity for the Scrum Team to inspect itself and create a plan for improvements to be enacted during the next Sprint.\u201d\n\nThe first two components are activities, the third is a result.\n\nAnd while most teams have fruitful conversations and create action items to yield that result, few have systems in place to ensure that positive change is actually created.\n\nInspect \u2714\n\nCreate a plan \u2714\n\nEnact improvements \ud83e\udd37\u200d\u2640\ufe0f\n\nThe problem starts with the notion of \u201cimprovement.\u201d It\u2019s both vague and subjective, so any plan of activities feels like a step in the right direction (spoiler: it\u2019s not).\n\nIf you take measures to concretely define improvement, however, you can hold yourself and your team accountable to your action items.\n\nFor that, we can use SMART goals."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "If you take measures to concretely define improvement, however, you can hold yourself and your team accountable to your action items.\n\nFor that, we can use SMART goals.\n\nSMART goals contextualize improvement\n\nResearch has shown that goals that are both\u00a0specific\u00a0and\u00a0time-bound\u00a0are considerably more likely to yield results than generic action items.\n\nPutting a number and a date to each retrospective action item ensures:\n\nThe department understands and aligns on what constitutes success, and\n\nProgress towards this goal is black and white \u2013 trending toward or away from the goal.\n\nWhile there are plenty of systems that put a number and date to goals, but for the sake of this post, we\u2019ll stick to one that\u2019s tried-and-true: SMART (Specific,\u00a0Measurable,\u00a0Achievable,\u00a0Relevant,\u00a0Time-bound) goal-setting.\n\nTo best position your team to work with SMART goals, you\u2019ll need to adjust all three components of the retro."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "To best position your team to work with SMART goals, you\u2019ll need to adjust all three components of the retro.\n\nYou\u2019ll be\u00a0inspecting\u00a0with more data,\u00a0creating a plan\u00a0using SMART goals, and\u00a0enacting improvements\u00a0by making progress transparent to everyone on the team.\n\nInspect: Use data to diagnose the biggest issues\n\nMost teams decide on goals using only qualitative feedback.\n\nA team member raises what they perceived to be a large bottleneck, and the whole team immediately starts trying to mitigate that issue.\n\nThis method gives precedence to what individuals remember and feel, not necessarily the largest and most pressing problems.\n\nWhile personal and andecdotal experience is vital to understanding how a problem affects the whole team, it doesn\u2019t tell the whole story.\n\nIf you bring more data points into diagnosing the problem, however, you\u2019re more likely to get a holistic understanding of each bottleneck."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "If you bring more data points into diagnosing the problem, however, you\u2019re more likely to get a holistic understanding of each bottleneck.\n\nQuantitative data helps counteract recency bias and enables you to prioritize based on actual risk that the problems present to your team\u2019s productivity.\n\nLet\u2019s say a given engineering team is trying to diagnose why they didn\u2019t get to as many features as they anticipated this sprint.\n\nOne engineer, Hannah, makes the following hypothesis:\n\nI feel like there were more pull requests than usual that were open at any one given time.\n\nI think it\u2019s because people were too busy to get to code reviews, so work piled up.\n\nSeveral engineers nod their head.\n\nThey also noticed that there were more open PRs than usual in GitHub.\n\nInstead of immediately brainstorming action items, Hannah and her team investigate further.\n\nThey start by looking at their Time to Review this past sprint, and realize it\u2019s relatively low \u2013 just 6 hours."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "They start by looking at their Time to Review this past sprint, and realize it\u2019s relatively low \u2013 just 6 hours.\n\nThis is contradictory to Hannah\u2019s assessment that the review process was slower than usual.\n\nFrom there, they see that their average number of Review Cycles is about 1.2, where most Pull Requests are approved after one review.\n\nAlso, seems pretty good.\n\nFinally, they found a red flag when they looked at their Time to Merge.\n\nThey realize that many pull requests stay open for a long time after they\u2019re reviewed as developers move on to new tracks of work.\n\nThey then agreed to create a target for open lines of work, so that each team member would only work on one feature at a time.\n\nThe gut instinct of the team recognized the symptom\u2013 long running pull requests\u2013 but not the cause.\n\nWithout data, they couldn\u2019t have uncovered and addressed a deeper systemic problem."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "The gut instinct of the team recognized the symptom\u2013 long running pull requests\u2013 but not the cause.\n\nWithout data, they couldn\u2019t have uncovered and addressed a deeper systemic problem.\n\nOther data points you may consider looking at:\n\nAll recent activities, including Pull Requests, Code Reviews, and Tickets, to remind your team of what they worked on last sprint, and where they might have gotten stuck.\n\nVelocity\u2019s\u00a0Activity Log represent every engineering activity with a shape.\n\nHover over to get context on what a team member is working on.\n\nThe most important pull requests\u00a0last sprint.\n\nLook at pull requests that had a big effect on the codebase, as well as pull requests that were larger or older than the rest.\n\nVelocity\u00a0shows work in progress with activity level, age, and health.\n\nSee at-a-glance the pull requests that are most likely to impede your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "Velocity\u00a0shows work in progress with activity level, age, and health.\n\nSee at-a-glance the pull requests that are most likely to impede your team.\n\nProcess metrics\u00a0including outcome metrics like Cycle Time and Pull Request Throughput, but also metrics that represent more specific areas of the software development process, like Time to Open, Time to Review, and Time to Merge.\n\nVelocity\u00a0lets you visualize the journey of your pull requests from open to merged.\n\nBelow, you can see metrics that represent constituents of this journey to better diagnose slowdowns.\n\nPlan: Align with SMART goals\n\nOnce your team has fully diagnosed an issue using both qualitative and quantitative data, they\u2019ll have to decide on one, specific metric that they can use as their SMART goal.\n\nSpecific\n\nSuccess of hitting or missing your metric should be black or white, so you need a concrete number in your goal.\n\n\u201cImproving our Time to Review\u201d is vague, \u201cDecreasing our Time to Review to under 4 hours\u201d is specific."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "\u201cImproving our Time to Review\u201d is vague, \u201cDecreasing our Time to Review to under 4 hours\u201d is specific.\n\nAlso, make sure the metric is narrow enough that the team knows which behaviors drive this metric up or down.\n\nMetrics that are too broad can obscure progress since they\u2019re affected by many different kinds of unrelated data.\n\nHannah\u2019s team, for example, would want to choose a metric like Time to Merge, rather than total Cycle Time, so the team can easily self-correct when they notice the metric trending in a negative direction.\n\nMeasurable\n\nThe way in which you measure your metric depends on your objective.\n\nIf you\u2019re measuring output, for example, a simple count can do the trick.\n\nIf you\u2019re looking to adhere to specific standards\u2013 such as keeping pull requests small, or keeping downtime minimal\u2013 you\u2019ll want to decide between tracking the simple average and tracking it as a sort of Service Level Objective (SLO) based on a percentile."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "Here are a few examples:\n\nDecrease Pull Request Cycle Time to under 1 day.\n\n90% of pull requests should have a cycle time of under 1 day.\n\nDecrease Pull Request Size to an average of 250 lines of code.\n\nKeep 95% of pull requests under 250 lines of code.\n\nReduce Review Cycles to an average of 1.5 cycles.\n\nKeep 90% of reviews to one cycle.\n\nReduce Review Speed to an average of 1 hour.\n\nKeep 90% of reviews to under 1 hour.\n\nWhile averages are more commonly used in process metrics, SLOs enable your team to deviate from the goal in a few instances without hindering their ability to meet the target.\n\nAssignable\n\nPick one person to own and track this goal.\n\nResearch has shown that having exactly one team member check in at regular intervals drastically increases the chances that a goal will be hit.\n\nApple championed the idea of a\u00a0Directly Responsible Individual (DRI)\u00a0for all initiatives, and teams at leading tech companies like Microsoft have applied the\u00a0DRI model to all DevOps related functions."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "Apple championed the idea of a\u00a0Directly Responsible Individual (DRI)\u00a0for all initiatives, and teams at leading tech companies like Microsoft have applied the\u00a0DRI model to all DevOps related functions.\n\nOwnership will also help you secure buy-in for bringing data into retros.\n\nConsider asking the person who uncovered the problem in the first place to own the goal.\n\nRealistic\n\nMake sure your goal is reachable, so your team feels success if they\u2019ve put a concerted effort into reaching the goal.\n\nExecute: Increase visibility to keep goals front of mind\n\nThe true test of your action items come after the retro.\n\nHow frequently will your team think about these metrics?\n\nWill success be known across the team?\n\nIf your team is unsuccessful, will they be able to try a different adjustment?\n\nTo keep the goal front of mind, you need to make progress visible to everyone on the team.\n\nMany managers use information radars, either in shared spaces or in universally accessible dashboards."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "To keep the goal front of mind, you need to make progress visible to everyone on the team.\n\nMany managers use information radars, either in shared spaces or in universally accessible dashboards.\n\nVelocity\u00a0provides a Target dashboard that lets you visualize progress towards your SMART goals.\n\nMaking progress transparent equips the team to bring the results-oriented discussions outside of their retros.\n\nEffective goals will be brought up during standups, 1:1s, and even pairing sessions.\n\nRepetition will secure focus and will further unify the team around success.\n\n\ud83d\udcc8 makes engineers \ud83d\ude0a\n\nWhen Boaz Katz, the founder and CTO of Bizzabo,\u00a0started setting concrete targets he found that sharing success motivated his team to find more ways to improve.\n\nHe told us, \u201cMy team developed a winning attitude and were eager to ship even faster.\u201d\n\nWhen the whole team sees success each retro, the momentum creates a flywheel effect."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-scrum-retrospectives", "content": "He told us, \u201cMy team developed a winning attitude and were eager to ship even faster.\u201d\n\nWhen the whole team sees success each retro, the momentum creates a flywheel effect.\n\nTeam members are eager to uncover more improvement opportunities creating a culture around enacting positive change to your processes.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-standup-meeting", "content": "\u201cThe daily stand up meeting is not another meeting to waste people\u2019s time.\n\nIt will replace many other meetings giving a net savings several times its own length\u201d\u00a0\u2013XP Rules\n\nOne of three things happens at every standup:\n\nIssues are omitted.\n\nIssues are delayed.\n\nIssues are glossed over.\n\nIt may be because a developer doesn\u2019t want to look bad in front of their peers.\n\nOr, perhaps, they\u2019d rather have the satisfaction of working through the challenge on their own.\n\nRegardless, all developers are subject to biases that sway their decision on whether and when they share critical problems.\n\nOne person in the room, however, is usually too far from the codebase to recognize all the issues that are at risk of derailing the sprint.\n\nAnd that person\u2013whether it\u2019s a manager, a team lead, or a scrum master\u2013is usually the one responsible for making sure the team stays on track.\n\nThis creates an undesirable dynamic.\n\nThose who are closest to the problems don\u2019t have the time to step back and see the forest for the trees."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-standup-meeting", "content": "This creates an undesirable dynamic.\n\nThose who are closest to the problems don\u2019t have the time to step back and see the forest for the trees.\n\nThe manager, who is responsible for keeping the sprint on track, doesn\u2019t have the visibility to uncover roadblocks and bottlenecks.\n\nDevelopers end up inadvertently serving as gatekeepers to critical issues.\n\nTo change this dynamic, the manager needs to do a bit of research.\n\nBefore stepping foot into stand-up, they need to understand early warning signs of risks to the sprint.\n\nIdentify the signals through the noise\n\nThe first thing the manager should look at is: how fast is the team moving?\n\nIs this pace faster or slower than normal?\n\nCurrently, most managers track some version of Planned vs.\n\nCompleted work.\n\nThey might look at story points or tickets closed.\n\nWhile these are useful for assessing planning effectiveness, they\u2019re not diagnostic.\n\nYou can\u2019t tell whether the issue is with capacity or efficiency."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-standup-meeting", "content": "They might look at story points or tickets closed.\n\nWhile these are useful for assessing planning effectiveness, they\u2019re not diagnostic.\n\nYou can\u2019t tell whether the issue is with capacity or efficiency.\n\nA more accurate reflection of pace is an activity metric, such as a Pushes or Commit Count.\n\nWhen activity is lower than normal, the manager knows that there are obstacles holding back the engineers from coding.\n\nCode Climate\u2019s\u00a0Velocity\u00a0shows a burn-up each sprint based on push volume.\n\nIf this activity count is low, the manager will want to further investigate where developers might be stuck.\n\nThey should look out for three red flags:\n\nLong-running pull requests:\u00a0Are there pull requests that have been open for more than three business days?\n\nIf so, who can help get it out the door, or break it up into smaller chunks?\n\nHigh review cycles:\u00a0Is there a pull request that has been passed back and forth between the reviewer and the author several times?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-standup-meeting", "content": "High review cycles:\u00a0Is there a pull request that has been passed back and forth between the reviewer and the author several times?\n\nLarge pull requests:\u00a0Are contributors opening pull requests in small, easy-to-review units?\n\nIf not, those pull requests are harder to review and at greater risk of causing an issue when they are merged.\n\nVelocity\u00a0shows work in progress with activity level, age, and health.\n\nSee at-a-glance the pull requests that are most likely to impede your team.\n\nIf pace is slow, yet no pull request is growing unwieldy, you\u2019ll want to pull a list of engineering activities.\n\nCheck tickets, commits, merges, and reviews to ensure that the team\u2019s work aligns with what was planned and expected.\n\nVelocity\u2019s\u00a0Activity Log represent every engineering activity with a shape.\n\nHover over to get context on what a team member is working on.\n\nYou can surface this information by setting up a Git history statistics tool, like\u00a0GitStats, and then pull the data before each standup."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-standup-meeting", "content": "Hover over to get context on what a team member is working on.\n\nYou can surface this information by setting up a Git history statistics tool, like\u00a0GitStats, and then pull the data before each standup.\n\nOr, you can use an Engineering Intelligence platform like\u00a0Velocity\u00a0to see all of these risks in one place.\n\nRegardless of how you pull the data, spending fifteen minutes to catch up on all the important work in progress ensures that no time is wasted catching up during actual standup.\n\nShift the conversation toward action\n\nWith more shared context, the conversation shifts from talking about problems to talking about solutions.\n\nHere are two scenarios played out side by side:\n\nWhat did you do yesterday?\n\nWhat are you working on today?\n\nAnything blocking you?\n\nThe opportunity to offer support is much greater when you start the conversation with actual data.\n\nIt takes the onus off of each developer to ask for help and transforms the meeting into a constructive way to keep the team on pace."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/productive-standup-meeting", "content": "It takes the onus off of each developer to ask for help and transforms the meeting into a constructive way to keep the team on pace.\n\nStandup is not roll-call\n\nThe value in disrupting developers for face-time is to identify and plan for addressing bottlenecks\u2013 not for proving that they\u2019re working.\n\nOnce time is re-allocated toward identifying risks and ensuring the team is on track to hit this sprint\u2019s goals, you\u2019ll find that finally, the stand-up is providing more value than a meeting that is several times its length.\n\nAll that\u2019s required is a bit of preparation.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "On average, a software development team reworks about 26% of its code prior to release.\n\nEven after accounting for necessary changes, those wasted hours can cost a medium-sized business upwards of $4.7M a year.\n\nStill, when engineering leaders look to cut costs, they often look at departmental spending.\n\nSoftware licenses, discretionary expenses, and even salaries may come under scrutiny.\n\nBut not all costs come with such a clear price tag \u2014 inefficiencies in the software development process are harder to quantify, but much more expensive.\n\nAccording to a 2017 DORA white paper, Forecasting the Value of DevOps Transformations, the cost of Rework in software development is staggering, setting businesses of all sizes back millions of dollars a year.\n\nSource: Forecasting The Value Of DevOps Transformations: Measuring ROI of DevOps, DORA, 2017.\n\nUnnecessary Rework, or code churn, is a significant source of waste across all industries."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "Source: Forecasting The Value Of DevOps Transformations: Measuring ROI of DevOps, DORA, 2017.\n\nUnnecessary Rework, or code churn, is a significant source of waste across all industries.\n\nAs the authors note, when organizations reduce their levels of Rework, they\u2019re \u201cessentially getting additional capacity without having to recruit and hire \u2013 just by improving processes.\u201d Not only are they recouping the cost of wasted time \u2013 if they reinvest that time in the business, they\u2019re realizing gains from those additional working hours.\n\nThough the costs calculated in the DORA report are astonishing, they\u2019re also conservative.\n\nThey account for the dollar value of wasted time, but the cost of Rework in software development extends beyond the cost of unproductive hours.\n\nUnnecessary Rework can also harm morale, which can lower productivity and make it difficult to retain talented developers.\n\nUsing DORA\u2019s formula, it\u2019s possible to calculate how much money your department is wasting on unnecessary Rework."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "Using DORA\u2019s formula, it\u2019s possible to calculate how much money your department is wasting on unnecessary Rework.\n\nIf you can find ways to evaluate, diagnose, and reduce your levels of Rework, you can begin to make a dent in one of your largest hidden costs.\n\nIdentifying Unnecessary Rework in Software Development\n\nInformation about your team\u2019s Rework is already available in your VCS.\n\nUsing an engineering analytics platform, you can analyze Rework at both the team and individual level and begin to observe trends.\n\nWhen you\u2019re just beginning to tackle Rework in your organization, start by establishing your team\u2019s baseline.\n\nHow much Rework is normal for your team?\n\nFor an individual?\n\nYou can use that information to identify teams or individuals with high levels of Rework relative to the rest of the department.\n\nIt can also help you spot any general organization-wide upticks.\n\nSource: Velocity."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "It can also help you spot any general organization-wide upticks.\n\nSource: Velocity.\n\nGreen highlights high performance, while red indicates an area in need of improvement, relative to the rest of the team.\n\nThese deviations from your baseline represent anomalies worth investigating, though it\u2019s important to note that your investigation won\u2019t always reveal waste.\n\nSome Rework is expected, even necessary \u2014 and in some cases, avoiding Rework for the sake of bringing your numbers down will only convert that cost into technical debt, which you\u2019ll pay for later.\n\nThrough conversations with your team, you\u2019ll be able to put your observations in context and determine which Rework is anticipated and which needs to be addressed.\n\nRework at the Individual Level\n\nLet\u2019s say you\u2019ve identified a developer whose Rework levels are higher than the rest of the team.\n\nCheck that observation against what you already know about their circumstances."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "Check that observation against what you already know about their circumstances.\n\nIf the developer is a recent hire still getting familiar with the codebase, or a team member working in a new programming language, it\u2019s reasonable to expect higher-than-usual levels of Rework.\n\nIf this number doesn\u2019t decrease over time, you can treat it as a coaching opportunity.\n\nRework is a leading metric, and high Rework levels can signal that additional hold-ups will appear further down in your development pipeline.\n\nUse specific units of work as a starting point, and talk to the contributor about their biggest stumbling blocks.\n\nTogether, you can develop a strategy for improvement, like arranging for a pair programming session with a more senior member of the team.\n\nRework at the Team Level\n\nYou can apply the same strategy to teams.\n\nWhen you notice that Rework is trending upward \u2014 on one team or across the organization \u2014 use that as a starting point for conversation."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "When you notice that Rework is trending upward \u2014 on one team or across the organization \u2014 use that as a starting point for conversation.\n\nIt can be helpful to bring specific units of work to your retros or stand-ups, so you can kick off the discussion around something concrete.\n\nThrough these conversations, you may learn that the team has been struggling with unclear technical documentation, or suffering through breakdowns in communication.\n\nFrom there, you can work together to address the issue.\n\nA team whose Rework is a result of poor documentation may benefit from taking some time to clarify product specs, while one dealing with a lack of communication may benefit from opening new channels for sharing information.\n\nSet Targets to Decrease Rework\n\nOnce you\u2019ve begun to evaluate your team\u2019s Rework, you can use that information to set targets and track progress towards those goals.\n\nSet a target that is ambitious, but achievable, for your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "Set a target that is ambitious, but achievable, for your team.\n\nIf you want to get to 20% and you\u2019re currently at 30% Rework, it might be productive to aim to get to 20% in stages, rather than all at once.\n\nWhat Will You Do With Your \u201cFree\u201d Time?\n\nCutting down Rework is more than just a cost-saving measure.\n\nIt\u2019s a chance to reinvest in your department without spending money.\n\nTime that used to go to waste can be used for innovation.\n\nDevelopers who were previously frustrated by their inability to make progress will be motivated by the opportunity to add value, and will be more likely to stick around.\n\nWith a stable team and more hours in the day, your department will be able to make an even bigger impact.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/rework-costs-millions", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "When you discover the benefits of data-driven conversations, it\u2019s likely you\u2019ll want to invite your entire team to view all of their engineering metrics.\n\nBut an abundance of data can make it difficult to hone in on the most important trends, and data that\u2019s lacking context is more likely to be misused or misinterpreted.\n\nThat\u2019s why we recommend rolling out Velocity gradually.\n\nThen, as your team becomes comfortable with the engineering metrics Velocity reveals, sharing more can become increasingly valuable.\n\nWhat does a rollout look like?\n\nVelocity is an analytics tool, built to improve how teams make decisions.\n\nTo that end, a \u201crollout\u201d can be as simple as exposing your engineers to the metrics and dashboards through curated slides, or as involved as giving each team member access to the application.\n\nHere are the different levels of exposure you can consider:\n\nContextual exposure: Share what data you\u2019re tracking and present relevant reports in meetings with teams and individuals."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "Here are the different levels of exposure you can consider:\n\nContextual exposure: Share what data you\u2019re tracking and present relevant reports in meetings with teams and individuals.\n\nScoped exposure: Share the Velocity reports you\u2019d like and limit the data scope by team or by individual so that engineers only see the metrics that are most relevant to them.\n\nFull access: Provide engineers with access to all their own and their team member\u2019s data.\n\nDifferent teams have varying levels of trust and familiarity with engineering performance metrics, so the right exposure will differ team-to-team.\n\nUse the guidelines below to gut-check when and how to introduce each type of rollout.\n\nIntroducing the idea of data-driven engineering with contextual exposure\n\nThe Challenge: Engineers are naturally skeptical and concerned about engineering metrics, so it\u2019ll be up to you to advocate for the data and engender a positive culture around analytics."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "The Preparation: We recommend that you work with your CSM to concretely define problem statements and get to know the dashboards and metrics that will support your objectives before sharing the tool with your team.\n\nFor instance, your objective may be to decrease batch sizes in an effort to improve the efficiency of your Code Review process.\n\nIn this case, your supporting metrics may be Pull Request Size, Time to Open, and Review Speed.\n\nMove on to rollout if you can answer yes to all of these questions:\n\nCan you articulate the problems that Velocity data will help you better understand?\n\nDo you know how the metrics you\u2019re tracking connect to the problems you\u2019ve defined?\n\nWill you be able to defend and explain these metrics to your team?\n\nWill your team feel confident that you\u2019ll be using these metrics in a way that will benefit (not hurt) the team?\n\nThe Rollout: Introduce your problem statements and supporting metrics to your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "Will your team feel confident that you\u2019ll be using these metrics in a way that will benefit (not hurt) the team?\n\nThe Rollout: Introduce your problem statements and supporting metrics to your team.\n\nHave concrete examples of how you\u2019re already working through a previously discussed problem using data.\n\nEmpowering engineers to own their success with scoped exposure\n\nThe Challenge: It\u2019s one thing to periodically show org-wide metrics during team and individual meetings, but another to give engineers access to their own metrics.\n\nEven engineers who are interested in becoming more data-driven in theory can be wary of metrics when they\u2019re frequently confronting their own dashboard.\n\nThe Preparation: To earn buy-in for limited use of Velocity, you\u2019ll want to demonstrate how using data can help make 1:1s and retros more actionable.\n\nUse one of these meetings as an opportunity to find a concrete unit of work that represents an engineer\u2019s experience or frustration."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "Use one of these meetings as an opportunity to find a concrete unit of work that represents an engineer\u2019s experience or frustration.\n\nIt can be helpful to involve a senior engineer earlier on, so they can pair what they know from experience with what is being surfaced in the data.\n\nBegin using Velocity to start conversations with real-world examples, so engineers can understand how data can be used to distinguish the signal through the noise.\n\nMove on to rollout if you can answer yes to all of these questions:\n\nCan you correlate the experience of developers to specific PRs that Velocity is highlighting?\n\nDo you have a senior engineer who can advocate for the positive intention with which Velocity will be used?\n\nDo you have a sense of which metrics will be improved should you work through the identified challenges?\n\nThe Rollout: Work with your CSM to set up data scopes to display the appropriate reports and metrics for each engineer."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "The Rollout: Work with your CSM to set up data scopes to display the appropriate reports and metrics for each engineer.\n\nAt the end of your next retrospective, demo the Velocity product for your team.\n\nEncourage them to periodically view their dashboards and check in on key metrics at each retrospective so your team achieves the desired outcome.\n\nCreating an autonomous team with full access\n\nThe Challenge: Introducing engineers to all of Velocity\u2019s metrics means that not only does leadership have to interpret the metrics responsibly, but so does every single individual on the team.\n\nExposing all of your metrics requires an extremely safe and trusting team environment.\n\nThe Preparation: First, you\u2019ll want to show how setting quantifiable goals can benefit developers.\n\nUse a retrospective meeting to identify one significant problem they\u2019re experiencing and work together to identify key metrics that will help work through the stated problem."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "Use a retrospective meeting to identify one significant problem they\u2019re experiencing and work together to identify key metrics that will help work through the stated problem.\n\nMove on to rollout if you can answer yes to all of these questions:\n\nDoes your team have an identified problem that Velocity metrics will help work through?\n\nHave you identified both leading (health) metrics, and lagging (success) metrics for your stated problem?\n\nCan each team member explain why each metric was chosen in association with the stated problem?\n\nDo you have a hypothesis about what success looks like with these metrics?\n\nThe Rollout: Work with your CSM to set up data scopes to display all the reports and metrics for each engineer\u2019s team.\n\nAt the end of your next retrospective, demo the Velocity product for your team.\n\nEncourage them to periodically view their dashboards and check in on key metrics at each retrospective until the desired outcome is achieved."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/roll-out-engineering-metrics", "content": "Encourage them to periodically view their dashboards and check in on key metrics at each retrospective until the desired outcome is achieved.\n\nReach out to get started with Velocity, and find out how engineering metrics can help your team meet its goals.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-effective-retros-data", "content": "Effective retrospectives are an important opportunity to provide guidance and invest in your team\u2019s future.\n\nThough the discussions you have during retros will surface areas of friction or frustration, you may find that anecdotal evidence and gut feel don\u2019t provide enough information.\n\nIt can be hard to know how to help your team without a concrete means of gauging why developers are struggling (or succeeding).\n\nLeverage data from an engineering analytics tool like Velocity, and you\u2019ll be able to transform your retros into valuable opportunities for learning about team members and how they function within your engineering process.\n\nWith this information, you\u2019ll be able to run more effective retrospectives by offering relevant support, setting more specific goals, and ensuring your retro action items drive improvement."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-effective-retros-data", "content": "With this information, you\u2019ll be able to run more effective retrospectives by offering relevant support, setting more specific goals, and ensuring your retro action items drive improvement.\n\nUncover Data-backed Insights\n\nTo get a sense for how your team is doing, use Velocity to determine if your engineers are trending up or down over time for the following PR-based metrics:\n\nCycle Time, which indicates the time between when the first commit is authored and when a PR is merged.\n\nThis metric can be used as your team\u2019s speedometer.\n\nAim for a Cycle Time of under 2 days.\n\nTime to Open, which is defined as the time between the earliest commit in a Pull Request and when the Pull Request is opened.\n\nTop-performing teams take less than half a day on average to open a PR.\n\nReview Cycles, or the number of times a Pull Request has gone back and forth between the author and reviewer.\n\nNote that keeping your average Review Cycles below 1.3 keeps your team in the top 50% of engineering organizations."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-effective-retros-data", "content": "Note that keeping your average Review Cycles below 1.3 keeps your team in the top 50% of engineering organizations.\n\nTime to Merge, or the duration between when a Pull Request is opened and when it is merged.\n\nSet Quantifiable Goals\n\nTo make your learning actionable, head to the Targets page, select your metric, and define a goal.\n\nIn this case, we\u2019ll aim to keep 90% of Code Reviews to one Cycle.\n\nWhen Review Cycles are high, it can mean one of three things:\n\nThere are differing opinions about what \u201cdone\u201d means.\n\nThere\u2019s misalignment around what kind of changes are expected to come out of the review process.\n\nThere are conflicting ideas about how a solution should be implemented.\n\nYou can hover over the interactive column chart to see how often your team hit their goal.\n\nSelecting any week that didn\u2019t meet an SLA will bring up a drill-down of all the underlying data points (commits, PRs, or reviews), so you can investigate the source of the issue."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-effective-retros-data", "content": "Selecting any week that didn\u2019t meet an SLA will bring up a drill-down of all the underlying data points (commits, PRs, or reviews), so you can investigate the source of the issue.\n\nIn the above example, there are 12 PRs that you can dig into.\n\nLeverage this data to investigate places where your goals weren\u2019t achieved and to offer guidance where necessary.\n\nData is Key to Driving Improvement with Effective Retrospectives\n\nWith the right data, you\u2019ll be able to objectively assess your team\u2019s progress and find concrete opportunities for advancement.\n\nCombine that with qualitative feedback from your team, and it\u2019s possible to hold retros that effectively surface issues and point towards possible solutions.\n\nSpeak to one of our specialists about Velocity, and find out how data can help you drive progress on your engineering team.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-effective-retros-data", "content": "Speak to one of our specialists about Velocity, and find out how data can help you drive progress on your engineering team.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-impactful-standups", "content": "Standups should be a vital ceremony for building trust and cohesion within a team.\n\nThey\u2019re meant to help your team remain engaged and adaptable, so they can keep work moving forward.\n\nThe reality is, most standups do none of that.\n\nIt\u2019s not that standups aren\u2019t a good idea in theory; teams should have a regular touchpoint that enhances collaboration and alignment.\n\nIn practice, however, they fall flat.\n\nToo often, standups are held simply because they\u2019re expected \u2014 they\u2019re a cornerstone of agile, after all \u2014 not because they provide value to the team.\n\nThey\u2019re frequently maligned as boring and ineffective.\n\nLike all processes that exist because of a shared understanding of how things \u201cshould\u201d be, standups are in need of an overhaul.\n\nTo add value back into your standups, focus on the reason you\u2019re holding them in the first place.\n\nForeground those goals (alignment, adaptability, and engagement), and think about the particular dynamics of your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-impactful-standups", "content": "Foreground those goals (alignment, adaptability, and engagement), and think about the particular dynamics of your team.\n\nHow can you encourage your team members to contribute in a meaningful way, and to help fulfill the goals of the standup?\n\nEvery team is different, which means every answer will be slightly different.\n\nYou\u2019ll likely have to iterate before you land on a process that works for your team.\n\nAnd you\u2019ll have to continue to iterate as your team and its needs change.\n\nThat said, there are a few broad strategies we here at Code Climate recommend:\n\nKeep key questions at the forefront \u2013 Once you\u2019ve decided on the critical questions that every standup needs to answer, make sure that information stays top of mind for all involved.\n\nWe recommend pasting these questions into the standup calendar invite and revisiting them at the beginning of every standup, so they serve as a constant reminder to attendees and help keep conversations focused."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-impactful-standups", "content": "The key questions we ask are:\n\nWhat did you work on yesterday?\n\nWhat are you working on today?\n\nAre you blocked on anything?\n\nDon\u2019t be afraid to ask follow up questions too, as long as they help further the goals for your meeting.\n\nPrepare with data \u2013 To be impactful, standups need to surface the units of work most in need of attention and discussion.\n\nWhile you should create an environment that will encourage your team members to speak up when they need help, it\u2019s not a guarantee that they will.\n\nAn engineering intelligence platform like Velocity can help you spot bottlenecks and identify at-risk work, so you can walk into standups prepared.\n\nIf your team members raise those issues, you\u2019ll be ready to offer guidance.\n\nIf they don\u2019t, you can raise them yourself and help troubleshoot so that the sprint stays on track.\n\nCreate a blameless space \u2013 Ensure your team members understand that they won\u2019t be penalized for raising an issue or voicing a concern."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-impactful-standups", "content": "Create a blameless space \u2013 Ensure your team members understand that they won\u2019t be penalized for raising an issue or voicing a concern.\n\nThis will help create a feeling of safety \u2014 when engineers know they won\u2019t be punished for it, they\u2019ll be more likely to surface potential problems and ask for help.\n\nLeave time for hesitation \u2013 Before moving on to the next person or topic, leave a moment of pause.\n\nSometimes there\u2019s an impulse to move through standup as fast as possible for efficiency\u2019s sake.\n\nIt may sound counterintuitive, but when you\u2019re trying to keep standups efficient and impactful, moments of pause are key.\n\nIf an IC is considering voicing a concern, but hesitating, you want to create an opportunity for them to speak up \u2014 often those moments of hesitation give rise to the most important conversations.\n\nEmbrace fast follow ups \u2013\u00a0 Block off 20 minutes of time after every standup for follow-up conversations."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-impactful-standups", "content": "Embrace fast follow ups \u2013\u00a0 Block off 20 minutes of time after every standup for follow-up conversations.\n\nIf something comes up during standup that requires further conversation, you\u2019ll have a block of time to have that conversation with the relevant teammates while things are still fresh in your head.\n\nYou won\u2019t need to derail standup for a deep dive that doesn\u2019t impact the rest of your team, but you won\u2019t delay the conversation for too long either.\n\nWith these strategies, you\u2019ll be on your way to running more effective, impactful standups.\n\nYour team will start the day of strong, poised to tackle their most challenging work and keep code moving through the development pipeline.\n\nTo find out more about using data to prepare for your standups, reach out to one of our product specialists.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/run-impactful-standups", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "Your engineering team is a lean, mean, feature-shipping machine.\n\nYou have a happy and growing customer base.\n\nYou\u2019re taking customer requests but have a clear product direction.\n\nThings are hectic, but good hectic.\n\nThen, the execs decide it\u2019s time to scale.\n\nThey\u2019re asking your team to increase output by 20%, 50%, 2x, or 10x.\n\nAnd they give a budget of $x to do so.\n\nMost engineering managers put that cash straight into recruiting and hiring.\n\nTheir team has worked so hard to get this far, so instead of trying to push them to do more in less time, they\u2019re going to double their output by doubling their headcount.\n\nManagers who have experienced scale, however, are wary that growing a team can have diminishing marginal returns.\n\nThey also know that the processes of their 7-person team aren\u2019t going to work for a 20-person team or a 200-person team.\n\nThe legwork to prepare for scale is significant so the decisions should be made carefully."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "The legwork to prepare for scale is significant so the decisions should be made carefully.\n\nTo help you make a well-calculated decision, we put together a cost-benefit analysis of scaling an engineering team, equipped with a spreadsheet Hire Or Optimize Calculator.\n\nThe hidden costs of hiring\n\nWhen you\u2019re working on an agile team, it always feels like you\u2019re just one person short from getting everything done.\n\nIt\u2019s tempting to take advantage of the opportunity to bring on just one or two more folks to hit a 20% increase in output.\n\nBut just like every line of code adds technical debt, every butt-in-seat adds logistical complexity to your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "But just like every line of code adds technical debt, every butt-in-seat adds logistical complexity to your team.\n\nAt the heart of the inefficiencies of scale is the non-linear growth of communication lines:\n\nThe complexity of the relationships between individuals grows exponentially with each added team member, which makes it harder for managers to:\n\nCommunicate decisions to team members\n\nGive team members a voice or input into said decisions\n\nExecute on a process change (more on this later!)\n\nGauge the effectiveness of said process change\n\nTwo-way communication between leaders and direct reports is integral to maintain alignment on the team and ensure people feel invested in the work.\n\nWithout it, you\u2019ll run into expensive problems like burnout, high turnover rate, and slow/inefficient incident recovery."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "Without it, you\u2019ll run into expensive problems like burnout, high turnover rate, and slow/inefficient incident recovery.\n\nThe measures typically introduced to adjust for scale usually take time away from actual engineering:\n\nMore team meetings that ensure employees understand how their work fits into the larger picture\u00a0(+30 min/week)\n\nMore 1:1s that ensure employees get face time and opportunity for input with decision makers\u00a0(+30 min/week)\n\nMore documentation that ensures that information doesn\u2019t get siloed with one person or team members\u00a0(+15 min/week)\n\nMore reporting that ensures that new changes are being implemented without direct supervision\u00a0(+15 min/week)\n\nIf you added these processes overnight at an inflection point of hiring your 31st engineer, that\u2019s 45 engineering hours lost a week\u2013 a loss that\u2019s greater than the return you\u2019re getting from a fully-onboarded engineer.\n\nThis effect is often described by\u00a0Brook\u2019s Law:\u00a0that adding manpower to a late software project will delay it."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "This effect is often described by\u00a0Brook\u2019s Law:\u00a0that adding manpower to a late software project will delay it.\n\nCalculate your own cost of hiring\n\nWe built a model for you to estimate the costs and benefits associated with engineering hiring over time.\n\nNote that we made some simplifications, but as the saying goes, \u201call models are wrong, but some models are useful.\u201d\n\nThe information you\u2019ll need is:\n\nThe # of engineers you\u2019re looking to hire\n\nThe # of engineering managers you\u2019re looking to hire\n\nThe average engineer salary at your organization\n\nThe average manager salary\n\nInputting our own data, the monthly costs look something like this:\n\nOur \u201cHire\u201d Results from the Hire or Optimize Calculator.\n\nSee Yours\n\nWhile the benefit does, in fact, outweigh the cost, we\u2019re looking at a 36% cost increase for a 26% productivity increase.\n\nOver time, here are the cumulative results we\u2019d be looking at:\n\nOur Cumulative \u201cHire\u201d Results from the Hire or Optimize Calculator."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "Over time, here are the cumulative results we\u2019d be looking at:\n\nOur Cumulative \u201cHire\u201d Results from the Hire or Optimize Calculator.\n\nSee Yours\n\nBefore committing to such a hefty, upfront cost, consider making your existing processes as lean as possible first.\n\nFor most managers, this opportunity is much greater than they realize.\n\nHidden cost of process optimization\n\nThere are two common misconceptions about process optimizations:\n\nThat there are few associated costs, and\n\nBenefits are minimal, often to the point of being trivial\n\nNeither is necessarily true.\n\nLet\u2019s say a manager joins an engineering team and is horrified to find barely any processes in place ensuring continuous delivery.\n\nThe team calls itself agile, but in reality, everyone is working on an undefined number of projects, and almost no one sticks to the deadlines discussed during planning meetings.\n\nThe manager might try to force a new structure, equipped with retros, burndown charts, and a more-structured code review process."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "The manager might try to force a new structure, equipped with retros, burndown charts, and a more-structured code review process.\n\nAll of those changes are good in theory, but making them all at once will drastically affect performance, as team members adjust to the new constraints.\n\nIf productivity stalls for too long, a manager might pull the plug on the whole overhaul, and get back to their disorganized, but frequent shipping schedule.\n\nsource\n\nBig process changes require a re-onboarding of every existing team member, each of whom has already found and developed a working process that they believe to be efficient.\n\nYou can expect your team to dip below its previous productivity level for anywhere from 3-12 months before seeing the effects of those changes.\n\nTo mitigate the risk associated with the process change, you can minimize the scope of each change."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "To mitigate the risk associated with the process change, you can minimize the scope of each change.\n\nThis \u201cagile\u201d approach to change management ensures that the workflow changes for your team members remain minimal and gives you the ability to roll back anything that isn\u2019t effective without incurring too much loss.\n\nsource\n\nThis kind of process optimization can also lead to much more than marginal returns.\n\nJust like adding a couple of meetings a week can subtract the equivalence of the productivity of a full-time engineer, the reverse is also true.\n\nIf you make small optimizations for each team member, it can boost output significantly.\n\nA change that improves the individual output of each developer by just 1%, means a team of 10 will be working 185% faster by the end of just one year.\n\nCalculate your own cost of optimization\n\nUse the same model as above to see the relative costs and benefits from an optimization."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "Calculate your own cost of optimization\n\nUse the same model as above to see the relative costs and benefits from an optimization.\n\nWhen our engineering department\u00a0restructured our teams into smaller squadsearlier this year, we were aiming for a 20% productivity increase.\n\nHere are the kind of costs and benefits we were projecting per month from this optimization:\n\nOur \u201cOptimize\u201d Results from the Hire or Optimize Calculator.\n\nSee Yours\n\nCumulatively, the gains quickly and drastically outpace the costs:\n\nOur Cumulative \u201cOptimize\u201d Results from the Hire or Optimize Calculator.\n\nSee Yours\n\nWhile hiring means our monthly costs increased 36% for a 25% ongoing increase, here, our monthly costs increase 3% for a 20% ongoing productivity increase.\n\nThese relative costs illustrate that it is always better to look for opportunities for optimization before hiring.\n\nEngineering processes are invisible, so uncovering opportunities for improvement is rather difficult."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "Engineering processes are invisible, so uncovering opportunities for improvement is rather difficult.\n\nThis requires quantifying how fast your team is moving and learning the patterns of where work gets stuck along the pipeline.\n\nAn\u00a0engineering analytics tool\u00a0like Velocity can help you understand speed and work habits at a glance, or you can track simple metrics, such as Pull Requests Merged or Commit Volume yourself.\n\nOptimize or hire?\n\nWhether it\u2019s better to (a)optimize or (b)optimize and then hire, depends on your desired outcome.\n\nYou probably can\u2019t 10x your output by optimizing alone, but before hiring, make sure you\u2019ve taken every advantage of optimization that you can.\n\nAs your team grows, any process improvement will become more lengthy and expensive.\n\nUse our Optimize or Hire calculator to determine whether you can optimize for your desired output.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/scale-engineering-calculator", "content": "Use our Optimize or Hire calculator to determine whether you can optimize for your desired output.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "What is Cycle Time?\n\nOne of the more important metrics we look at for our own engineering team, as well as for the engineering teams using Velocity, is Cycle Time.\n\nCycle Time is a rough measure of process speed.\n\nWe\u2019ll explore the definition in more depth, but first, it\u2019s important to understand\u2026\n\nWhy Does Cycle Time Matter?\n\nCycle Time is engineering\u2019s speedometer.\n\nMeasuring and improving on Cycle Time can help you innovate faster, outrun your competition, and retain top talent.\n\nCycle Time even has implications beyond engineering \u2014 it\u2019s also an important indicator of business success.\n\nAnd yet, a number of engineering organizations practicing lean and/or agile development seem satisfied having their process be proof enough that they care about speed and are moving quickly.\n\nAnd, yet, these teams are likely not measuring any kind of speed.\n\nOr worse, they are using metrics more likely to lead to dysfunction than speed."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "And, yet, these teams are likely not measuring any kind of speed.\n\nOr worse, they are using metrics more likely to lead to dysfunction than speed.\n\nMary and Tom Poppendieck, who popularized the idea of applying lean manufacturing principles to software engineering, discuss this phenomenon, specifically for Cycle Time, in their book Lean Software:\n\n\u201cSoftware development managers tend to ignore Cycle Time, perhaps because they feel that they are already getting things done as fast as they can.\n\nIn fact, reducing batch sizes and addressing capacity bottlenecks can reduce Cycle Time quite a bit, even in organizations that consider themselves efficient already.\u201d\n\nIn other words, rather than trust your gut that you\u2019re moving as fast as possible, why not supplement your understanding with a quantitative measure?\n\nAs with other metrics, tracking Cycle Time can reduce bias and provide a trustworthy baseline from which to drive improvement.\n\nBack To: What is the Definition of Cycle Time?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "As with other metrics, tracking Cycle Time can reduce bias and provide a trustworthy baseline from which to drive improvement.\n\nBack To: What is the Definition of Cycle Time?\n\nSince the term originates in Lean Manufacturing, where \u201cstart\u201d and \u201cend\u201d can be unambiguously defined, it\u2019s not always obvious how to apply it to software engineering.\n\nStarting at the end of this process, the delivery, is in some ways the easiest: delivery of software is the deployment of production code.\n\nThe beginning of the process is more difficult to define.\n\nAsking when software development begins is an almost philosophical question.\n\nIf you\u2019re doing hypothesis-driven product work and are testing your hypothesis, has work started?\n\nIn his book Developing Products in Half the Time, to illustrate the inherent ambiguity, Donald Reinertsen calls this phase the \u201cfuzzy front end.\u201d\n\nThis is why we tend to see development broken into two phases, design and delivery, where design encapsulates activities prior to writing code."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "Since the delivery phase has a more regular and reliable cadence \u2014 and is more completely within engineering\u2019s control \u2014 it\u2019s better suited to regular observation and measurement.1\n\nHere at Code Climate, when we discuss Cycle Time, we\u2019re usually referring to \u201cCode Cycle Time,\u201d which isolates the delivery phase of the software development process.\n\nWith that in mind, we define Cycle Time as the period of time during which code is \u201cin-flight.\u201d That period may be slightly different depending on an organization\u2019s workflow.\n\nSome engineering teams might define Cycle Time as the time between a developer\u2019s first commit in a section of code and when that code is deployed, while others will find it more useful to track the time from when a commit is first logged to when it is merged."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "Ultimately, the goal is to quantify and understand the speed at which an engineering team can deliver working software, so the exact definition of Cycle Time you use is not important, as long as you\u2019re consistent across your organization.\n\nThe key to measuring Cycle Time is the directionality of the metric.\n\nYou want an objective picture of how quickly your engineering department is moving, whether it\u2019s getting faster or slower, and how specific teams compare to the rest of the department or others in your industry.\n\nWhat Can Measuring Cycle Time Do for You?\n\nMeasuring and improving Cycle Time will boost your engineering team\u2019s efficiency.\n\nYou\u2019ll deliver value to your users more quickly, which will shorten the developer-user feedback loop and can help you stay ahead of your competition.\n\nIn addition, as you remove roadblocks from your development process, you\u2019ll also reduce sources of frustration for your developers."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "In addition, as you remove roadblocks from your development process, you\u2019ll also reduce sources of frustration for your developers.\n\nThis can have a positive impact on developer happiness and will set in motion a Virtuous Circle of Software Delivery, in which developers reap the benefits of optimization and are motivated to find even more ways to improve.\n\nWhat\u2019s Next?\n\nHopefully, you now have a better understanding of what Cycle Time is and why it matters.\n\nAs a next step, you\u2019re probably starting to think about ways to effectively minimize Cycle Time.\n\nWe took a data-driven approach to this question and analyzed thousands of pull requests across hundreds of teams.\n\nThe results were interesting.\n\nWe turned that data into a tactical resource, The Engineering Leader\u2019s Guide to Cycle Time, which offers a research-backed approach to minimizing Cycle Time."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "The results were interesting.\n\nWe turned that data into a tactical resource, The Engineering Leader\u2019s Guide to Cycle Time, which offers a research-backed approach to minimizing Cycle Time.\n\nIf you\u2019re interested in learning more about the origins of Cycle Time in Software Engineering, Mary and Tom Poppendieck\u2019s book Lean Software, Chapter 4 \u201cDeliver as Fast as Possible\u201d is a great starting point.\n\nIf you would like to start tracking your own Code Cycle Time, sign up for a 14-day free trial of our engineering analytics platform, Velocity.\n\nRelated Resources\n\nWhat Data Science Tells Us About Shipping Faster\n\nThe Engineering Leader\u2019s Guide to Cycle Time\n\nRound Table: Perspectives on Cycle Time\n\nCycle Time in Lean Manufacturing\n\n\u201cCycle Time\u201d \u2013 A breakdown of Cycle Time into component parts\n\n\u201cTakt Time \u2013 Cycle Time\u201d \u2013 Describes some fundamental misconceptions around these terms.\n\n(Fittingly, the post includes a now 8-year running comment thread.)"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "(Fittingly, the post includes a now 8-year running comment thread.)\n\n\u201cHow to Measure Cycle Times \u2013 Part 1\u201d\n\n\u201cHow to Measure Cycle Times \u2013 Part 2\u201d\n\nCycle Time in Software Engineering\n\nLead time versus Cycle Time \u2013 Untangling the confusion\n\nThe difference between Cycle Time and Lead Time\u2026 and why not to use Cycle Time in Kanban\n\nMeasuring Process Improvements \u2013 Cycle Time?\n\nThe Five Best Metrics You\u2019ve Never Met\n\nRelated Terminology\n\nTakt Time\n\nLead Time\n\nWait Time\n\nMove Time\n\nProcess Time\n\nLittle\u2019s Law\n\nThroughput\n\nWIP\n\nThank you to\n\nAccelerate: Building and Scaling High Performing Technology Organizations\n\n, by Nicole Forsgren, Jez Humble and Gene Kim for the Donald Reinertsen reference, as well as the articulation of software development as having two primary phases (Chapter 2, p. 14 \u201cMeasuring Software Delivery Performance\u201d).\n\nAccelerate is an excellent resource for understanding the statistical drivers behind software engineering."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/software-engineering-cycle-time", "content": "Accelerate is an excellent resource for understanding the statistical drivers behind software engineering.\n\nWe were proud to have Nicole Forsgren speak at our Second Annual\n\nCode Climate Summit\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/step-up-your-standups", "content": "Standups are a cornerstone of the Agile process and an essential ceremony in many engineering organizations.\n\nA great way to facilitate knowledge sharing, team cohesion, collaboration, and more, standups can help keep projects on track and clear of roadblocks.\n\nHowever, standups as we know them are in need of some TLC.\n\nWhen you meet with your team every day and ask the same questions, it can get monotonous, and engagement may be lackluster.\n\nTo step up your team\u2019s standups, you\u2019ll need to move beyond the typical standup questions.\n\nAn Engineering Intelligence platform like Velocity can help you do that, making it possible to get your status updates before standup, so you can spend the meeting digging into at-risk work, addressing potential blockers, and helping to drive work forward."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/step-up-your-standups", "content": "Velocity\u2019s Workstreams aggregates data from DevOps and project management tools, acting as a single pane of glass for engineering managers to gain visibility into their team\u2019s sprints and help them better prepare for the day ahead.\n\nWithout the help of an EI platform, your standup likely looks something like this:\n\nEngineering Manager to Dev: What will you do today?\n\nDev: Today I\u2019m finishing up the Health Check feature.\n\nDev2 had been working on it all week, but they passed it on to me before taking their vacation.\n\nShould have everything I need.\n\nEngineering Manager: Great, let me know if there\u2019s anything you\u2019re missing.\n\nShort and perfunctory, this conversation only skimmed the surface.\n\nWith the help of Workstreams, an engineering manager can more clearly identify at-risk work and potential blockers before standup, so they know exactly what to ask to get past surface-level updates.\n\nThat means standup can look more like this:\n\nDev: Today I\u2019m finishing up the Health Check feature."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/step-up-your-standups", "content": "That means standup can look more like this:\n\nDev: Today I\u2019m finishing up the Health Check feature.\n\nDev2 had been working on it all week, but they passed it on to me before taking their vacation.\n\nShould have everything I need.\n\nEngineering Manager: Ok, I also see there were multiple discussions on the feature that required you to make a change in the code two weeks ago.\n\nDid the requirements change?\n\nDev: Actually, there have been bugs reported so I am adjusting my approach.\n\nEngineering Manager: Ok, let\u2019s grab some time this morning to walk through your approach step-by-step as this has been a tricky part of the codebase.\n\nBecause the manager came to standup with context on the PR in question, they were able to dig deeper and ask questions that uncovered potential risks.\n\nBoth parties were then able to walk away from standup with clear objectives and next steps to keep the sprint healthy and on track."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/step-up-your-standups", "content": "Both parties were then able to walk away from standup with clear objectives and next steps to keep the sprint healthy and on track.\n\nThere are many ways to structure standups, but one fact always rings true \u2014 the more prepared you are walking into standup, the more effective your meeting will be.\n\nLearn more about how Workstreams can help you step up your standups with our on-demand webinar.\n\nPacked with helpful guidance, the webinar will show you how to take your daily check-ins from average to amazing.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-asking-developers-three-standup-questions", "content": "Every day, engineering leaders ask their team members the same three standup questions to ensure the software development engine hasn\u2019t come to a complete stop.\n\nIt\u2019s excruciatingly boring to be asked the same questions day in and day out, and it\u2019s not a productive use of engineers\u2019 time.\n\nThese questions \u2014\u00a0the \u201care things moving?\u201d questions \u2014\u00a0can be answered with the help of an Engineering Intelligence Solution, like Code Climate Velocity, freeing up valuable standup time for an even more impactful set of questions, the \u201chow can we move faster?\u201d questions.\n\nThese are the questions that dig deeper into a team\u2019s processes and practices, helping leaders identify opportunities for improvement and drive excellence on their teams.\n\nIn this two-post series, I\u2019ll explain how data can help you answer the classic standup questions, then walk through the \u201cnext three questions,\u201d that every engineering leader should be asking to level up their standups \u2014 and level up their team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-asking-developers-three-standup-questions", "content": "First, the classic questions:\n\nWhat did you do yesterday?\n\nWhat will you do today?\n\nWhat (if anything) is blocking your progress?\n\nLet\u2019s dig in.\n\nStandup questions one and two: What did you do yesterday?\n\nWhat will you do today?\n\nThese questions are meant to help you understand what progress your team has made so far, so you can assess your team\u2019s output within the context of your current sprint or cycle.\n\nIn comparing what\u2019s been done so far to what\u2019s planned, you can get a sense of the sprint\u2019s status.\n\nRather than ask your developers for a rundown of yesterday\u2019s completed tasks and today\u2019s to-do list, let the data speak for itself.\n\nYou could do this by running a Git diff for every branch, or you could let a tool like Velocity do the work, drawing connections between Commits and Issues and providing an accurate view of what your team is working on.\n\nThis can also help you check that the team is prioritizing appropriately, and working on the most impactful Issues."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-asking-developers-three-standup-questions", "content": "This can also help you check that the team is prioritizing appropriately, and working on the most impactful Issues.\n\nYou can also review the Issues that have yet to be started to determine whether the team is saving the trickier work for last.\n\nThis isn\u2019t necessarily a problem, but it could indicate that a slowdown is to come, and may be worth discussing during standup.\n\nOf course, data won\u2019t tell you for sure whether your team will hit its deadline, but it will give you a big picture view of how your sprint is progressing and where the team might need your help.\n\nStandup question three: What (if anything) is blocking your progress?\n\nOnce you have a high-level understanding of the progress of your current iteration, you\u2019ll want to know if there\u2019s anything that might throw it off track.\n\nDevelopers might be hesitant to call out blockers, preferring instead to solve problems themselves, or they may lack the context to foresee potential slowdowns."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-asking-developers-three-standup-questions", "content": "Developers might be hesitant to call out blockers, preferring instead to solve problems themselves, or they may lack the context to foresee potential slowdowns.\n\nData addresses both of those problems, though the relevant information has historically been harder to find, as it\u2019s spread throughout your VCS and project management tools.\n\nThis is where an Engineering Intelligence Solution is particularly valuable \u2014 Velocity can even send you a customized alert when a particular unit of work is stuck or at risk.\n\nWork that is stuck may have gone a few days without a Commit, or may be marked \u201cIn Progress\u201d in Jira for an atypical length of time.\n\nWork that is at risk is work that is not moving through the software development pipeline as expected, and which may become a bottleneck if not addressed."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-asking-developers-three-standup-questions", "content": "Work that is at risk is work that is not moving through the software development pipeline as expected, and which may become a bottleneck if not addressed.\n\nThough the signs of risk vary from team to team, Pull Requests with high levels of Rework, or many comments or Review Cycles are worth further investigation, as are PRs that haven\u2019t been picked up for review in a timely fashion.\n\nData can also help you identify possible blockers in developers\u2019 collaboration patterns.\n\nEvery engineer will have their own opinion of how the team is working, and though it\u2019s important to understand how engineers are feeling about the current state of collaboration on the team, it\u2019s critical to check any hidden biases with objective data.\n\nStart by looking at the distribution of work across the team.\n\nIs there someone who is overloaded, or someone who isn\u2019t getting work?\n\nVelocity makes this easy with a Work in Progress metric that tells you how much each engineer is working on at a given time."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-asking-developers-three-standup-questions", "content": "Is there someone who is overloaded, or someone who isn\u2019t getting work?\n\nVelocity makes this easy with a Work in Progress metric that tells you how much each engineer is working on at a given time.\n\nThen, to get a sense of the team\u2019s broad collaboration patterns, it can be helpful to determine how many engineers are working on the same Issue or Pull Request.\n\nThis way, you can be aware of a possible \u201ctoo many cooks\u201d situation, or dependencies that may impact delivery.\n\nSo, what standup questions should you be asking instead?\n\nWhen you enter standup with this information, you can skip past the classic three standup questions in favor of three more impactful questions:\n\nHow can I help remove distractions?\n\nHow can the team help resolve that risk?\n\nAre we working on the right things (see what people are working on, blend that with your context)?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-asking-developers-three-standup-questions", "content": "How can the team help resolve that risk?\n\nAre we working on the right things (see what people are working on, blend that with your context)?\n\nThe answers to these questions will help you move beyond a short-term focus on getting work done and help you get to the next level, where you\u2019re focused on helping your team excel.\n\nFind out how in my next post.\n\nThis is the first post in a two-part series.\n\nRead the second post here.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "This post is the third article in our Tactical Guide to a Shorter Cycle Time five-part series.\n\nRead the previous post\u00a0here.\n\nEvery hour that a Pull Request spends awaiting review represents waste\u2013but also threatens to slow down several subsequent lines of work.\n\nAn engineer who\u2019s waiting on a code review will move onto the next Pull Request to feel productive until it too gets stuck in the queue.\n\nIf this pattern continues, reviewers will be faced with a daunting stockpile of unreviewed Pull Requests, and each developer will be juggling three or four simultaneous lines of work.\n\nCode review will become a universally painful experience.\n\nA poor Time to First Review (the time it takes for a reviewer to pick up a review) can jeopardize the effectiveness of your entire code review process.\n\nHere\u2019s what you can do to mitigate the first significant bottleneck in the software delivery pipeline."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "Here\u2019s what you can do to mitigate the first significant bottleneck in the software delivery pipeline.\n\nBenchmarking Success\n\nFirst, you\u2019ll want to define what a \u201clow\u201d Time to First Review means, across the industry and in the context of your organization.\n\nIn our analysis of over 19k contributors\u2019 data we uncovered the following benchmarks for Time to First Review:\n\nThe top 25% of engineering organizations get Pull Requests reviewed in under 4 hours.\n\nThe industry median is about one day.\n\nThe bottom 25% take over a day and a half.\n\nYou want to lower this metric as much as you can, without it coming at a cost to the focus and productivity of the reviewers.\n\nThis delicate tradeoff means that you\u2019ll want to understand the dynamics of your specific team before setting metrics-based goals.\n\nFirst, look at this metric for your organization and team-by-team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "This delicate tradeoff means that you\u2019ll want to understand the dynamics of your specific team before setting metrics-based goals.\n\nFirst, look at this metric for your organization and team-by-team.\n\nOnce you know what\u2019s \u201cnormal\u201d for your organization, you can further investigate two kinds of outliers:\n\nTeams with fast reviewers, who have found a way to create an effective process and juggle a difficult team dynamic.\n\nTheir processes may be worth sharing with the rest of the organization.\n\nTeams with inconsistent reviewers, who are frequently blocked and struggling to get to code reviews quickly.\n\nFrom here, dive into individual and team metrics to better understand precisely why your Time to First Review is high or inconsistent.\n\nTime to First Review Diagnostics\n\nBefore diagnosing this particular phase of the software delivery process, make sure that it\u2019s not a symptom of an earlier process."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "Time to First Review Diagnostics\n\nBefore diagnosing this particular phase of the software delivery process, make sure that it\u2019s not a symptom of an earlier process.\n\n(Read our previous post about\u00a0leveraging Time to Open\u00a0to better understand how inefficiencies during the first stage can have significant, negative downstream effects.)\n\nIf everything earlier in the PR process is streamlined, however, there are three data points you can look at to fully diagnose this slowdown.\n\nPull Request Size\n\nPull Request Size is a\u00a0byproduct of a high Time to Open and usually points to inconsistencies with how your team manages Pull Request scope.\n\nFor many teams, opening a Pull Request doesn\u2019t indicate that the changeset is ready for review.\n\nTeam members tend to continue making changes before the Pull Request gets into the hands of a reviewer."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "For many teams, opening a Pull Request doesn\u2019t indicate that the changeset is ready for review.\n\nTeam members tend to continue making changes before the Pull Request gets into the hands of a reviewer.\n\nAt this time, a Pull Request can grow, deterring reviewers from picking it up because either A) they aren\u2019t sure if it\u2019s ready, or B) because it has grown in complexity and is, therefore, more difficult to review.\n\nVelocity\u00a0surfaces the oldest and most active open PRs, so your frontline managers can mitigate issues before they grow out of hand.\n\nEncourage managers to check in on individual Pull Requests that have been open for longer than a day (but not yet reviewed).\n\nIf they find patterns among teams or individuals that indicate a lack of scope management, they\u2019ll want to coach their teams on how to control the scope from the onset of the changeset, by, for instance, giving PRs titles that are discrete and specific."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "Review Workload Balance\n\nLook at Review Involvement (i.e., the percent of reviews that reviewers participate in) across the team to understand how the burden of code review is distributed.\n\nIf the same few people are handling all the reviews, work will start piling up, creating a lasting bottleneck.\n\nVelocity\u00a0shows how involved each team member is on code reviews, next to the outcomes of those reviews.\n\nPoor distribution may represent a difference of enthusiasm about code review.\n\nSome team members may be more keen to pick up reviews, while others consistently prioritize their own coding.\n\nThis issue can be solved with automated code review assignments or a re-emphasis on code review across the team.\n\nPoor distribution of code reviews can also represent a lack of confidence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "This issue can be solved with automated code review assignments or a re-emphasis on code review across the team.\n\nPoor distribution of code reviews can also represent a lack of confidence.\n\nThe proper response will vary from team to team, but you\u2019ll want to make sure there\u2019s clarity around the expectations of a code review and training on how new team members can ramp up and start participating more deeply in the team-wide collaborative processes.\n\nReview Speed\n\nUnlike Time to First Review, which is used to understand team collaboration patterns, Review Speed is an individual metric, indicating how long each person takes to leave a review.\n\nReview Speed helps you understand how well your team is prioritizing code review.\n\nVelocity\u00a0can show you how any metric is trending as your team scales or changes.\n\nA high or inconsistent Review Speed can point to cultural or technical blockers.\n\nA cultural blocker can only be uncovered through conversations with specific team members and managers."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "A high or inconsistent Review Speed can point to cultural or technical blockers.\n\nA cultural blocker can only be uncovered through conversations with specific team members and managers.\n\nIf you find that a team or a team member is not prioritizing code review, work with them to reprioritize, along with their other responsibilities.\n\nEncourage team members to optimize for this metric until Cycle Time decreases and Pull Request authors are quickly unblocked.\n\nA technical barrier at this stage usually indicates that there may be a lack of tooling.\n\nTeam members, while working in their individual environment, don\u2019t have the signals or alerting systems that inform them of Pull Requests ready for review.\n\nStart Code Review on the Right Foot\n\nCode Review is one of the most difficult processes to get right on a software development team.\n\nA different balance between thoroughness and speed exists on most teams\u2013 yet few have a solid idea of what their code review objectives should be."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "A different balance between thoroughness and speed exists on most teams\u2013 yet few have a solid idea of what their code review objectives should be.\n\nAdding an endless queue of unreviewed Pull Requests to this equation makes the entire process unduly more difficult.\n\nIf Time to Review is a problem, a small reprioritization or retooling may be necessary\u2013 but the effects will be well worth it.\n\nTo learn where your team should focus next, look out for the upcoming articles in our Tactical Guide to a Shorter Cycle Time five-part series:\n\nPart I:\u00a0The Virtuous Circle of Software Delivery\n\nPart II:\u00a0The Single Greatest Lever in Shortening Cycle Time\n\nPart III:\u00a0How to Stop Code Review from Bottlenecking Shipping\n\nPart IV:\u00a0Keep Code Review from Being a Waste of Everyone\u2019s Time\n\nPart V: The Last Mile to True Continuous Delivery\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-code-review-bottlenecking", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "It\u2019s important for a manager to know what their team members are working on, and to understand how that work is going.\n\nStill, how you get that information matters.\n\nTurning every standup into a status update or constantly checking in with engineers can be disruptive to developers\u2019 flow, and can make your team members feel like you\u2019re micromanaging their every move.\n\nStatus updates of this kind are also not productive for an individual contributor \u2014 you may need visibility into your team\u2019s workflow, but looping you in isn\u2019t providing value to your engineers.\n\nWhen your team stops what they\u2019re doing to give you basic information, they\u2019re not getting much out of the exchange.\n\nIf you get the visibility you need from data that already exists in your engineering workflow, you can dedicate your 1 on 1s, standups, and check-ins to higher-value interactions, whether that\u2019s team-building, problem-solving, innovation, or professional development."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "Your team will be happier and more productive, and you\u2019ll be able to use your meetings and conversations to make a bigger impact on your organization \u2014 and to empower your developers to do the same.\n\nGet Visibility With Data, Not Check-Ins\n\nOf course, you still need a sense of what everyone\u2019s working on and how it\u2019s going.\n\nGet that basic information from a data-based platform like Velocity, which gathers key information from your existing engineering workflow.\n\nYou\u2019ll be able to quickly get a sense of what each developer is working on and check that against your expectations of your team\u2019s priorities and workload.\n\nWith that information, you can determine the best course of action for supporting your team.\n\nWhen things are running smoothly, it\u2019s likely best to take a step back and let your developers manage their own work.\n\nThere may be opportunity for improvement \u2014 there always is \u2014 but that\u2019s what retros are for."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "There may be opportunity for improvement \u2014 there always is \u2014 but that\u2019s what retros are for.\n\nIf you\u2019re running effective retrospectives after each project or sprint, your team will still find opportunities to keep doing better.\n\nLook For: A low PR Cycle Time, which indicates that Pull Requests are moving through your software development pipeline quickly and efficiently.\n\nIn the middle of a sprint, however, you\u2019ll want to focus on work that isn\u2019t going as planned, rather than work that meets your expectations.\n\nWith Velocity, for example, you can easily surface at-risk Pull Requests \u2014 PRs that are exceedingly large, have been open for long periods of time, or are taking up the attention of multiple members of your team.\n\nSome PRs are naturally larger and more complex, and that\u2019s ok.\n\nBut in some cases, these characteristics are red flags, signs that your team members could use your support."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "Some PRs are naturally larger and more complex, and that\u2019s ok.\n\nBut in some cases, these characteristics are red flags, signs that your team members could use your support.\n\nIf you follow up on at-risk units of work, you\u2019re likely to find opportunities to help your team members resolve bottlenecks or tackle challenges.\n\nYou\u2019ll enter meetings already informed, and you\u2019ll be able to keep conversations focused and productive.\n\nThe Pull Requests report can help you easily surface at-risk PRs.\n\nLook For: PRs that are exceedingly large, have been open for long periods of time, or are taking up the attention of multiple members of your team.\n\n(An engineering management platform can help you easily surface at-risk PRs like these, based on information that already exists in your VCS or other engineering tools.)\n\nSome PRs are naturally larger and more complex, and that\u2019s ok.\n\nIn some cases, these characteristics are red flags."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "Some PRs are naturally larger and more complex, and that\u2019s ok.\n\nIn some cases, these characteristics are red flags.\n\nTalk to your team about any concerning PRs to determine whether your developers could use your support.\n\nUse Data Responsibly to Avoid Becoming Big Brother\n\nEven managers who barely think twice about interrupting an engineer\u2019s workday to ask for an update worry that digging into data from their engineering workflow may feel invasive.\n\nThe key to maintaining your team\u2019s trust and fostering a greater sense of autonomy lies not in whether you have access to data, but how you use it.\n\nAs a leader, it\u2019s your responsibility to cultivate a culture of transparency and safety where metrics are used responsibly and constructively.\n\nWhen Velocity customer La Haus introduced engineering metrics at their organization, CTO and Co-Founder Santiago Garc\u00eda was careful to put them in perspective: \u201cI spoke about Velocity and Cycle Time \u2014 how you measure a process, not people."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "And how you improve a process.\n\nI said to the team, \u2018I\u2019m going to start measuring the team just to measure the process and improve it.\n\nI\u2019m not measuring individuals.\u2019\u201d With this groundwork, the team could surface key information about its workflow without constant check-ins and shoulder taps.\n\nAs a result, they refined their processes and doubled their productivity, slashing their Cycle Time from 72 hours to 30 hours.\n\nVelocity can help you visualize trends in the way your team is working.\n\nWhen bringing data into your organization, it\u2019s important to remember that:\n\nData must be used with transparency.\n\nYour team members should know what information you\u2019re looking at, who else has access to it, and how you plan to use it.\n\nMake sure you communicate openly and honestly about any plans you have to introduce data, and your goals for bringing data into your organization.\n\nData should enhance, not replace conversations.\n\nData doesn\u2019t tell the whole story, and should always be viewed in context."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "Data should enhance, not replace conversations.\n\nData doesn\u2019t tell the whole story, and should always be viewed in context.\n\nUse it as a starting point for conversations, rather than using it as the basis for decisions.\n\nData provides insights about the work, not the person.\n\nEngineering is collaborative, and it\u2019s up to you to ensure no one feels personally responsible for issues or negative trends.\n\nKeep the focus on the work so your whole team can get behind improvement.\n\nData should be used constructively, not punitively.\n\nMistakes and shortfalls should be viewed as coaching opportunities, rather than occasions to take punitive action.\n\nIf you keep these principles in mind, you\u2019ll be able to use data in a way that benefits you as a leader, as well as your team members as managers and ICs.\n\nFree of unnecessary check-ins and status updates, your team members will enjoy more autonomy and have more time to focus on their work."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/stop-micromanaging-team", "content": "Free of unnecessary check-ins and status updates, your team members will enjoy more autonomy and have more time to focus on their work.\n\nTogether, you\u2019ll be able to tackle larger challenges and make an even bigger impact on your organization.\n\nTo see how Velocity can bring you the visibility you need to foster more autonomy on your team, reach out to a product specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-engineering-intelligence-managers-need-is-now-free-forever", "content": "Announcing the launch of Velocity for Teams, a new lightweight version of our flagship engineering analytics platform, designed specifically for frontline managers.\n\nManagers of smaller teams typically have a pretty good sense of what\u2019s happening on their team at a given moment.\n\nBut when you\u2019re so directly involved in the development process, it can be difficult to find time to step back and see the bigger picture:\n\nHow does this month\u2019s output compare to last month\u2019s?\n\nHow effective is your code review process?\n\nHow can you set your team members up for longterm career growth?\n\nTo keep your team continuously improving, you need a streamlined way to answer big-picture questions and check your gut instincts.\n\nAn engineering analytics platform can provide key data-driven insights to help you drive long-term improvements."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-engineering-intelligence-managers-need-is-now-free-forever", "content": "An engineering analytics platform can provide key data-driven insights to help you drive long-term improvements.\n\nWith comprehensive engineering metrics and actionable reports, you\u2019ll be able to spot potential bottlenecks as they arise, measure your team\u2019s progress towards key goals, and have more focused, data-driven conversations.\n\nThat\u2019s why we\u2019re excited to announce that teams of up to 10 developers can now use the Velocity platform for free, with no trial period or end date.\n\nWhat\u2019s Inside Velocity for Teams\n\nVelocity for Teams offers a limited selection of some of our most popular reports, specifically geared towards engineering managers.\n\nReports like the Activity Log make it possible to visualize all of the work that\u2019s occurring on your team, so you can balance work between engineers, and ensure each team member\u2019s workload meets your expectations."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-engineering-intelligence-managers-need-is-now-free-forever", "content": "With a clear picture of all engineering activity, you\u2019ll be able to identify developers who may be having trouble with a particular unit of work, or those who are at risk of burnout.\n\nThe Work in Progress report can save you up to 30 minutes every day by surfacing all at-risk Pull Requests, so you don\u2019t have to sift through all ongoing work in your VCS to see where your team might be stuck.\n\nThe Targets report allows you to action what you learn elsewhere in the platform.\n\nYou can set customizable goals, and track your team\u2019s progress over time.\n\nIt can also point you towards instances where your team fell short of a given goal, so you can have more focused team discussions about what went wrong and what could be improved.\n\nEvery engineering team is different, but each one can benefit from the thoughtful application of engineering analytics."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-engineering-intelligence-managers-need-is-now-free-forever", "content": "Every engineering team is different, but each one can benefit from the thoughtful application of engineering analytics.\n\nWith 7 reports and over 40 key metrics, Velocity for Teams provides visibility into your development pipeline, giving you actionable information you can use to drive conversations in stand-ups and retros, coach junior developers, and improve Continuous Delivery processes.\n\nSign up for Velocity, now free for teams of less than 10 developers, and see what metrics can do for your organization.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "When your team is building a software product, the majority of the work that they do is invisible.\n\nAs a manager, you have to rely on in-person cues for blocked work or frustrated engineers.\n\nWhen they move to a remote workflow\u2014your team also becomes invisible, and all those critical signals are dropped.\n\nIn-person, you might notice:\n\nNonverbal clues during stand-ups or retros\n\nFrequent interruptions as developers are pulled into meeting after meeting\n\nTension between team members as they work through problems\n\nActing on these signals is one of the most important ways you can help your team.\n\nYou might say: \u201cI noticed you seem frustrated each time you worked with Jack\u2014is everything okay?\u201d Or \u201cI noticed that you\u2019ve been helping the marketing team a lot, do you have too much on your plate right now?\u201d\n\nWhen you transition to a remote workflow, you lose indicators that anyone is stuck, demotivated, or overworked."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "To adjust, you have to find new ways to broaden the now-limited purview that remote work allows.\n\nSignals to Remain Context-Aware From Afar\n\nWhen thinking about productivity or output, many software leaders think in terms of features or story points.\n\nThey get a general sense of how things are moving (or not moving) based on whether these features are getting completed.\n\nBut these metrics are lagging indicators, and they\u2019re not diagnostic.\n\nIf you know that you\u2019ve shipped fewer features one sprint than you did in the previous, you have no insight into what you can do to improve things.\n\nFortunately, we can derive much more granular signals for the speed and effectiveness of software development from the systems in which engineers already work.\n\nData from how a developer works in their version control system, such as Commit Volume, Code Churn, or Pull Request Cycle Time, better clues you into how your team is working in real-time."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "Data from how a developer works in their version control system, such as Commit Volume, Code Churn, or Pull Request Cycle Time, better clues you into how your team is working in real-time.\n\nThese metrics are imperfect (as all metrics are), but they give you much more to work with in terms of diagnosing process problems within your newly-distributed workflow.\n\nBelow, we\u2019ve recommended a set of metrics that you can look at on a daily, weekly, and monthly basis to stay connected with how your team is working.\n\nDaily Signals for Stuck Work\n\nThe most imminent threat to an efficient and happy remote team is stuck work.\n\nAn engineer might be stuck because they are unsure of how to implement a change, because they\u2019re unfamiliar with a portion of the codebase or for a number of other reasons.\n\nAny unit of work that isn\u2019t moving through the Software Delivery Process quickly enough is a signal for you to check in.\n\nLook out for:\n\nInfrequent pushes: Are team members working incrementally?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "Any unit of work that isn\u2019t moving through the Software Delivery Process quickly enough is a signal for you to check in.\n\nLook out for:\n\nInfrequent pushes: Are team members working incrementally?\n\nAre they working on a particularly tough portion of the codebase?\n\nRework: Are team members reworking the same lines of code over and over again?\n\nIs there clear communication surrounding feature implementation?\n\nLong-running Pull Requests: Are there Pull Requests that have been open for more than three business days?\n\nIs this causing multi-tasking?\n\nPull Requests with 3+ participants: Is a single Pull Request taking up the attention of several engineers who may be in disagreement?\n\nPull Requests stuck in code review: Are there Pull Requests that have been passed back and forth between the reviewer and the author several times?\n\nVelocity shows all work in progress.\n\nSee at-a-glance the Pull Requests that are most likely to impede your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "Velocity shows all work in progress.\n\nSee at-a-glance the Pull Requests that are most likely to impede your team.\n\nIf you look at these signals with your team, you\u2019ll have a shared understanding of how things are moving and where someone might be stuck.\n\nThis data will take the pressure off developers to raise their hand during daily stand-ups when something\u2019s off track, and enable you, as a manager, to know when you can step in and help.\n\nWeekly Signals for Goal Setting\n\nOnce you\u2019ve started tracking daily signals to keep your team on track, you can take a step back and start looking at how your engineers are working.\n\nIf individual engineers are spending days working through a problem on their individual device, then opening huge Pull Requests that are perpetually getting stuck in the review process, your team will constantly feel stuck and frustrated.\n\nAgile and Continuous Delivery workflows demand that team members commit frequently, work in small batches, and limit work in progress."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "Agile and Continuous Delivery workflows demand that team members commit frequently, work in small batches, and limit work in progress.\n\nThese habits set in motion what we call the Virtuous Circle of Software Delivery:\n\nBuilding these habits is crucial to minimize the risk associated with merging a PR and decrease the chances that an individual unit of work will get stuck in the process.\n\nFor this, we recommend working with team members to set up process SLAs for good collaborative practices every week.\n\nThen, during retros and 1:1s, developers can work through concrete examples of when something went off track.\n\nYou can set targets for things like:\n\nPull Request Success Rate: Can we agree that 95% of PRs should be successfully merged?\n\nWe\u2019ll investigate PRs that were closed or abandoned.\n\nPull Request Time to Review: Can we agree to get to code reviews within 8 hours for 80% of Pull Requests?\n\nWe\u2019ll look deeper into PRs that couldn\u2019t be reviewed quickly."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "Pull Request Time to Review: Can we agree to get to code reviews within 8 hours for 80% of Pull Requests?\n\nWe\u2019ll look deeper into PRs that couldn\u2019t be reviewed quickly.\n\nPull Requests Review Cycles: Can we agree to keep Review Cycles under 2 for 95% of Pull Requests?\n\nWe\u2019ll look into any PRs that get passed back and forth between author and reviewer multiple times.\n\nWorkload Balance: Can we agree that 70% of the work should be done by at least 50% of the team?\n\nWe\u2019ll investigate deeper if just a few individuals seem to be doing most of the work.\n\nVelocity\u2019s Target feature lets you set SLAs to help hold your team accountable to their goals.\n\nNaturally, you don\u2019t need to look at all of these metrics right away\u2014just pick one or two that represent commonly reported issues.\n\nSelecting a granular metric, like Workload Balance, will be a much more effective indicator of what\u2019s going amiss than a metric like Features Completed."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "Selecting a granular metric, like Workload Balance, will be a much more effective indicator of what\u2019s going amiss than a metric like Features Completed.\n\nOver time, your team can build habits that minimize the opportunity for work to get stuck and slow down the team.\n\nMonthly Signals for Continuous Improvement\n\nOnce you\u2019ve identified signals that can point you towards daily and weekly improvement opportunities, you\u2019ll want to start looking at your processes end-to-end to ensure that they\u2019re working for, not against, your team members.\n\nFirst, you\u2019ll want to make sure your processes work.\n\nIf you\u2019re working in a traditional Git workflow, you\u2019ll want to make sure that PRs are moving along the \u201chappy path\u201d from Open to Reviewed to Approved to Merged.\n\nAny PRs that skip steps are working outside your process and represent opportunities for deeper investigation.\n\nVelocity lets you visualize the journey of your Pull Requests from open to merged."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "Any PRs that skip steps are working outside your process and represent opportunities for deeper investigation.\n\nVelocity lets you visualize the journey of your Pull Requests from open to merged.\n\nBelow, you can see metrics that represent constituents of this journey to better diagnose slowdowns.\n\nNext, you\u2019ll want to see how well this process is enabling a low time-to-market.\n\nIf it takes days or weeks for changes to get into the hands of customers, your team will have a hard time quickly mitigating issues in production, and, ultimately, keeping up innovation.\n\nFor this, you\u2019ll want to keep an eye on your team\u2019s delivery Cycle Time, or how long, on average, it takes PRs to go from a developer\u2019s laptop to being merged to production.\n\nA Cycle Time that\u2019s short and consistent is an indicator that your team is working with little friction, and your processes are enabling rapid innovation.\n\nIf your Cycle Time is spikey, you\u2019ll know to look into the units of work that make up a particularly high week."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "If your Cycle Time is spikey, you\u2019ll know to look into the units of work that make up a particularly high week.\n\nIf your Cycle Time seems consistently high, you\u2019ll want to break it up into components to see, specifically, which processes or practices are dragging down your speed.\n\nWe recommend looking at:\n\nTime to Open: How much time passes between the earliest commit and the opening of a Pull Request?\n\nTime to First Review: How much time passes between when a PR is opened and when it is first reviewed?\n\nTime to Merge: How much time passes between when a PR is opened and when it is merged to production?\n\nComparing these side by side will help you see where in your process your developers are being slowed down.\n\nWhen your team moves the needle and improves Cycle Time, it means you\u2019re working together to boost the efficiency of the development process and to accelerate innovation."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "When your team moves the needle and improves Cycle Time, it means you\u2019re working together to boost the efficiency of the development process and to accelerate innovation.\n\nIt\u2019s important to communicate and celebrate success surrounding this metric to encourage continuous improvement on your team.\n\nRemote Engineers Deserve Great Leaders\n\nAn unexpected transition to remote work is one of the most trying experiences for many software engineers.\n\nThe already-isolating job of writing code becomes even harder when team members can\u2019t chat or take breaks together.\n\nLeadership that is disconnected or not aware of all the challenges that they\u2019re facing can be the final nudge that can disengage a team member.\n\nFold in just a few extra signals to stay aligned with engineers and lend a hand when they need it most.\n\nWe\u2019ve worked with many organizations to help them smooth the transition from on-site to remote workflows."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-essential-data-for-leading-a-remote-engineering-team", "content": "We\u2019ve worked with many organizations to help them smooth the transition from on-site to remote workflows.\n\nTo find out how you can use metrics to help your team meet their goals, request a free demo of Code Climate Velocity.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-fallacy-of-process", "content": "Processes are essential for effective management.\n\nThey keep people in sync, making it possible for team members to come together and achieve a shared goal.\n\nBut they\u2019re also dangerous.\n\nProcesses can create the illusion that things are running smoothly because they\u2019re moving along according to the shared understanding of how they\u2019re \u201csupposed to\u201d run.\n\nThis is the Fallacy of Process \u2014 the idea that by adding consistency and predictability to a shared workflow, a given process is inherently valuable.\n\nToo often, process becomes canon.\n\nA team develops an effective way of doing something, then returns to that framework indefinitely, long past its expiration date.\n\nAs processes grow stale, they become red tape, increasing friction rather than removing it.\n\nThat friction is more than just a hassle; it can be incredibly expensive \u2014 inefficiencies result in lost productivity, and frustrated developers are more likely to seek new roles elsewhere."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-fallacy-of-process", "content": "That friction is more than just a hassle; it can be incredibly expensive \u2014 inefficiencies result in lost productivity, and frustrated developers are more likely to seek new roles elsewhere.\n\nJust as a good process can multiply your team\u2019s productivity, a bad, broken, or outdated process can have a compounding effect, costing your department more than any line item on its budget.\n\nOn their podcast, Rands and co-host Lyle Troxell, Senior Software Engineer at Netflix, propose the idea that every process lives somewhere on a spectrum between total entropy and complete control.\n\nFor a process to be valuable, it needs to live somewhere between the two extremes.\n\nThey suggest that the problem with process starts with attitude, and they recommend that managers:\n\nTreat each process like a living, breathing thing.\n\nRecognize that just because something works well now doesn\u2019t mean it will in the future.\n\nWork to understand the \u201cwhy\u201d of each process \u2014 and include it in documentation."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-fallacy-of-process", "content": "Recognize that just because something works well now doesn\u2019t mean it will in the future.\n\nWork to understand the \u201cwhy\u201d of each process \u2014 and include it in documentation.\n\nIf it\u2019s difficult to articulate why something is done a certain way, it may be time for a change.\n\nEvaluate processes frequently, and improve them when necessary.\n\nManagers at all levels would do well to heed this advice.\n\nBut it can be difficult to identify sources of friction and honestly evaluate processes when you\u2019re not the one tasked with implementing them.\n\nStill, it\u2019s essential \u2014 the farther a broken process strays towards one end of the spectrum, the more it\u2019s likely to cost you.\n\nSo, as a leader looking to evaluate and optimize your team\u2019s processes, where should you start?\n\nCreate a Mental Model.\n\nA mental model can help you get your bearings.\n\nStart big \u2014 map out how work should flow through your software development pipeline, for instance \u2014 and then share that model with your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-fallacy-of-process", "content": "A mental model can help you get your bearings.\n\nStart big \u2014 map out how work should flow through your software development pipeline, for instance \u2014 and then share that model with your team.\n\nSolicit their feedback, and pay careful attention to any points of confusion or disagreement.\n\nIf your mental model doesn\u2019t align with your team\u2019s assumptions, it may indicate that a process is broken or that your documentation needs to be improved.\n\nUse Data to Check Your Expectations.\n\nOnce your mental model reflects your team\u2019s understanding of how things work, you\u2019ll need to confirm that those expectations are in line with reality.\n\nEngineering metrics are a powerful way to get that gut-check; objective measurements allow you to test your hypotheses about how things are going.\n\nWhen a metric doesn\u2019t align with your expectations, it\u2019s a sign that you should dig deeper and get more context from your team \u2014 you may find a process that\u2019s ready for a refresh.\n\nMaximize Your Impact."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-fallacy-of-process", "content": "When a metric doesn\u2019t align with your expectations, it\u2019s a sign that you should dig deeper and get more context from your team \u2014 you may find a process that\u2019s ready for a refresh.\n\nMaximize Your Impact.\n\nTake your list of ineffective processes, and identify the most problematic ones.\n\nWhich are the biggest sources of frustration for your team?\n\nWhich cause the biggest holdups?\n\nWhich have a cascading effect, causing more blockages down the line?\n\nThese are your most expensive points of friction and the ones you should focus on fixing first.\n\nDraw Up A New Plan, And Get Feedback.\n\nTalk to your team about your broken processes, and ask how they\u2019d fix them.\n\nEven if you think you\u2019ve found an obvious solution, be sure to get feedback \u2014 if your team isn\u2019t on board with a new process from its inception, it\u2019s more likely to become a source of friction.\n\nRepeat.\n\nProcesses are not static.\n\nThey need to evolve as the circumstances around them change."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-fallacy-of-process", "content": "Repeat.\n\nProcesses are not static.\n\nThey need to evolve as the circumstances around them change.\n\nKeep looking for ways to optimize your processes, and prevent them from becoming blockers.\n\nContinually evaluating and revamping your processes is the only way to keep them fresh and effective, and to ensure you\u2019re not paying for processes that exist for process\u2019s sake.\n\nOf course, there\u2019s a certain paradox inherent in proposing a new process for fixing old, broken processes.\n\nAdapt it, change it, and make it work for you.\n\nAnything less would just be falling prey to the Fallacy of Process.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "Engineering productivity is notoriously difficult to measure.\n\nClassic metrics tend to focus exclusively on outputs, but this approach is flawed \u2014 in software engineering, quantity of output isn\u2019t necessarily the most productive goal.\n\nQuality is an important complement to quantity, and a team that\u2019s measuring success in lines of code written may sacrifice conciseness for volume.\n\nThis can lead to bloated, buggy code.\n\nA team focused on the number of features shipped may prioritize simple features that they can get out the door quickly, rather than spending time on more complex features that can move the needle for the business.\n\nThe SPACE Framework aims to address this by replacing output-focused measurements with a more nuanced approach to understanding and optimizing developer productivity.\n\nThis research-based framework offers five key dimensions that, viewed in concert, offer a more comprehensive view of a team\u2019s status."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "This research-based framework offers five key dimensions that, viewed in concert, offer a more comprehensive view of a team\u2019s status.\n\nThese dimensions guide leaders toward measuring and improving factors that impact outputs, rather than focusing solely on the outputs themselves.\n\nImportantly, SPACE foregrounds the developer.\n\nIt recognizes that leaders must empower their team members with the ability to take ownership of their work, grow their skills, and get things done while contributing to the success of the team as a whole.\n\nWhat is the SPACE Framework?\n\nThe SPACE Framework is a systematic approach to measuring, understanding, and optimizing engineering productivity.\n\nOutlined by researchers from Github, Microsoft, and the University of Victoria, it encourages leaders to look at productivity holistically, placing metrics in conversation with each other and linking them to team goals."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "It breaks engineering productivity into five dimensions, Satisfaction and Well-being; Performance; Activity; Communication and Collaboration; and Efficiency and Flow.\n\nSatisfaction and Well-being \u2013 Most often measured by employee surveys, this dimension asks whether team members are fulfilled, happy, and practicing healthy work habits.\n\nSatisfaction and well-being are strongly correlated with productivity, and they may even be important leading indicators; unhappy teams that are highly productive are likely headed toward burnout if nothing is done to improve their well-being.\n\nOf all five SPACE dimensions, satisfaction and well-being is the hardest to quantify.\n\nObjective metrics can\u2019t directly measure developer happiness, but they can point to circumstances that are likely to cause dissatisfaction or burnout.\n\nBy viewing quantitative metrics in tandem with qualitative information and survey data, engineering leaders can better assess team satisfaction."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "By viewing quantitative metrics in tandem with qualitative information and survey data, engineering leaders can better assess team satisfaction.\n\nIn Code Climate Velocity, leaders can view engineering metrics like Coding Balance to get a sense of developer workload.\n\nCoding Balance displays the percentage of contributors responsible for 80% of your team\u2019s most impactful work.\n\nIf work is not evenly distributed, overloaded team members may be overwhelmed, while those doing less impactful work may not be challenged enough.\n\nAnother informative measure, Work in Progress PRs, offers a count of Pull Requests with activity over a 72-hour period.\n\nA high Work in Progress number could mean that developers are forced to context switch often, which can prevent developers from entering a state of flow.\n\nThe ideal number of Work in Progress PRs is usually 1-2 PRs per developer.\n\nTo get a better understanding of overall satisfaction, engineering leaders should look at both short term changes and overall trends."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "To get a better understanding of overall satisfaction, engineering leaders should look at both short term changes and overall trends.\n\nFor example, when an engineering manager at Code Climate noticed a spike in volume of PRs and reviews in a short amount of time, she took it as a sign to further investigate the workload of each developer.\n\nWhen she discovered that engineers were working overtime and on weekends in order to ship new features, she successfully advocated for extra time off to recharge and avoid potential burnout.\n\nPerformance \u2013 The originators of the SPACE Framework recommend assessing performance based on the outcome of a developer\u2019s work.\n\nThis could be a measure of code quality, or of the impact their work has on the product\u2019s success.\n\nMetrics that help evaluate performance include Defect Rate and Change Failure Rate."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "This could be a measure of code quality, or of the impact their work has on the product\u2019s success.\n\nMetrics that help evaluate performance include Defect Rate and Change Failure Rate.\n\nChange Failure Rate is a key performance metric, as it measures the percentage of deployments causing a failure in production, helping engineering leaders understand the quality of the code developed and shipped to customers.\n\nEvery failure in production takes away time from developing new features and ultimately has a negative impact on customers.\n\nWhen assessing team performance, PR Throughput is an important counterpoint to quality metrics.\n\nThis metric counts PRs merged (a bug fix, new feature, or improvement) over time, and is correlated to output and progress.\n\nTo get a full picture of performance, PR Throughput should be viewed alongside quality metrics; you\u2019ll want to ensure that your team is delivering at volume while maintaining quality."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "To get a full picture of performance, PR Throughput should be viewed alongside quality metrics; you\u2019ll want to ensure that your team is delivering at volume while maintaining quality.\n\nActivity \u2013 This dimension is most reminiscent of older measures of productivity as it refers to developer outputs like on-call participation, pull requests opened, volume of code reviewed, or documents written.\n\nStill, the framework reminds leaders that activity should not be viewed in isolation, and it should always be placed in context with qualitative information and other metrics.\n\nUseful Activity metrics to look at within Velocity include coding metrics, such as Commits Per Day, the average number of times Active Contributors commit code per coding day, and Pushes Per Day, the average number of times Active Contributors are pushing per day."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "These metrics offer an overview of developer activity so you can gauge whether or not work is balanced, if workload matches expectations, and whether delivery capacity is in line with strategic goals.\n\nIt can also be helpful to look at Deployment Frequency, which measures how often teams deliver new features or bug fixes to production.\n\nCommunication and Collaboration \u2013 The most effective teams have a high degree of transparency and communication.\n\nThis helps ensure developers are aligned on priorities, understand how their work fits into broader initiatives, and can learn from each other.\n\nProxies for measuring communication and collaboration might include review coverage or documentation quality.\n\nVelocity supports Pair Programming, which encourages collaboration.\n\nCredit can be attributed to two developers who write code in a pairing session.\n\nMetrics like\n\n, and\n\n, can help you assess the health of your collaborative code review process."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "Credit can be attributed to two developers who write code in a pairing session.\n\nMetrics like\n\n, and\n\n, can help you assess the health of your collaborative code review process.\n\nThese metrics can help identify whether your team is keeping collaboration top of mind, has enough time to review PRs, and is giving thoughtful feedback in comments.\n\nIn the SPACE framework, flow refers to a state of individual efficiency where work can be completed quickly,\n\nwith limited interruption\n\n.\n\nEfficiency is similar, but it occurs at the team level.\n\nBoth are important for minimizing developer frustration.\n\n(Though it\u2019s worth noting that when an organization has\n\ntoo much\n\nefficiency and flow, it\u2019s not always a good thing, as it may be at the expense of collaboration or review.)\n\nPerceived efficiency and flow can be important information gathered via survey, while speed metrics can capture a more objective measurement."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "Perceived efficiency and flow can be important information gathered via survey, while speed metrics can capture a more objective measurement.\n\nIn Velocity, Cycle Time is an important metric to view within the context of efficiency and flow, as well as Mean Lead Time for Changes.\n\nCycle Time, aka your speedometer, is representative of your team\u2019s time to market.\n\nA low Cycle Time often means a higher output of new features and bug fixes being delivered to your customers.\n\nCycle Time is an objective way to evaluate how process changes are affecting your team\u2019s output.\n\nOften, a high output with quality code can speak to a team\u2019s stability.\n\nMean Lead Time for Changes, which refers to DevOps speed, measures how quickly a change in code makes it through to production successfully.\n\nThis can be correlated to team health and ability to react quickly.\n\nLike Cycle Time, it can indicate whether your team\u2019s culture and processes are effective in handling a large volume of requests."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "This can be correlated to team health and ability to react quickly.\n\nLike Cycle Time, it can indicate whether your team\u2019s culture and processes are effective in handling a large volume of requests.\n\nHow can you implement the SPACE Framework?\n\nThe framework\u2019s authors caution that looking at all five dimensions at once is likely to be counterproductive.\n\nThey recommend choosing three areas that align with team priorities and company goals.\n\nWhat a team chooses to measure will send a strong signal about what the team values, and it\u2019s important to be deliberate about that decision.\n\nThey also remind leaders to be mindful of invisible work and to check for biases in their evaluations.\n\nAt Code Climate, we\u2019ve spent years helping software engineering leaders leverage engineering data to boost their teams\u2019 productivity, efficiency, and alignment.\n\nWith that experience in mind, we have a few additional recommendations:\n\nBe transparent."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "With that experience in mind, we have a few additional recommendations:\n\nBe transparent.\n\nWhen introducing data in your organization or using data in a new way, it\u2019s important to be open.\n\nMake sure your team members know what data you\u2019re looking at, how you plan to use it, and what value you hope to gain from it.\n\nPlace all metrics in context.\n\nQuantitative data can only tell you so much.\n\nIt\u2019s critical to supplement metrics with qualitative information, or you\u2019ll miss key insights.\n\nFor example, if you\u2019re measuring activity metrics and see a decrease in pull requests opened, it\u2019s important to talk to your team members about why that\u2019s happening.\n\nYou may find out that they\u2019ve been spending more time in meetings, so they can\u2019t find time to code.\n\nOr you may learn that they\u2019re coding less because they\u2019re working to make sense of the technical direction.\n\nBoth these situations may impact activity, but will need to be addressed in very different ways.\n\nWork data into your existing processes."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "Both these situations may impact activity, but will need to be addressed in very different ways.\n\nWork data into your existing processes.\n\nThe most effective way to build a new habit is to layer it onto an existing one.\n\nIf you\u2019re already holding regular 1:1s, standups, and retros, you can use them as an opportunity to present data to your team, assess progress toward goals, and discuss opportunities for improvement.\n\nBy bringing data to your meetings, you can help keep conversations on track and grounded in facts.\n\nWhy does the SPACE Framework matter?\n\nThe SPACE Framework helps engineering leaders think holistically about developer productivity.\n\nThe five dimensions serve as critical reminders that developer productivity is about more than the work of one individual, but about the way a team comes together to achieve a goal.\n\nAnd perhaps somewhat counterintuitively, understanding productivity is about more than simply measuring outputs."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/the-space-framework", "content": "And perhaps somewhat counterintuitively, understanding productivity is about more than simply measuring outputs.\n\nIn looking at multiple dimensions, teams can gain a fuller understanding of the factors influencing their productivity, and set themselves up for sustainable, long-term success.\n\nIf you\u2019re looking to implement the SPACE Framework, Velocity can help you gather critical engineering data.\n\nReach out to speak to one of our data specialists to find out how.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "This is the second post in a two-part series.\n\nRead the first post here.\n\nWhen you use an Engineering Intelligence Solution to answer the classic three standup questions, you free up your team\u2019s valuable meeting time for an even more impactful set of conversations.\n\nYou\u2019ll be able to spend less time gathering information and more time leveraging your expertise as a leader \u2014 once you\u2019re no longer using facetime to surface issues, you can actually start solving them.\n\nTo frame these conversations, I recommend a new set of questions to ask in standup meetings:\n\nHow can I help remove distractions?\n\nHow can the team help reduce risk?\n\nAre we working on the right things?\n\nHere\u2019s how to get the most out of each one.\n\nQuestion 1 to ask in standup meetings: How can I help remove distractions?\n\nTo most effectively answer this question, you\u2019ll need to come to standup prepared."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "Here\u2019s how to get the most out of each one.\n\nQuestion 1 to ask in standup meetings: How can I help remove distractions?\n\nTo most effectively answer this question, you\u2019ll need to come to standup prepared.\n\nTake a look through your Engineering Intelligence Solution and keep an eye out for patterns that might indicate your team\u2019s attention is fragmented, such as engineers who are making commits on multiple different Issues, or team members who have stopped committing for a few days.\n\nVelocity\u2019s Workstreams module offers visualizations of individual developers\u2019 coding activity, which makes these patterns particularly easy to spot.\n\nIf you notice an engineer bouncing around, committing to multiple pieces of work in a short time period, it\u2019s possible that engineer is trying to do too much at once.\n\nHave a conversion with that developer, and find out exactly what\u2019s causing them to work in this way."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "Have a conversion with that developer, and find out exactly what\u2019s causing them to work in this way.\n\nIt\u2019s possible that they\u2019re trying to make progress on multiple fronts at the same time, or that they\u2019re being pulled in different directions by external forces, bouncing from project to project whenever a stakeholder asks a question or requests a status update.\n\nAs their manager, you\u2019re in a position to help the engineer develop the tools they need to devote the necessary level of focus to each unit of work.\n\nExactly how you help depends on the situation \u2014 a more junior engineer may benefit from some coaching in project management skills, while a more senior engineer may need assistance contextualizing and prioritizing their work.\n\nOf course, every engineer is juggling multiple things at once, and it\u2019s not uncommon for someone to jump to a new project while they\u2019re waiting for a Pull Request (PR) to be reviewed."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "Of course, every engineer is juggling multiple things at once, and it\u2019s not uncommon for someone to jump to a new project while they\u2019re waiting for a Pull Request (PR) to be reviewed.\n\nStill, there\u2019s a point at which task switching becomes excessive, and the visualizations in Workstreams make that really clear, revealing potentially problematic switching in a haphazard assortment of commits, or delays getting back to paused units of work.\n\nSometimes, the delay itself is noteworthy.\n\nIf an engineer is committing to something every day, then stops for a significant period of time before picking it back up again, it\u2019s likely they\u2019ve been pulled away to work on something else.\n\nGiven how much time engineering teams spend grooming and prioritizing their backlog, this sort of deviation from the plan can be problematic, and yet, well-meaning developers often say yes to side tasks and additional projects without thinking about the cost."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "As a leader, if you notice this occurring, you can help your team members determine whether unplanned work is worthy of urgent attention, and remind them to assess any new tasks with you before taking them on.\n\nQuestion 2 to ask in standup meetings: How can the team help reduce risk?\n\nThis question gets to one of the key goals of standup meetings: spotting and resolving problems before they derail sprints.\n\nWork that is at-risk is work that has started to go off track but hasn\u2019t gone completely off the rails yet, which means you have the opportunity to stay a step ahead of a real problem.\n\nWorkstreams will alert you whenever a unit of work meets your criteria for \u201cat-risk,\u201d whether it\u2019s a PR that has stalled without review or one that has too many contributing engineers, giving you the opportunity to quickly get the work back on track."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "While some at-risk work can be indicative of larger issues \u2014\u00a0outdated processes or recurring bottlenecks in your development pipeline \u2014 at-risk work is often the result of a miscommunication regarding who should be doing what.\n\nFor example, it\u2019s common to see work get stuck in work in Code Review because everyone thought it was being reviewed by someone else on the team.\n\nWhen you bring risky units of work to standup for discussion, your team can quickly implement any straightforward fixes, then set aside time to work through bigger issues.\n\nQuestion 3 to ask in standup meetings: Are we working on the right things?\n\nWith a tool like Workstreams, you can easily see what units of work are progressing, so you can ensure your team members are working on the right things."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "With a tool like Workstreams, you can easily see what units of work are progressing, so you can ensure your team members are working on the right things.\n\nLet\u2019s say you prioritized tickets coming into your sprint, but notice that a developer is committing against the lowest priority Issue \u2014 you can discuss this as a team and rebuild alignment in the moment, rather than pretending you\u2019ll always get it right at the top of the sprint.\n\nAlmost certainly there was a miscommunication, and the developer jumped on what they thought was an important unit of work, though it\u2019s also possible that an engineer thought the low-priority item was easiest to tackle and wanted to get it out of the way.\n\nThis is rarely a good reason not to work on the highest priority things, and you can help coach the developer back to more important units of work.\n\nIn some cases, the low-priority item may be the only thing the developer understood, so they jumped into it despite its low importance."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "In some cases, the low-priority item may be the only thing the developer understood, so they jumped into it despite its low importance.\n\nThis is important to know and address because if one person on the team doesn\u2019t understand something, chances are other members of the team are also confused.\n\nWhatever caused the low-priority item to be started, the team now has the opportunity to decide what to do about the unit of work in question.\n\nIt may be that the work is so far along it makes sense to finish it, or it may be something the team decides to pause until higher-priority work is completed.\n\nWithout a tool like Workstreams, there would be no choice to make, as you\u2019d only find out that someone was working on the \u2018wrong\u2019 thing after the work was already complete."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "Without a tool like Workstreams, there would be no choice to make, as you\u2019d only find out that someone was working on the \u2018wrong\u2019 thing after the work was already complete.\n\nData is a Powerful Tool for Skilled Managers\n\nThough some leaders hesitate to leverage data, fearing that it breeds micromanagement, it\u2019s important to remember that you\u2019re already gathering information about stalled work or stuck engineers.\n\nStandups are one of the many ways managers seek out that information, but they\u2019re not the most efficient way, since meeting time is better used for solving problems than surfacing them.\n\nTrue micromanagement is not found in the gathering of data, but in how that data is used; micromanagers wield punishments and prescribe solutions, while great managers ask questions, offer guidance, and help their teams collaborate on solutions."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/three-questions-standup-part-ii", "content": "With an Engineering Intelligence Solution pointing you towards work that needs attention, you\u2019ll spend less time looking for opportunities to help and more time actually managing your team.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "This post is the fourth article in our Tactical Guide to a Shorter Cycle Time five-part series.\n\nRead the previous post\u00a0here.\n\nAs the engineering industry has moved towards Continuous Delivery, teams have left behind many of the manual quality control measures that once slowed down delivery.\n\nAlong this same vein, some engineering leaders are doubting whether Code Review still has value:\n\nThe\u00a0annual survey conducted by Coding Bear\u00a0revealed that 65% of teams are dissatisfied with their Code Review process\u2013 yet teams consistently identify Code Review as the best way to ensure code quality.\n\nMost people agree Code Review is important, but few know how to prevent it from wasting valuable engineering time.\n\nBefore giving up on Code Reviews altogether, we recommend looking at Code Review metrics to identify where you can avoid waste and increase the efficiency of this process.\n\nDefining \u201cSuccessful\u201d Code Reviews\n\nAn effective Code Review process starts with alignment on its objective."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "Defining \u201cSuccessful\u201d Code Reviews\n\nAn effective Code Review process starts with alignment on its objective.\n\nA study at Microsoft a few years ago surveyed over 900 managers and developers to understand the motivation behind Code Reviews.\n\n\u201cFinding defects\u201d was the primary motivator of the majority of those surveyed, but when the results were analyzed, the researchers discovered that the\u00a0outcomes didn\u2019t match the motivations.\n\nImprovements to the code were a much more common result of the reviews.\n\nWork with team leaders to determine which outcomes you\u2019re optimizing for:\n\nCatching bugs and defects\n\nImproving the maintainability of the codebase\n\nKeeping consistency of code style\n\nKnowledge sharing throughout the team\n\nDetermining your Code Review priorities helps your team focus on what kind of feedback to leave or look for."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "Reviews that are intended to familiarize the reviewer with a particular portion of the codebase will look different from reviews that are guiding a new team member towards better overall coding practices.\n\nOnce you know what an effective Code Review means for your team, you can start adjusting your Code Review activities to achieve those goals.\n\nCode Review Diagnostics\n\nHistorically, there has been no industry standard for Code Review metrics.\n\nAfter speaking with and analyzing work patterns of thousands of engineering teams, we identified the following indicators:\n\nReview Coverage:\u00a0the percentage of files changed that elicited at least one comment from the reviewer.\n\nReview Influence:\u00a0the percentage of comments that led to some form of action, either in the form of a change to the code or of a reply.\n\nReview Cycles:\u00a0the number of back-and-forths between reviewer and submitter."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "Review Cycles:\u00a0the number of back-and-forths between reviewer and submitter.\n\nThese metrics were designed to give a balanced representation of the Code Review process, showing thoroughness, effectiveness, and speed.\n\nWhile imperfect (as all metrics are), they provide concrete measures that help you understand the differences between teams and individuals.\n\nDiving into outliers will enable you to finally bring a quality and efficiency standard to Code Reviews across your organization.\n\nReview Coverage\n\nReview Coverage indicates how much attention is spent on reviews and represents review thoroughness.\n\nIf you\u2019ve identified that the purpose of Code Reviews is to catch defects or improve maintainability, this metric, together with Review Influence, will be a key indicator of how effective this process is.\n\nLow Review Coverage can point you toward incidents of under-review or rubber-stamping."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "Low Review Coverage can point you toward incidents of under-review or rubber-stamping.\n\nUnder-review may be happening as a result of a lack of familiarity with the codebase, disengagement on the part of the reviewer, or poor review distribution.\n\nUnusually high Review Coverage could be an indicator of a nitpicker who\u2019s leading to inefficiency and frustration on the team.\n\nThis case will likely require realignment on what \u201cgood\u201d is.\n\nReview Influence\n\nAny action that is taken as a result of a review comment is proof that the reviewer is taken seriously and their feedback is being considered.\n\nWhen this metric dips low, feedback isn\u2019t resulting in change, indicating that reviews are not perceived to be valuable.\n\nVelocity\u00a0lets you see core Code Review metrics and how they compare across teams or individuals so you can pinpoint the problem."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "Velocity\u00a0lets you see core Code Review metrics and how they compare across teams or individuals so you can pinpoint the problem.\n\nIf you consider this metric in tandem with Review Coverage, you may identify cases where individuals or teams leave many comments (have high thoroughness) but those comments yield no action (are low impact).\n\nThis can signal that there needs to be a re-alignment on the function or purpose of Code Review.\n\nWhen the Review Influence is low, you\u2019ll want to dive into the reviews that are being left on each Pull Request.\n\nWhen feedback that was intended to be actioned is ignored, it may indicate that the comments were unclear or the suggestion was controversial.\n\nReview Cycles\n\nEach time a Pull Request is passed back and forth, developers are required to context switch and spend more time on one particular line of work.\n\nIf this happens frequently, the review process can become a bottleneck to shipment and directly increase your team\u2019s Cycle Time."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "If this happens frequently, the review process can become a bottleneck to shipment and directly increase your team\u2019s Cycle Time.\n\nEven worse, it can serve as a source of demotivation to engineers and contribute to burnout.\n\nVelocity\u00a0lets you see core Code Review metrics over time, so you can get a sense of what\u2019s normal for your team.\n\nLook at your Review Cycle count over time to get a sense of what is typical for your team.\n\nNote that a high number of Review Cycles is typical for less experienced team members who are still becoming familiar with your codebase.\n\nOtherwise, when Review Cycles spikes, it typically represents some form of misalignment.\n\nThe source of that misalignment could be upstream, due to unclear technical direction.\n\nIt may indicate that there\u2019s a disagreement about how a solution should best be implemented.\n\nOr, more simply, team members may not have clarity about what \u201cdone\u201d means."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "It may indicate that there\u2019s a disagreement about how a solution should best be implemented.\n\nOr, more simply, team members may not have clarity about what \u201cdone\u201d means.\n\nBring this data into your retros\u00a0or 1:1s to start the conversation about where this misalignment may have taken place.\n\nWhen to Revisit Code Review\n\nOf\u00a0all the components that influence Cycle Time, Code Review is the most difficult to get right.\n\nIt requires taking a hard look at metrics, but also frequently requires difficult conversations about how to leave constructive yet respectful feedback.\n\nOften, the culture of one team is not conducive to processes have worked well for another.\n\nFor this reason, we recommend revisiting your Code Review process after any significant change to processes or team structure.\n\nThis will get easier after you\u2019ve done it once since you\u2019ll have a clear sense of your expectations and the tools with which to communicate them."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/time-wasting-code-review", "content": "This will get easier after you\u2019ve done it once since you\u2019ll have a clear sense of your expectations and the tools with which to communicate them.\n\nTo learn where your team should focus next, check out the other articles in our Tactical Guide to a Shorter Cycle Time five-part series:\n\nPart I:\u00a0The Virtuous Circle of Software Delivery\n\nPart II:\u00a0The Single Greatest Lever in Shortening Cycle Time\n\nPart III:\u00a0How to Stop Code Review from Bottlenecking Shipping\n\nPart IV:\u00a0Keep Code Review from Being a Waste of Everyone\u2019s Time\n\nPart V: The Last Mile to True Continuous Delivery\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "Recent headlines might lead one to conclude that it\u2019s more difficult than ever to build a high-performing team.\n\nHiring is increasingly competitive, salaries are on the rise, and a growing number of people are choosing to switch jobs or exit the workforce entirely.\n\nBut building a stellar team is about more than just recruiting great talent \u2014 it\u2019s about investing in the talent you have.\n\nAnd that\u2019s not investment in the financial sense (though salaries and benefits are important!\n\n), it\u2019s a commitment to coaching and upskilling your existing team.\n\nFocusing on professional development is a win-win.\n\nHelping developers excel will boost team performance.\n\nEnsuring that developers feel both challenged and supported will increase their job satisfaction and make them more likely to stick around.\n\nHow Can You Help Developers Upskill?\n\nOf course, helping engineers level up their skills is a multi-layered process.\n\nTime and money set aside for learning is important, but it\u2019s not enough."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "How Can You Help Developers Upskill?\n\nOf course, helping engineers level up their skills is a multi-layered process.\n\nTime and money set aside for learning is important, but it\u2019s not enough.\n\nAs a leader, there are things you can do to create a culture where positive feedback is welcomed, missteps are seen as learning opportunities, and developers feel comfortable openly discussing their professional goals.\n\nOnce the cultural foundation is set, you can make adjustments to incorporate coaching into your team\u2019s processes and help ensure that it remains a priority.\n\nCulture Is Key to Leveling Up\n\nPsychological safety is a prerequisite to the success of any coaching or professional development initiatives.\n\nIn order for developers to have honest conversations about their career goals, or to be comfortable receiving feedback, they must trust that they will not be penalized for aspirations that are out of alignment with current responsibilities."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "Though psychological safety is essential, it is just a baseline.\n\nAn organization looking to prioritize professional development may also benefit from adopting elements of Continuous Improvement.\n\nIn Continuous Improvement, every member of a team is on the lookout for opportunities to make incremental improvements.\n\nThe underlying belief is that even small changes to processes, products, and more can have a big impact.\n\nAt the individual level, it would be detrimental to engage every team member in a conversation about one engineer\u2019s professional development.\n\nThe critical takeaway from Continuous Improvement is that improving should not be a top-down process.\n\nWhen it comes to coaching, it\u2019s important to empower individuals with an active role in their professional development.\n\nThey can actively contribute by identifying areas of incremental improvement, making plans for their own development, and setting and tracking progress toward goals."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "They can actively contribute by identifying areas of incremental improvement, making plans for their own development, and setting and tracking progress toward goals.\n\nWhen they are involved in making plans, they\u2019ll be more likely to see them through.\n\nAs they realize the value of making small, positive changes, they\u2019ll be motivated to keep learning.\n\nCreate Regular Touchpoints\n\nAt the process level, effective upskilling requires consistent check-ins and conversations.\n\nRegular 1:1s are a great opportunity to surface opportunities for upskilling, and to evaluate progress toward goals.\n\nCome prepared with observations and discussion points, and encourage your team members to do the same.\n\nGive them the chance to raise their questions and concerns first, so you can get a more complete understanding of what blockers are impacting them the most, and what skills they\u2019d most like to improve."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "Make their goals a priority whenever possible, and seek out opportunities to challenge team members to envision how their goals align with business priorities.\n\nThese touchpoints will be most effective when a baseline of safety has already been established, though it\u2019s still important to be proactive about reinforcing trust during 1:1s.\n\nPracticing vulnerability can help establish the right tone.\n\nYou may also want to remind team members that 1:1s are not meant for work-related status updates, but for bigger picture conversations about their role, skills, and aspirations.\n\nLeverage Data To Coach More Effectively\n\nLeaders can supplement qualitative conversations with Engineering Intelligence data from a platform like Velocity.\n\nWith the help of objective data, it\u2019s possible to cut through biases, check assumptions, and more accurately assess how a particular developer is working."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "With the help of objective data, it\u2019s possible to cut through biases, check assumptions, and more accurately assess how a particular developer is working.\n\nFor example, you may observe that a particular team member rarely contributes in meetings, and only speaks when spoken to.\n\nYou may conclude that this team member is not engaged or invested in their work, or that they don\u2019t value collaboration.\n\nEngineering data can help you test that hypothesis.\n\nYou might find that this same team member is an active participant in Code Reviews, frequently leaving thorough, impactful feedback for their peers.\n\nWhere you once might have encouraged this team member to be more collaborative, you can now offer more specific feedback around participating in meetings.\n\nAlternatively, you may decide to accept their participation in reviews as evidence of their commitment to teamwork, and instead, work with them on another area of growth."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "Alternatively, you may decide to accept their participation in reviews as evidence of their commitment to teamwork, and instead, work with them on another area of growth.\n\nYou can also use engineering data to identify specific units of work that may present learning opportunities.\n\nFor example, if you notice that a developer has an abnormally large or long-running PR, you can have a conversation about the circumstances that are drawing things out.\n\nThis allows you to surface potential anti-patterns or areas of weakness that may benefit from coaching.\n\nYou may learn that the developer is having an issue with that particular area of the codebase, or you may find that they would benefit from coaching around coding hygiene.\n\nIt\u2019s important to remember that metrics are not diagnostic, and quantitative data must always be placed in context.\n\nDifferent projects will naturally progress at different speeds, and non-code-related factors can impact the data."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "Different projects will naturally progress at different speeds, and non-code-related factors can impact the data.\n\nOne engineer may appear to be struggling when in reality, they\u2019re simply working through a tricky problem.\n\nAnother engineer may be adding value through glue work that isn\u2019t as recognizable as shipped code.\n\nIf you\u2019re gathering relevant context and having open, honest conversations with your team, you\u2019ll be able to determine whether a concerning data point has a reasonable explanation, is an anomaly, or indicates something that needs to be addressed.\n\nData can do more than help you surface potential areas for improvement.\n\nIt can help you make those improvements a reality.\n\nGoals are more effective when paired with objective data.\n\nMetrics make it possible to set and track progress towards specific, actionable targets, which will set your team members up for success."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "Goals are more effective when paired with objective data.\n\nMetrics make it possible to set and track progress towards specific, actionable targets, which will set your team members up for success.\n\nYou and your team members will be able to align on exactly what they\u2019re working toward and see how effectively they\u2019re getting there.\n\nIf progress seems to stall, you can check-in and re-evaluate your tactics \u2014 or the goal itself.\n\nUpskilling Is Key to Building a High-Performance Team\n\nCoaching and professional development take time, but they\u2019re critical to driving success and retaining your top performers.\n\nIt\u2019s not enough to simply hire talented people, as even the most skilled developers will be looking for opportunities to keep growing.\n\nWith a mixture of cultural and process-level adjustments, you can help create an environment that encourages development while still advancing business priorities."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/upskilling-engineering-teams", "content": "With a mixture of cultural and process-level adjustments, you can help create an environment that encourages development while still advancing business priorities.\n\nTo find out how to leverage data from Velocity to upskill team members and boost retention, speak to an engineering data specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-psychological-safety", "content": "As you think about driving high performance on your team, it\u2019s easy to focus on certain tangible improvements like optimizing processes, upskilling team members, and hiring new talent.\n\nBut your team will only go so far if you neglect to cultivate a key aspect of team culture \u2014 psychological safety.\n\nPsychological safety, most commonly defined as the knowledge that you won\u2019t be punished for making a mistake, is critical to the success of the highest performing organizations; it allows teams and individuals to have confidence in taking risks of all kinds, from the most basic risk of opening a Pull Request for feedback, to the larger leaps necessary to drive true innovation and stay ahead of the competition.\n\nWith the right data and a clear strategy for analysis, you\u2019ll be able circumvent some common biases and assumptions, while fostering the psychological safety necessary to keep improving as a team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-psychological-safety", "content": "With the right data and a clear strategy for analysis, you\u2019ll be able circumvent some common biases and assumptions, while fostering the psychological safety necessary to keep improving as a team.\n\nSoftware Engineers Need Safety to Deploy\n\nSafety is a prerequisite of speed; developers who aren\u2019t confident in their code might become a bottleneck if they\u2019re hesitant to open a PR and receive feedback.\n\nWhen your team has a culture of safety, that developer can feel more secure subjecting their work to the review process.\n\nThey know they\u2019ll have the opportunity to work through their mistakes, rather than being penalized for them.\n\nPsychological safety is also critical at the other end of your software development pipeline.\n\nDevelopers need to feel secure enough to deploy code, and that security can be found on two levels: the confidence that their deployment won\u2019t break things, and the trust that they won\u2019t be punished if it does.\n\nThe first is mainly a factor of process and tooling."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-psychological-safety", "content": "The first is mainly a factor of process and tooling.\n\nCode Review and automated tests can offer some degree of confidence that buggy code won\u2019t be deployed, while good coding hygiene, specifically the practice of keeping Pull Requests as small as possible, will mean that any damaging changes are easier to identify and reverse.\n\nThe second level, the trust that a developer won\u2019t be punished if their code introduces a bug or causes an incident, is a matter of culture.\n\nIt\u2019s an engineering leader\u2019s responsibility to create a culture of psychological safety on their team, and to ensure that mistakes are seen as a learning opportunity, rather than an occasion for punishment.\n\nIn a blameless culture, the work is evaluated and discussed independently of the person who completed it, and every member of a team stands to benefit from the learning experience."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-psychological-safety", "content": "In a blameless culture, the work is evaluated and discussed independently of the person who completed it, and every member of a team stands to benefit from the learning experience.\n\nWithout this foundation of trust, your team will be hard-pressed to deploy quickly and consistently, let alone take the larger risks necessary to pursue big ideas, innovate, and stay ahead of your competition.\n\nUsing Data to Create Psychological Safety\n\nData can play a key role in your efforts to cultivate a culture of psychological safety.\n\nWhenever you introduce data in your organization, it\u2019s important to do so responsibly \u2014 be transparent, put all data in context, and avoid using it to penalize members of your team.\n\nBut used properly, clear, objective metrics can help you combat intrinsic biases and check your assumptions, while keeping conversations grounded in fact.\n\nThis makes it easier to keep conversations focused on the work, rather than the person behind that work."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-psychological-safety", "content": "This makes it easier to keep conversations focused on the work, rather than the person behind that work.\n\nVelocity can help surface high-activity Pull Requests that could be at risk of derailing your sprint.\n\nFor example, if a particular sprint is falling behind, you could frame the conversation in a general sense, asking the team why they\u2019re moving slowly.\n\nBut this framing risks putting your team members on the defensive \u2014 it could be construed as finding fault in your developers, and places blame on them for the slowdown.\n\nWith data from an engineering management platform like Velocity, it\u2019s easier to ensure that discussions remain focused on the work itself.\n\nIn Velocity, for instance, it\u2019s possible to identify at-risk work before it derails your sprint.\n\nYou can pull up a report that highlights long-running, high-activity Pull Requests, then dig into those PRs with your team."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-psychological-safety", "content": "You can pull up a report that highlights long-running, high-activity Pull Requests, then dig into those PRs with your team.\n\nIf you keep the conversation focused on those specific units of work, you\u2019ll be better able to surface the particular challenges that are slowing things down and work through them together.\n\nTo find out how data can help you create psychological safety and drive performance in your organization, reach out to a product specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "Developers who are struggling to keep up, as well as those developers who are excelling but no longer growing, are likely to be unsatisfied in their current roles.\n\nBut engineering leaders, especially managers of managers or those who are not involved in the day-to-day writing of code, may not have insight into who is in need of support and who is craving their next challenge.\n\nWith the right combination of quantitative and qualitative data, you\u2019ll be able to spot opportunities to coach developers of all levels.\n\nYou\u2019ll also have an easier time setting and tracking progress towards concrete targets, which will empower your team members to reach their goals.\n\nStart by Gathering Qualitative Engineering Data\n\nUse your 1 on 1 time to initiate conversations with each of your team members about where they think their strengths and weaknesses lie, and what they\u2019d like to improve."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "You may want to give your team members some time to prepare for these conversations, as it can be hard to make this sort of assessment on the spot.\n\nPay extra attention in standups and retros, keeping an eye out for any patterns that might be relevant, like a developer who frequently gets stuck on the same kind of problem or tends to surface similar issues \u2014 these could represent valuable coaching opportunities.\n\nIt can also be helpful to look for alignment between individual goals and team objectives, as this will make it easier to narrow your focus and help drive progress on multiple levels.\n\nDig Into Quantitative Engineering Data\n\nNext, you\u2019ll want to take a closer look at quantitative data.\n\nAn engineering management platform like Velocity can pull information from your existing engineering tools and turn them into actionable reports and visualizations, giving you greater insight into where your developers are excelling, and where they might be struggling."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "Use this information to confirm your team member\u2019s assessment of their strengths and weaknesses, as well as your own observations.\n\nYou may find that an engineer who feels like they\u2019re a a slow coder isn\u2019t actually struggling to keep up with their workload because of their skill level, but because they\u2019ve been pulled into too many meetings and aren\u2019t getting as much coding time as other team members.\n\nIn other cases, the quantitative data will surface new issues or confirm what you and your team member already know, underscoring the need to focus on a particular area for improvement.\n\nVelocity\u2019s Developer360 report can help you gain insight into where your developers are excelling.\n\nJames Gaythwaite, CTO of Greenlight, finds this kind of quantitative data particularly helpful for ensuring new hires are onboarding effectively \u2014 and for spotting high-performers early on."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "James Gaythwaite, CTO of Greenlight, finds this kind of quantitative data particularly helpful for ensuring new hires are onboarding effectively \u2014 and for spotting high-performers early on.\n\nAs a new member of the team, a developer may not have an accurate idea of how well they\u2019re getting up to speed, but data can provide an objective assessment of how quickly they\u2019re progressing.\n\nJames finds it helpful to compare the same metrics across new developers and seasoned team members, to find out where recent hires could use a bit of additional support.\n\nThis type of comparison also makes it easier to spot new engineers who are progressing faster than expected, so that team leaders can make sure to offer them more challenging work and keep them engaged."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "Of course, as is true with all data, James cautions that these kinds of metrics-based comparisons must always be viewed in context \u2014 engineers working on different types of projects and in different parts of the codebase will naturally perform differently on certain metrics.\n\nSet Concrete Engineering Goals\n\nOnce you\u2019ve identified areas for improvement, you\u2019ll want to set specific, achievable goals.\n\nQuantitative data is critical to setting those goals, as it provides the concrete measurements necessary to drive improvement.\n\nWork with each team member to evaluate the particular challenges they\u2019re facing and come up with a plan of action for addressing them.\n\nThen, set realistic, yet ambitious goals that are tied to specific objective measurements.\n\nThis won\u2019t always be easy \u2014 if a developer is struggling with confidence in their coding ability, for example, you won\u2019t be able to apply a confidence metric, but you can find something else useful to measure."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "Try setting targets for PR Size or Time to Open, which will encourage that developer to open smaller Pull Requests more frequently, opening their work up to constructive feedback from the rest of the team.\n\nIdeally, they\u2019ll be met with positive reinforcement and a confidence boost as their work moves through the development pipeline, but even if it does turn out their code isn\u2019t up to par, smaller Pull Requests will result in smaller changes, and hopefully alleviate the overwhelming feeling that can come when a large Pull Request is met with multiple comments and edits in the review process.\n\nThe Targets report allows you to set SLA-style goals for your developers.\n\nTargets like these can be an important way to help developers reach their individual goals, but you can also use them to set team- or organization-wide goals and encourage progress on multiple fronts."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "Targets like these can be an important way to help developers reach their individual goals, but you can also use them to set team- or organization-wide goals and encourage progress on multiple fronts.\n\nRoger Deetz, VP of Engineering at Springbuk, used Velocity to identify best practices and help coach developers across the organization to adopt them.\n\nWith specific goals and concrete targets, the team was able to decrease their Cycle Time by 48% and boost Pull Request Throughput by 64%.\n\nThough it\u2019s certainly possible to coach developers and drive progress without objective data, it\u2019s much harder.\n\nIf you\u2019re looking to promote high-performance on your team, look to incorporate data into your approach.\n\nYou\u2019ll be able to identify specific coaching opportunities, set concrete goals, and help every member of your team excel.\n\nTo find out how Velocity can help you coach your team members to level up, reach out to one of our product specialists."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-data-to-coach-ics", "content": "To find out how Velocity can help you coach your team members to level up, reach out to one of our product specialists.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-velocity-to-identify-patterns-of-top-performing-teams", "content": "In this time of global and economic uncertainty, it\u2019s never been more important to have a quick way of knowing which engineering processes are working and which are broken.\n\nAnd while it can be tempting to focus on bottlenecks and struggling team members, it can be even more useful to look at the practices, behaviors, and culture of your strongest teams.\n\nThis post runs through a framework for using Velocity, our Engineering Intelligence tool, to identify and scale the most successful habits of high performing teams.\n\nFinding the Top 5% of Your Organization\n\nWhile all engineering organizations might define success slightly differently, there are two metrics within Velocity that indicate an extremely proficient engineering team:\n\nThroughput, measured in deploys or PRs merged, which indicates how much your developers are getting done.\n\nCycle Time, measured in hours from first commit to when a PR is merged to production, which indicates how fast your developers are getting that work done."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-velocity-to-identify-patterns-of-top-performing-teams", "content": "Cycle Time, measured in hours from first commit to when a PR is merged to production, which indicates how fast your developers are getting that work done.\n\nIn Velocity\u2019s Compare report, you can select both of these metrics and compare them across your organization to identify the teams that are merging the most the fastest.\n\nOnce you\u2019ve identified your strongest teams using success metrics like Throughput and Cycle Time, you\u2019ll want to dig into what has made them successful.\n\nFor this, you\u2019ll need different, diagnostic metrics.\n\nIdentifying the Best Practices of Your Strongest Engineering Team\n\nYou can think of your software delivery process in three phases:\n\nTime to Open, or how long does development take.\n\nReview Speed, or how long does work sit before getting picked up for review.\n\nTime to Merge, or how long does the entire code review process take.\n\nTypically, a strong engineering team will move faster in one of these stages.\n\nVelocity makes it easy to look at these three metrics side-by-side."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-velocity-to-identify-patterns-of-top-performing-teams", "content": "Typically, a strong engineering team will move faster in one of these stages.\n\nVelocity makes it easy to look at these three metrics side-by-side.\n\nYou can view them as bar graph clusters by week or by month.\n\nOr, you can view these metrics by team.\n\nHere, we can see that the top team \u2014 Gryffindor \u2014 is most distinguished by their extremely fast Review Speed.\n\nAlthough they have a long Time to Open and Time to Merge, this isn\u2019t remarkable when looking at the other teams.\n\nThe other teams (especially the Hogwarts team) frequently had work stuck in the review process.\n\nPair your quantitative analysis with qualitative information, and speak to the members of the Gryffindor team.\n\nFind out what makes their review process different from the other teams\u2019 processes, and think about ways the other teams can apply those learnings."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-velocity-to-identify-patterns-of-top-performing-teams", "content": "Find out what makes their review process different from the other teams\u2019 processes, and think about ways the other teams can apply those learnings.\n\nCreating a Blueprint For Your Entire Organization\n\nNow that you\u2019ve identified your top-performing teams and their defining characteristics, you can create a blueprint for better processes across your organization.\n\nOne of our customers, Springbuk, used Velocity following a Series B funding round to level-up the way they coached engineers at scale.\n\nRoger Deetz, VP of Engineering, had been brought on to help build out the engineering department.\n\nBut after getting to know his teams, he realized that there wasn\u2019t any consistency in how and when teams shipped features to end-customers.\n\nRoger worked with his engineering leads and product managers to identify agile practices that worked for his team, then shared them org-wide.\n\nTogether, they created documentation and set up onboarding and mentoring around encouraging healthy coding habits at scale."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/using-velocity-to-identify-patterns-of-top-performing-teams", "content": "Together, they created documentation and set up onboarding and mentoring around encouraging healthy coding habits at scale.\n\nWith stronger processes in place, Roger and his team were able to increase PR throughput 64%.\n\nWith objective data and learnings from your highest performing teams, you\u2019ll be able to replicate successful practices across your organization, and help boost productivity at scale.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/virtuous-circle-software-delivery", "content": "This post is the first article in our Tactical Guide to a Shorter Cycle Time five-part series.\n\nLow Cycle Time is a characteristic of high performing teams\u2013and the authors of 9 years of\u00a0DevOps Reports\u00a0have the data to prove it.\n\nIn their book, Accelerate, they\u2019ve found a direct link between Cycle Time and innovation, efficiency, and positive engineering culture.\n\nOur data analysis of over 500 engineering organizations corroborates their findings.\n\nIt also reveals helpful benchmarks for teams to gauge how they compare to the rest of the industry.\n\nWe\u2019ve uncovered that:\n\nThe top 25% achieve a Cycle Time of 1.8 days\n\nThe industry-wide median is 3.4 days\n\nThe bottom 25% have a Cycle Time of 6.2 days\n\nThe Accelerate authors discovered the \u201celite\u201d performers (making up just 7% of the industry) reach a Cycle Time of less than one hour.\n\nThis means that the\u00a0median Cycle Time is 80 times higher\u00a0than that of the best performing organizations."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/virtuous-circle-software-delivery", "content": "This means that the\u00a0median Cycle Time is 80 times higher\u00a0than that of the best performing organizations.\n\nThis spread suggests that the majority of the industry either doesn\u2019t measure Cycle Time, doesn\u2019t know what a good Cycle Time is, or doesn\u2019t know how to fix it.\n\nThis is why today, we\u2019re kicking off our Tactical Guide to a Shorter Cycle Time, a 5-part series to help you accomplish all of the above.\n\nThe Virtuous Circle that Spurs Continuous Improvement\n\nWe define\u00a0Cycle Time\u00a0as the time between first commit and deploy of a changeset.\n\nWhether or not your definition matches ours precisely, optimizing the amount of time between these two events will significantly improve your engineering team\u2019s efficiency (we\u2019ve observed increases of at least 20%).\n\nMeasuring and improving this metric has a long term effect that\u2019s even more significant than the initial bump in productivity."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/virtuous-circle-software-delivery", "content": "Measuring and improving this metric has a long term effect that\u2019s even more significant than the initial bump in productivity.\n\nIt sets in motion a Virtuous Circle of Software Delivery, in which optimization that encourages better engineering practices, paired with the positive reinforcement that comes from unblocking, encourages more optimization that sparks better coding practices, and so on.\n\nThe process of improving each portion of your Cycle Time will create a culture of Continuous Improvement on your team.\n\nWhere to Start\n\nFirst, you\u2019ll want to know what your Cycle Time is and how it compares to the industry average.\n\nVelocity\u00a0shows you Cycle Time with 3 years of historical data out of the box.\n\nAt face value, Cycle Time is a great metric to gauge success, but it isn\u2019t diagnostic."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/virtuous-circle-software-delivery", "content": "Velocity\u00a0shows you Cycle Time with 3 years of historical data out of the box.\n\nAt face value, Cycle Time is a great metric to gauge success, but it isn\u2019t diagnostic.\n\nTo understand\u00a0why\u00a0your Cycle Time is high or low, you\u2019ll want to look at its four constituents:\n\nTime to Open:\u00a0The time between an engineer\u2019s first commit and when they open a pull request in their version control system.\n\nOur data shows that this metric has the highest correlation with Cycle Time, so this is a great place to start optimizing.\n\nTime to Review:\u00a0The time between when a pull request is opened and when it receives its first review.\n\nDelays at this stage incentivize multi-tasking, so you\u2019ll want to minimize the time a PR is left waiting for review.\n\nTime to Approve:\u00a0The time between when a pull request receives its first review and when it is approved, also known as the Code Review process."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/virtuous-circle-software-delivery", "content": "Time to Approve:\u00a0The time between when a pull request receives its first review and when it is approved, also known as the Code Review process.\n\nYou don\u2019t want to completely minimize the time spent in this phase, but you do want to make sure you reduce inefficiencies while still getting the value on Code Review you anticipate.\n\nTime to Deploy:\u00a0Any additional time following the pull request approval, before the change reaches production.\n\nYou can plot these metrics side-by-side and look at them in terms of hours or percentage of time spent, so you know what your team\u2019s starting point is before optimizing.\n\nWe recommend working on each phase from left to right because inefficiencies tend to compound from earlier stages.\n\nWhen a very large pull request is opened, it also affects how long it\u2019ll wait for review and how likely it is to get stuck in the code review process.\n\nStart with Time to Open to ensure your team has streamlined individual practices before moving on to collaborative ones."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/virtuous-circle-software-delivery", "content": "Start with Time to Open to ensure your team has streamlined individual practices before moving on to collaborative ones.\n\nWhat\u2019s Next\n\nThe next four parts of our series will dive deep into each component of Cycle Time:\n\nPart I:\u00a0The Virtuous Circle of Software Delivery\n\nPart II:\u00a0The Single Greatest Lever in Shortening Cycle Time\n\nPart III:\u00a0How to Stop Code Review from Bottlenecking Shipping\n\nPart IV:\u00a0Keep Code Review from Being a Waste of Everyone\u2019s Time\n\nPart V: The Last Mile to True Continuous Delivery\n\nWe\u2019ll include industry benchmarks, based off our analysis of 500+ engineering teams\u2019 data, further data points to investigate, and tactical advice on how to improve each stage.\n\nStay tuned\u2013 or, if you can\u2019t wait, sign up for a trial of\u00a0Velocity, our Engineering Intelligence product and have a data specialist guide you through each step within Velocity.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/virtuous-circle-software-delivery", "content": "Subscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/what-data-science-tells-us-about-shipping-faster", "content": "We last looked at Cycle Time for software engineering to understand\u00a0what it is and why it matters.\n\nMost discussions about Cycle Time end there, leaving a lot of engineering managers frustrated and wanting more.\n\nWell-meaning and intelligent engineering managers have theories on which principles drive low cycle time, but very few actually have data to support their hypotheses.\n\nSo today we\u2019re going to do just that \u2013 we\u2019re going to reveal what we learned about cycle time after analyzing thousands of pull requests from hundreds of teams.\n\nIn a field full of complexity and nuance, our analysis results were strikingly simple.\n\nThe primary conclusion we came to was that there\u2019s a single intuitive practice that is highly correlated with low cycle time.\n\nBut it\u2019s not the one we would have guessed.\n\nThe Data\n\nBefore we get into exactly our findings, let\u2019s talk briefly about the dataset and definitions we used."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/what-data-science-tells-us-about-shipping-faster", "content": "But it\u2019s not the one we would have guessed.\n\nThe Data\n\nBefore we get into exactly our findings, let\u2019s talk briefly about the dataset and definitions we used.\n\nAs a refresher,\u00a0Code Cycle Time\u00a0(a subset of Cycle Time) represents how long code remains \u201cin flight\u201d \u2013 written but not yet deployed.\n\nOur data science team analyzed 180,000 anonymized pull requests from 500 teams, representing about 3,600 contributors.\n\nWe asked the team to determine what correlation exists, if any, between the following software engineering delivery metrics (we called these \u201cdrivers\u201d) and Code Cycle Time:\n\nTime to Open (Days) (from commit to open)\n\nTime to Review (Days) (from open to review)\n\nPR Open to Merge (Days)\n\nNumber of Review Cycles\n\n% of Abandoned Pull Requests\n\nPushes per Day\n\nPull Request Throughput per Week\n\nWhile beyond the scope of this post, they used Locally Weighted Generalized Linear Models (GLM) to determine correlations between drivers."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/what-data-science-tells-us-about-shipping-faster", "content": "The Results\n\nIf I had been asked beforehand which of our set of metrics would prove most correlated with cycle time, I would have said, without hesitation, \u201cPR Open to Merge\u201d.\n\nIndeed, there is a powerful correlation between these two metrics.\n\nHowever, contrary to what you might think, the data showed that it\u2019s not the most impactful one.\n\nActually, of the drivers we looked at, the metric with the most predictive power on Code Cycle Time was, convincingly, Time to Open.\n\nTo give you a better sense of how strong the correlation is, in absolute terms, where a 0 coefficient means \u201cno correlation\u201d and 1 is perfectly correlated, Time to Open and Code Cycle Time had a 0.87 coefficient.\n\nThis was, in fact, the strongest correlation we found between any two metrics we looked at in our analyses.\n\nEven more striking, Time to Open is more predictive of Code Cycle Time than the length of time the pull request remains open, which means that\u00a0pull requests that open faster, merge faster."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/what-data-science-tells-us-about-shipping-faster", "content": "Even more striking, Time to Open is more predictive of Code Cycle Time than the length of time the pull request remains open, which means that\u00a0pull requests that open faster, merge faster.\n\nWhat can we do with this information?\n\nFirst, as with most data-driven insights, it can be helpful to marry the results with our intuition.\n\nCode that spends less time on someone\u2019s laptop \u2026\n\nIs likely small and therefore easier to get reviewed quickly by a single reviewer\n\nGets reviewed sooner\n\nGets closed sooner if it\u2019s headed in the wrong direction (it happens)\n\nSignals to other team members the area of the codebase you are working, which can serve to head off painful merge conflicts before they happen\n\nThe good news is that Time to Open is a bit easier to influence and understand than the rest of Code Cycle Time, which can get mired in the complexity of collaboration."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/what-data-science-tells-us-about-shipping-faster", "content": "Your team probably already hears from you about writing small pull requests, but reinforcing the message helps, and sharing data like the data presented here can help provide transparency and credibility to the recommendation.\n\nOne could also consider, carefully and judiciously, whether or not pair programming, in some cases, might improve time to open.\n\nThis can be particularly helpful for engineers with a tendency (self aware or not) to overthink, overbuild and/or prematurely optimize code.\n\nClosing\n\nThe influence of Time to Open on Code Cycle Time is striking.\n\nAs software engineering professionals, we spend a lot of time discussing ways to optimize and understand the collaborative aspects of software development.\n\nThis is completely understandable, and does in fact pay dividends.\n\nHowever, the data tells us that in some cases, for some teams, what you should be more likely looking at is your time to open.\n\nRelated Resources\n\nWhat is Cycle Time and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/what-data-science-tells-us-about-shipping-faster", "content": "However, the data tells us that in some cases, for some teams, what you should be more likely looking at is your time to open.\n\nRelated Resources\n\nWhat is Cycle Time and Why Does it Matter?\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "The most popular goal-setting frameworks \u2014 FAST goals, SMART goals, OKRs \u2014 break when it comes to the engineering department.\n\nThe cornerstone of every framework is specificity, but most engineering departments run on benchmarks and estimations that are vague, subjective, or constantly in flux.\n\nCommon project measurements, like story points or t-shirt sizes, lack objectivity.\n\nAnd while lists of completed features are definite cause for celebration, they\u2019re too broad to provide insight into the actual work being done by the engineering department.\n\nTo get specific, you need data.\n\nWith information from your VCS, it\u2019s possible to gain visibility into your development workflow and spot opportunities for advancement.\n\nSubjective measurements, like t-shirt sizes and story points, can be replaced with objective metrics that are comparable across projects and teams."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "Subjective measurements, like t-shirt sizes and story points, can be replaced with objective metrics that are comparable across projects and teams.\n\nFor example:\n\nPR Size \u2014 PR Size is a count of the number of lines of codes changed, added, or removed in a given Pull Request, and it reveals how incrementally people are working.\n\nSmaller PRs are more likely to move quickly through the review process.\n\nReview Cycles \u2014 Review Cycles is a count of the number of times a PR is passed back and forth between author and reviewer.\n\nIt can help you diagnose certain misalignments in the Code Review process, or identify developers struggling with the codebase.\n\nPR Cycle Time \u2014 Cycle Time, which measures the time from the first commit in a Pull Request to the time it\u2019s deployed, is a powerful proxy for engineering speed.\n\nObjective, consistent data points like these make it possible to assess your team\u2019s baseline and measure progress across teams and projects."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "Objective, consistent data points like these make it possible to assess your team\u2019s baseline and measure progress across teams and projects.\n\nThey also allow you to set actionable goals for software developers and drive high performance on your team \u2014 average teams that pair targets with relevant metrics are able to improve enough to reach the top quartile of performance.\n\nData and the FAST Framework\n\nTo illustrate the critical role data plays in goal-setting, let\u2019s take a look at the MIT Sloan Management Review\u2019s research-backed FAST framework.\n\nFAST goals are:\n\nFrequently Discussed \u2014 Goals should be part of reviews and other discussions to help the team prioritize and remained focused.\n\nAmbitious \u2014 Goals should not be simple to achieve, though they shouldn\u2019t be impossible either.\n\nSpecific \u2014 Metrics and milestones should be used to define success and measure progress.\n\nTransparent \u2014 Goals \u2014 and progress towards them \u2014 should be shared publicly."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "Specific \u2014 Metrics and milestones should be used to define success and measure progress.\n\nTransparent \u2014 Goals \u2014 and progress towards them \u2014 should be shared publicly.\n\nWith metrics based on data about your engineering workflow \u2014 data that already exists inside your VCS \u2014 engineering departments can set goals that meet all four criteria.\n\nData is the Foundation for Productive Discussions\n\nIt\u2019s relatively easy to bring up your team\u2019s goals frequently, but constant reminders don\u2019t help your team understand how\u00a0 to succeed.\n\nThe most productive discussions will do more than just update your team on their progress \u2014 they\u2019ll facilitate the sharing and refining of strategies.\n\nThis will allow your team members to work together to get closer to their goal.\n\nData can provide a concrete foundation for those discussions."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "This will allow your team members to work together to get closer to their goal.\n\nData can provide a concrete foundation for those discussions.\n\nLet\u2019s say a cohort of junior engineers is determined to build healthier coding habits, and set a goal to open small Pull Requests, with fewer than 150 lines of code added, changed, or removed.\n\nTracking Pull Request Size will make it possible to visualize the team\u2019s progress towards that goal while allowing you to isolate specific units of work that have fallen short.\n\nYou can bring some of those large Pull Requests to stand-ups or one-on-ones, and use them to discuss tactics for breaking up similar PRs in the future.\n\nWith concrete data as a starting point, your team\u2019s discussion will yield more productive, actionable takeaways.\n\nData Allows Precise Tracking, to Keep Engineering Goals Ambitious\n\nIf your targets are too easily attainable, you won\u2019t be driving real progress."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "Data Allows Precise Tracking, to Keep Engineering Goals Ambitious\n\nIf your targets are too easily attainable, you won\u2019t be driving real progress.\n\nIf they\u2019re unrealistic, your team may be frustrated with their inability to reach them, and morale may suffer.\n\nThe way you track your engineering goals is just as important as the goals themselves \u2014 if you\u2019re not careful, inaccurate tracking methods can obscure your team\u2019s real progress, leading them to get discouraged or set less ambitious goals in the future.\n\nLet\u2019s say your team feels like Code Review is taking too long.\n\nYou might aim to bring down your Review Cycles, or the number of times a PR is passed back and forth between author and reviewer.\n\nIf you set a target of 1 Review Cycle, you could then track progress towards that goal by calculating the average number of Review Cycles for all PRs in a given time period."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "If you set a target of 1 Review Cycle, you could then track progress towards that goal by calculating the average number of Review Cycles for all PRs in a given time period.\n\nIt\u2019s a common approach, but if you have an outlier in your data \u2014 maybe one particularly complicated PR required a lot of back and forth in Code Review \u2014 that outlier will throw off your average.\n\nThis can make it difficult to see the overall trend, and inaccurately suggest inefficiencies in the review process.\n\nInstead of using averages, we recommend tracking progress as a percentage, OKR-style.\n\nSo, rather than aiming to bring your average Review Cycles down to 1, you might aim to hit that number for 80% of Pull Requests.\n\nYour team\u2019s goal should not be perfection, and there are often good reasons for falling short of a target some of the time.\n\nPercentage-style goals will ensure that your team can set ambitious goals and still see progress."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "Percentage-style goals will ensure that your team can set ambitious goals and still see progress.\n\nData Makes Transparency Possible\n\nEngineering metrics allow leaders to compile detailed, accurate progress reports that they can feel comfortable sharing with the team, or with stakeholders.\n\nDepending on the goal, it may make sense to use some discretion here.\n\nThough it\u2019s often useful to share team goals with the rest of the department or organization, there are situations where it might be appropriate to keep that information within a smaller circle.\n\nFor instance, if you\u2019re working with an individual contributor on a specific goal, their progress might be best kept between the two of you, or within the smaller circle of your team.\n\nData Drives High Performance\n\nEffective goal-setting will help you kick-off the Virtuous Circle of Software Delivery, in which progress motivates further improvements."}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "Data Drives High Performance\n\nEffective goal-setting will help you kick-off the Virtuous Circle of Software Delivery, in which progress motivates further improvements.\n\nThat cycle is key to fostering a culture of Continuous Improvement \u2014 and becoming a high-performance engineering team.\n\nAs engineers start to make measurable progress towards their goals, they\u2019ll reap the benefits of those improvements, which will encourage them to find new ways to do better.\n\nInvolve your team in the goal-setting process whenever possible, and you\u2019ll empower and motivate your team to be invested in their own improvement and professional growth.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?"}, {"source": "https://cod-twister-production.cl-us-east-3.servd.dev/blog/you-cant-set-effective-goals-for-software-developers-without-data", "content": "Subscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "Performance reviews in engineering are often tied to compensation.\n\nEnd-of-year and mid-point check-ins can be great opportunities to discuss individual goals and foster professional growth, but too often they are used as ways to assess whether direct reports are eligible for raises or promotions based on their ability to hit key metrics.\n\nFor engineering leaders, a more valuable way to use performance reviews is as a structured opportunity to have a conversation about a developer\u2019s progress and work with them to find ways to grow in their careers through new challenges.\n\nThis benefits both developers and organizations as a whole \u2014 developers are able to advance their skills, and companies are able to retain top engineers who are continually evolving.\n\nEven senior engineers look for opportunities for growth, and are more likely to stay at an organization that supports and challenges them."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "Even senior engineers look for opportunities for growth, and are more likely to stay at an organization that supports and challenges them.\n\nThe key to achieving this is by focusing on competency, rather than productivity measurements, when it comes to evaluating compensation and performance.\n\nBut how do we define competency in engineering?\n\nWhat is competency in engineering?\n\nWhere productivity might measure things like lines of code, competency looks at how an engineer approaches a problem, collaborates with their team to help move things forward, and takes on new challenges.\n\nQuestions to consider when evaluating a developer\u2019s competency might include:\n\nHow thoughtful are their comments in a Code Review?\n\nDo they make informed decisions based on data?\n\nHow do they navigate failure?\n\nHow do they anticipate or respond to change?\n\nEngineering leader Dustin Diaz created a reusable template for evaluating competency in engineering, which he links to\n\nin this post\n\n."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "How do they anticipate or respond to change?\n\nEngineering leader Dustin Diaz created a reusable template for evaluating competency in engineering, which he links to\n\nin this post\n\n.\n\nThe template borrows from concepts in\n\nThe Manager\u2019s Path\n\n, by author and engineering leader Camille Fournier, and is modeled after the\n\nSPACE framework\n\n, and outlines levels of competency for engineers at different levels of seniority.\n\nThe matrix can be helpful for leaders looking to hone in on areas like collaboration, performance, and efficiency/quality.\n\nIt includes markers of competency for different tiers of engineers, including anticipating broad technical change, end-to-end responsibility on projects, and taking initiative to solve issues.\n\nPerformance review essentials\n\nWe\u2019ve addressed how performance reviews during a difficult year can be especially challenging.\n\nYet no matter the circumstances, there are principles of a successful performance review that will always be relevant."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "Yet no matter the circumstances, there are principles of a successful performance review that will always be relevant.\n\nReviews should always include:\n\nCompassion and empathy \u2014 With the understanding that employees could be under a lot of stress, a performance review shouldn\u2019t add to any pressure they\u2019re experiencing.\n\nSpecific units of work \u2014 In order to provide useful feedback, bring examples of work to discuss during a review.\n\nBy focusing on the work itself, the review remains objective, and can open the door for a coaching conversation.\n\nObjective data to check biases \u2014 There are many common performance review biases, as well as ways to correct for them by contextualizing data, checking assumptions, and taking circumstance into account.\n\nIt\u2019s important not to let unconscious biases inform your analysis of a developer\u2019s work."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "It\u2019s important not to let unconscious biases inform your analysis of a developer\u2019s work.\n\nAligning developer and company incentives\n\nWhen performance reviews are based on hitting productivity benchmarks that are implicitly linked to compensation, developers might be less focused on ambitious goals and more on checking boxes that they believe will earn them a raise; rather than challenging themselves, they will likely be incentivized to play it safe with easy-to-achieve goals.\n\nEncouraging a focus on competency invites engineers to make decisions that have more potential to move the needle in an organization, and to take risks, even if they could lead to failure."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "Encouraging a focus on competency invites engineers to make decisions that have more potential to move the needle in an organization, and to take risks, even if they could lead to failure.\n\nDuring our webinar on data-driven leadership, Sophie Roberts, Director of Engineering at Shopify shared why rewarding productivity over growth could have adverse effects: \u201cYou end up in a situation where people want to get off projects that they don\u2019t really think they have executive buy-in, or try and game the work they\u2019re doing,\u201d Roberts said.\n\n\u201cI\u2019ve canceled people\u2019s projects and promoted them the next month, because how they were approaching the work was what we expect from a competency level of people who are more senior\u2026They may try to get work that is a more sure shot of moving a metric because they think that\u2019s what\u2019s going to result in their promotion or their career progression.\u201d\n\nAn emphasis on competency can improve the following:\n\nRisk-taking."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "If engineering leaders foster psychological safety within teams, developers are more likely to take risks without the fear of being penalized for failure.\n\nIf metrics are not tied to compensation, developers will likely be more ambitious with their goal-setting.\n\nFlexibility and adaptability.\n\nFailure and change are both inevitable in engineering organizations.\n\nInstead of trying to avoid mistakes, emphasize the importance of learning and of implementing thoughtful solutions that can have a lasting impact.\n\nUpskilling and developer retention.\n\nInvesting in the professional development of an engineer is a vote of confidence in their abilities.\n\nEngineering leaders can boost retention through upskilling or by enabling individuals to grow into more senior positions.\n\nUsing metrics to assess competency\n\nData-driven insights can provide engineering leaders with objective ways to evaluate developer competency, without tying metrics directly to compensation."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "Using metrics to assess competency\n\nData-driven insights can provide engineering leaders with objective ways to evaluate developer competency, without tying metrics directly to compensation.\n\nThey can help you assess a developer\u2019s progress, spot opportunities for improvement, and even combat common performance review biases.\n\nOne effective way to use metrics in performance reviews is to quantify impact.\n\nIn our webinar on data-driven performance reviews, Smruti Patel, now VP of Engineering at Apollo, shared how data helps IC\u2019s on her team recognize their impact on the business during self-evaluations.\n\n\u201cIt comes down to finding the right engineering data that best articulates impact to the team and business goals.\n\nSo if you think about it, you can use a very irrefutable factor, say, \u2018I shipped X, which reduced the end-to-end API latency from 4 or 5 seconds to 2.5 seconds.\n\nAnd this is how it impacted the business,\u201d she said."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "And this is how it impacted the business,\u201d she said.\n\nIn the same discussion, Katie Wilde, now Senior Director of Engineering at Snyk Cloud, shared how metrics explained a discrepancy between one engineer\u2019s self-evaluation and her peer reviews.\n\nThis engineer gave herself a strong rating, but her peers did not rate her as highly.\n\nWhen Wilde dug into the data, she found that it was not a case of the individual being overconfident, but a case of hidden bias \u2014 the engineer\u2019s PRs were being scrutinized more heavily than those of her male counterparts.\n\nIn both instances, data helped provide a more complete picture of a developer\u2019s abilities and impact, without being directly tied to performance benchmarks or compensation.\n\nDefining success in performance reviews\n\nOverall, metrics are able to provide concrete data to counteract assumptions, both on the part of the reviewer and the engineers themselves."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "Defining success in performance reviews\n\nOverall, metrics are able to provide concrete data to counteract assumptions, both on the part of the reviewer and the engineers themselves.\n\nBy taking a holistic approach to performance reviews and contextualizing qualitative and quantitative data, including having one-on-one conversations with developers, leaders can make more informed decisions about promotions and compensation for their teams.\n\nKeep in mind that performance reviews should be opportunities to encourage growth and career development for engineers, while gaining feedback that can inform engineering practices.\n\nMost importantly, rewarding competency is an effective way to align developer goals with business goals.\n\nThis way, leaders are invested in the growth of valuable members of their team who make a significant impact, while engineers are recognized for their contributions and able to grow in their careers.\n\nLooking for more engineering leadership insights?\n\nSign up for our newsletter."}, {"source": "https://codeclimate.com/blog/competency-vs-productivity", "content": "Looking for more engineering leadership insights?\n\nSign up for our newsletter.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "DORA, or DevOps Research and Assessment, is a research group formed by Nicole Forsgren, Gene Kim, and Jez Humble.\n\nAcquired by Google Cloud in 2019, the DORA team established four key metrics to measure critical areas of engineering team performance.\n\nThe framework also offers benchmarks for different stages of production, so that teams can check their performance against others in the industry.\n\nDORA metrics are one tool engineering leaders can use to gain a high level understanding of outcomes, and hone in on areas of their software delivery process that need improvement.\n\nWith these insights, leaders can stay up to date on SDLC (software development lifecycle) best practices, which can have a significant impact on the success of the business.\n\nOne of the four DORA metrics is Deployment Frequency, a measure of throughput that can be a starting point for examining one aspect of your engineering practices.\n\nWhat is the Deployment Frequency metric?"}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "What is the Deployment Frequency metric?\n\nDeployment Frequency is a measure of how often engineering teams successfully deploy code to production.\n\nAs with all DORA metrics, Deployment Frequency can help leaders understand their team\u2019s throughput and quantify how much value is being delivered to customers.\n\nTIP: For Velocity users: use Velocity\u2019s Deploy API to ingest data from your CI/CD tool to automate the calculation of Deployment Frequency.\n\nVelocity uses your actual deployment data, rather than proxy data which can be error-prone, for a more accurate measurement of how often your team is successfully deploying code.\n\nWhy is Deployment Frequency important?\n\nDeployment Frequency tracks how quickly teams can release new features or fixes, helping engineering leadership benchmark how often the team is able to get work out and receive actionable feedback from end-users.\n\nInnovating quickly is the key to maintaining a competitive edge over other organizations."}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "Innovating quickly is the key to maintaining a competitive edge over other organizations.\n\nDeployment Frequency gives engineering leaders a clearer understanding of how often their customers are receiving updates to the products on offer.\n\nTip: For Velocity users: Use our Application functionality to associate repositories and teams to an Application.\n\nThis allows users to filter and group deploys by Application and Team, making it easier to identify areas of improvement within your organization.\n\nHow to improve Deployment Frequency\n\nIf your team is deploying less than multiple times per day, it\u2019s time to focus on improving your Deployment Frequency metric.\n\nLook for opportunities to release smaller changes or new components in isolation.\n\nAn ideal time to identify this is during refinement sessions or planning sessions for a sprint.\n\nYou can even set the goal of a sprint to be a smaller unit of the overall functionality."}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "An ideal time to identify this is during refinement sessions or planning sessions for a sprint.\n\nYou can even set the goal of a sprint to be a smaller unit of the overall functionality.\n\nLow Deployment Frequency can indicate that PRs, or units of work, are too large.\n\nTo improve this, leaders can look at the PR Size metric.\n\nIf PR Size is too large, leaders can coach teams to practice good coding hygiene and break work into smaller units.\n\nTop performing engineering organizations keep PRs to less than 140 lines of code.\n\nLow Deployment Frequency could also indicate unnecessary or complex barriers to releasing to a production environment, like inefficiencies in the CI/CD pipeline, or requiring sign-off from a team member who\u2019s unavailable.\n\nTo attempt to remove these blockers, start by running focused retrospectives with the engineering teams to identify areas that could be improved or blockers that could be removed entirely."}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "To attempt to remove these blockers, start by running focused retrospectives with the engineering teams to identify areas that could be improved or blockers that could be removed entirely.\n\nImprovements to automatic testing and validation of new code can also help to increase Deployment Frequency.\n\nLack of confidence in the stability of the functionality being produced could also be a barrier to deployment.\n\nTo build confidence in new deliveries, engineering leaders can push for higher test coverage and improve Mean Time to Recovery, a DORA metric that focuses on the team\u2019s ability to recover from incidents in production environments.\n\nWhat is a good Deployment Frequency?\n\nAccording to benchmarks determined by DORA through surveys of over 35,000 organizations (varying in size and industry) high-performing teams are able to deploy on-demand, meaning they deploy multiple times per day.\n\nThe higher your Deployment Frequency, the more often code is going out to end users."}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "The higher your Deployment Frequency, the more often code is going out to end users.\n\nTeams are considered medium-performing if they deploy between 1 week and one month.\n\nUsing this rubric, engineering leaders can determine where they fall among competitors.\n\nEngineering leaders can use Deployment Frequency to figure out which software teams are excelling within the organization, and apply their best practices across other teams.\n\nYou can also benchmark your team against itself to measure progress over time, and see whether changes you\u2019re implementing have the desired effect on your Deployment Frequency.\n\nPutting Deployment Frequency into Context\n\nAs with all metrics, Deployment Frequency should be considered in the context of other data.\n\nOther DORA metrics, like Change Failure Rate, can tell you about the quality of your team\u2019s deployments, while Mean Lead Time for Changes offers insight into your team\u2019s efficiency."}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "Other DORA metrics, like Change Failure Rate, can tell you about the quality of your team\u2019s deployments, while Mean Lead Time for Changes offers insight into your team\u2019s efficiency.\n\nIt\u2019s important not to optimize for a single metric, but instead to strike a balance between speed metrics and stability metrics.\n\nWith Velocity\u2019s Analytics module, engineering leaders can view multiple metrics in tandem to see how they affect one another in real time.\n\nTo gain even more actionable insights, you can view DORA metrics with key, non-DORA engineering metrics.\n\nFor example, if your Deployment Frequency is low, you might want to start by viewing it alongside PR Size, which is the number of lines of code added, changed, or removed.\n\nYou might notice that the larger the PR Size, the lower a team\u2019s Deployment Frequency, which offers concrete reasoning for developers to submit smaller PRs."}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "You might notice that the larger the PR Size, the lower a team\u2019s Deployment Frequency, which offers concrete reasoning for developers to submit smaller PRs.\n\nWhile a correlation between these metrics is not diagnostic, it does offer engineering leaders a starting point to investigate a low Deployment Frequency, and identify necessary changes to processes.\n\nIf an engineering team demonstrates a favorable correlation between Deployment Frequency and PR Size, or another metric, engineering leaders have incentive to scale that team\u2019s best practices across the organization.\n\nCommunication is Key\n\nEngineering leaders should use objective data like DORA metrics as a starting point to identify opportunities for improvement.\n\nOnly by talking with developers and looking at data holistically can you make lasting improvements to your delivery and processes."}, {"source": "https://codeclimate.com/blog/deployment-frequency", "content": "Only by talking with developers and looking at data holistically can you make lasting improvements to your delivery and processes.\n\nDORA metrics can also be shared to communicate progress towards goals with broader leadership; they are great introductory metrics to share with technical and non-technical executives.\n\nTo learn more about how DORA metrics can help your team streamline and enhance delivery, speak with a Velocity Product Specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://codeclimate.com/blog/improve-engineering-team-health", "content": "Changes within a company, like growth, restructuring, down-sizing, or shifting goals, can be disruptive for engineering teams.\n\nDevelopers often look to team leads to understand how these organizational changes will impact them.\n\nAmid transitions and uncertainty, engineering leaders can be a beacon for their teams and help maintain the culture that they\u2019ve cultivated.\n\nRead on for four steps leaders can take to continue to have a positive impact on engineering team health:\n\nPrioritize psychological safety\n\nA phrase often referenced in leadership is psychological safety, the idea of fostering a culture within your team where engineers are comfortable taking risks, openly expressing their concerns, and sharing ideas.\n\nTactics for enhancing psychological safety can include:\n\nLeading with curiosity to find a root cause of a failure or bottleneck.\n\nFocusing on the work, not the engineer themselves, when identifying issues.\n\nCreating a safe culture free from microaggressions."}, {"source": "https://codeclimate.com/blog/improve-engineering-team-health", "content": "Focusing on the work, not the engineer themselves, when identifying issues.\n\nCreating a safe culture free from microaggressions.\n\nGetting to know direct reports on an interpersonal level.\n\nPsychological safety promotes employee satisfaction, and it also often leads to better team performance.\n\nAs Heidi Waterhouse, Principal Developer Advocate at LaunchDarkly said during our webinar on using data to promote psychological safety, \u201cThe faster a team moves, the more psychologically safe they are, the more they feel like they can take risks, but also the more they feel like they can take risks, the faster they move.\u201d\n\nKeep an eye out for burnout\n\nBurnout is present across all industries, especially after the work from home era upended the way we work and challenged us to reevaluate our priorities.\n\nUnderstandably, feelings of burnout are not something employees often want to share with team leads, and once they get to that point, it might be too late to offer solutions."}, {"source": "https://codeclimate.com/blog/improve-engineering-team-health", "content": "Understandably, feelings of burnout are not something employees often want to share with team leads, and once they get to that point, it might be too late to offer solutions.\n\nManagers might need to do some exploring in order to address burnout before it becomes a problem.\n\nCode Climate identified and addressed burnout on our own engineering teams by dogfooding Velocity.\n\nAfter several 1-on-1s revealed that engineers were excited about their work but feeling under pressure to ship new features, our engineering manager used Velocity\u2019s Reports Builder to find out the number of pushes that happened after 8 pm.\n\nThis inquiry revealed the team was working late more often than in previous months.\n\nTheir manager used this data to make two key changes: adjusting the scope of their work to something more more manageable, and\u00a0 giving engineers days off.\n\nShe continued to check in with her team and make sure work was evenly distributed among ICs."}, {"source": "https://codeclimate.com/blog/improve-engineering-team-health", "content": "She continued to check in with her team and make sure work was evenly distributed among ICs.\n\nSpotting and tackling undesirable trends, like engineers working on nights and weekends, allows leaders to make necessary changes before their teams experience burnout.\n\nUse metrics to communicate the business value of your team\n\nDuring board meetings and stakeholder conversations, engineering leaders act as the advocates and representatives for engineering teams.\n\nIt\u2019s important for developers to know that their team leaders are championing their work, and communicating their impact with stakeholders.\n\nSoftware engineering teams power organizations, but because it\u2019s so hard to quantify engineering work, it can be difficult to demonstrate the true value that work brings to the business.\n\nWith metrics, engineering leaders can make a business case for their teams by demonstrating trends in numbers to stakeholders."}, {"source": "https://codeclimate.com/blog/improve-engineering-team-health", "content": "With metrics, engineering leaders can make a business case for their teams by demonstrating trends in numbers to stakeholders.\n\nFor example, the CTO of WorkTango, Mike Couvillion, uses revenue-specific metrics when presenting to his board of directors.\n\nIn board slides, Couvillion now uses the following metrics to demonstrate efficiency:\n\nInnovation Rate\n\nPR Throughput\n\nCycle Time\n\nAverage Coding Days\n\nObjective data also helps leaders advocate for new talent or tools, because they can clearly demonstrate how those resources will help the company meet their goals.\n\nAddress engineers\u2019 concerns with enhanced 1-on-1s\n\nAs we mentioned above, metrics are highly useful for showcasing the impact of your engineering teams, spotting burnout in advance, and identifying when and where teams might be stuck.\n\nMetrics can also enhance 1-on-1s, and ensure that conversations are actionable."}, {"source": "https://codeclimate.com/blog/improve-engineering-team-health", "content": "Metrics can also enhance 1-on-1s, and ensure that conversations are actionable.\n\nYou can bring concerning trends or units of work that need to be addressed to a meeting, and work with that team member to come up with a plan for improvement.\n\nOr, you can call out and celebrate successes, such as positive trends or progress towards goals.\n\nYet metrics can\u2019t replace conversations with direct reports, and 1-on-1s should leave room for topics beyond progress and performance.\n\nPart of fostering a positive culture is getting to know employees on an interpersonal level, demonstrating that you recognize their hard work, and offering collaboration and coaching when things go off track.\n\nTaking the right steps\n\nIf your company is going through a transition, it\u2019s important to address your engineering team directly."}, {"source": "https://codeclimate.com/blog/improve-engineering-team-health", "content": "Taking the right steps\n\nIf your company is going through a transition, it\u2019s important to address your engineering team directly.\n\nPay attention to cultivating or maintaining a culture of psychological safety so they can express their concerns or take a risk by trying something new; be on the lookout for conditions that might cause burnout; be their champion when talking to stakeholders; and have more impactful 1-on-1 conversations to address issues and offer support.\n\nTo learn more about using metrics to enhance board meetings and 1-on-1s, speak with a Velocity product specialist.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "As the adage goes, the best laid plans go awry, and that also applies to building software.\n\nThe planning phase, including maintaining alignment, is critical in engineering, but even for the most mature teams, plans can change and evolve as they\u2019re executed.\n\nEngineering leaders need to keep teams aligned with the overall goals of their organization, and that includes setting and managing expectations for stakeholders so they won\u2019t be blindsided when roadmaps need to change.\n\nHow do CTOs successfully align on strategic priorities, navigate planning, and course-correct when things go off-track?\n\nAs part of Code Climate\u2019s Velocity Next event, we invited engineering leaders Catherine Miller, CTO at Flatiron Health; Juan Pablo Buritic\u00e1, SVP of Engineering at Ritchie Bros.; Ryan Grimard, SVP of Engineering at EverQuote; and D Orlando Keise, Head of Banking Foundational Platform at UBS, to share their experience leading engineering teams while keeping the C-Suite at ease."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Read on for highlights from the panel discussion, led by Peter Bell, CTO and Founder of CTO Connection.\n\nPeter Bell: An engineering leader\u2019s responsibility is keeping the team aligned with a larger organization, and that starts at the top.\n\nWhat do you do to ensure that you\u2019re on the same page with the rest of the C-Suite around things like resourcing, roadmap planning, and strategic priorities?\n\nRyan Grimard: Our teams use the Scaled Agile Framework, SAFe, for our planning and execution, and we involve our business leaders way in advance.\n\nThey\u2019re helping us with strategic planning for the company, and then our product and engineering teams are working through portfolio management and bringing things into the conveyor belt.\n\nWhen things are ready for final prioritization for a particular quarter, we use that process to go through \u201cbig room planning\u201d and a one-week prioritization planning process.\n\nThe end of that is effectively a confidence vote for all of the teams."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "The end of that is effectively a confidence vote for all of the teams.\n\nWe have 17 Agile teams, and the business leaders are in those meetings and hearing the confidence vote, and giving the thumbs up that they agree that these priorities that the teams have picked actually match up with the OKRs that we set at the company level.\n\nJuan Pablo Buritic\u00e1: I have two techniques.\n\nOne is to force the C-Suite to compromise on a single thing that they care about through a guiding principle.\n\nSo, do we care about speed, do we care about quality?\n\nAnd then, I use that guiding principle to force decision making on the group for alignment.\n\nThe second thing is, a set of cascading strategies: you have business strategy, the product strategy that cascades from the business strategy, and the engineering strategy, which should enable both.\n\nAnd then, it forces resourcing, staffing, and prioritization to be aligned with the guiding principle.\n\nThat guiding principle is the tiebreaker for everything."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "And then, it forces resourcing, staffing, and prioritization to be aligned with the guiding principle.\n\nThat guiding principle is the tiebreaker for everything.\n\nD Orlando Keise: What I\u2019ve found is important is to align on the mission.\n\nAnd I\u2019m using \u201cmission\u201d in a sense that\u2019s more than just the objective.\n\nI actually mean it almost in a military sense.\n\nWhat is our target?\n\nWhat are our threats?\n\nWhat\u2019s the landscape and the terrain that we\u2019re operating in?\n\nI think we all know that we\u2019re going to come up with a plan, that we have a roadmap, but I find that the plan is not going to survive first light with the outside world.\n\nI want to make sure that when that happens, we\u2019re aligned not only on what we\u2019re trying to do, but why we\u2019re doing it, and the environment that we\u2019re doing it in.\n\nBecause when we start changing that plan, if we\u2019re not aligned on all those other things, we\u2019re going to run into problems.\n\nPeter: What kind of conversation do you find the most difficult?"}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Because when we start changing that plan, if we\u2019re not aligned on all those other things, we\u2019re going to run into problems.\n\nPeter: What kind of conversation do you find the most difficult?\n\nIs it when you\u2019re in the planning phase, and you have to say, \u2018We\u2019re not going to fit all that into this quarter,\u2019 or is it once you\u2019ve said, \u2018Sure, we\u2019ll do this by the end of the year,\u2019 and then it\u2019s December 12th and you\u2019re realizing that Christmas might have to be canceled this year?\n\nCatherine Miller: Planning conversations are about feelings, and execution conversations are about data.\n\nI like the execution conversations better, because the planning conversation ends up being a very abstract conversation that is based on trust.\n\nThe more trust you have the better that goes, but you\u2019re all just guessing, and at the end of the day, you are trading on some relationship or some extrapolation, and you know it\u2019s wrong."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "The more trust you have the better that goes, but you\u2019re all just guessing, and at the end of the day, you are trading on some relationship or some extrapolation, and you know it\u2019s wrong.\n\nThen you get to the execution, and first of all, no one actually expects it to go on track, but what I love about execution is, you can check in along the way, you can see how it\u2019s going, and it forces a conversation.\n\nWhat are you going to do?\n\nWe literally cannot hit this deadline because of where we are.\n\nThat is a fact.\n\nThere is no hoping or wishing that will make that go away.\n\nSo you\u2019re forced into decision-making in a way that less mature teams often avoid at the planning stage where they just hope everything will be okay.\n\nRyan: I would say that our company has really evolved over the last two or three years."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Ryan: I would say that our company has really evolved over the last two or three years.\n\nIt used to be a much more difficult conversation upfront when business leaders asked, \u2018These are the strategic priorities; how many of these can we complete in a quarter?\u2019 Because they weren\u2019t necessarily involved in the process that I described earlier, they were surprised when we couldn\u2019t do everything at the same time and get everything out the door in that particular quarter.\n\nSo since we\u2019ve introduced this process, I feel like the more difficult part of that is through the backside, or partway through the quarter when the conversation might be: Why aren\u2019t we executing?\n\nAnd those really get broken down into retrospectives.\n\nWhen something doesn\u2019t quite go right, teams will do a full retrospective.\n\nThey will come up with a root cause analysis through that retrospective, and line up whatever we need to fix, then present that to those business leaders.\n\nI think that builds confidence across the board."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "I think that builds confidence across the board.\n\nMore recently it\u2019s been boiling down to either high levels of tech debt for a particular team, or our team isn\u2019t onboarded to what we call our \u201cpaved path,\u201d or our delivery pipeline.\n\nJuan Pablo: I like solving problems by preventing them from happening, so I\u2019m usually more uncomfortable when things have gone off track, because that means that we didn\u2019t prevent what we were trying to prevent.\n\nWhereas, when I\u2019m on the planning aspect, I feel very comfortable.\n\nPlans are lies we tell ourselves to get to the next stage and motivate our teams and motivate ourselves, so I have a much easier time on that end than the former.\n\nPeter: When you realize for whatever reason that your team isn\u2019t going to hit a date \u2014 there\u2019s some commitment you\u2019ve made, it\u2019s clear now that it\u2019s not going to happen \u2014 what\u2019s the first thing you do?"}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Juan Pablo: The moment I find out, I broadcast that state to the organization, because rather than rebuilding trust, I prefer not losing trust.\n\nI\u2019ve learned that people will usually handle\u00a0 transparency better than we think.\n\nSince we\u2019re building software and things tend to go wrong in software, I like building a culture where being off-track is not uncommon, and people don\u2019t react with fear.\n\nWe\u2019re a good engineering team if we\u2019re good at reacting quickly.\n\nD: I want to underscore something that Juan Pablo said.\n\nThe very first thing is to communicate it.\n\nThe second thing is to understand what kind of problem we have.\n\nDid we plan poorly for the amount or type of resources that we have?\n\nDid we have great resources but the ground shifted under us?\n\nI find that people think they\u2019re solving the real problem but they\u2019re really solving some symptom.\n\nSo, I try to go a few layers down to find the real problem that caused us to be off track to begin with, and attack that."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "So, I try to go a few layers down to find the real problem that caused us to be off track to begin with, and attack that.\n\nCatherine: Part of what I would do is figure out whose problem this is to solve.\n\nIs this something that I should really be [calling on] one of my VPs or even directors for, and setting a framework for them to solve, or is this significant enough for me to dig into directly?\n\nRyan: Keeping it amongst the team is important, at least for a place to start, where the team is a handful of engineers and the product manager or the product owner.\n\nThere\u2019s a lot of trust that should have been built up over time.\n\nWe\u2019re pretty big on keeping teams whole and not rotating people around unless there\u2019s some sort of internal mobility opportunity for folks.\n\nPeter: So you found out things are off track, and you have to prepare for a difficult conversation with a senior stakeholder.\n\nAre there any things you do when preparing for that to try to make it just a little more likely to go smoothly?"}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Are there any things you do when preparing for that to try to make it just a little more likely to go smoothly?\n\nD: A lot of my preparation for moments like that happens long before the moment.\n\nA lot of us have used the word trust at various times, and that\u2019s huge.\n\nI\u2019m trying to establish trust with stakeholders and partners from day one, because so many of these moments are going to rely on trust to go the way they need to go.\n\nThe other thing I try to do in the moment, when it comes to explaining a difficult truth, is to take any of the emotions out of it.\n\nI try to lay out something that\u2019s very fact-based.\n\nCat: I very much agree with the emotional regulation piece as a key part.\n\nIf I have the leeway and the time, the best thing I can do is I can sit down with my coach.\n\nAs we talk, I lose my emotional attachment to things, until I\u2019m just thinking about options that are good and bad and what the cost to the business is.\n\nRyan: Data gathering, absolutely."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "As we talk, I lose my emotional attachment to things, until I\u2019m just thinking about options that are good and bad and what the cost to the business is.\n\nRyan: Data gathering, absolutely.\n\nPre-reads I think are huge, meaning sending out what you plan on talking about beforehand, and making it clear that reading the pre-read is a requirement.\n\nYou shouldn\u2019t be going into the meeting and then learning about what you\u2019re about to hear about.\n\nThe pre-reads give you that opportunity to be informed before the meeting, and if successful, meetings are for making decisions.\n\nWe\u2019ve run into situations where the pre-reads are pretty in-depth, all of the decision making and our suggestions on where to go next are already laid out, and the meeting is five minutes long.\n\nJuan Pablo: I use paper as my coach.\n\nI believe writing is thinking, and I try to anticipate questions that might come from the conversation."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Juan Pablo: I use paper as my coach.\n\nI believe writing is thinking, and I try to anticipate questions that might come from the conversation.\n\nIf I\u2019m walking into a board meeting, I try to minimize the times I say: I don\u2019t know, let me get back to you.\n\nI have my talking points.\n\nWhat is the outcome of the conversation that I\u2019m seeking?\n\nAm I trying to inform?\n\nAm I trying to convince?\n\nAm I trying to drive to a decision?\n\nBased on that, I bring options or I shape my talking points.\n\nPeter: Things didn\u2019t go according to plan, you missed the deadlines, how do you rebuild trust both within your engineering org, and with your executive stakeholders?\n\nCat: It\u2019s not inherently breaking trust to miss your deadlines if you\u2019re being transparent about your metrics and what you\u2019re seeing as it goes along.\n\nIt\u2019s mostly that transparent communication that will leave no one surprised.\n\nRyan: I think rebuilding trust is really about consistency and showing continuous improvement."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "It\u2019s mostly that transparent communication that will leave no one surprised.\n\nRyan: I think rebuilding trust is really about consistency and showing continuous improvement.\n\nWe\u2019ve been using some of the DORA Metrics that Code Climate Velocity has been putting out.\n\nWe have custom reports for DORA Metrics, and they\u2019ve been really awesome.\n\nBeing able to show that the team is performing, that the issue that we ran into was kind of out of our control, and showing there\u2019s an upward progression to how they\u2019re performing\u2026it\u2019s big to show that they\u2019re not not performing.\n\nJuan Pablo: I usually lead product engineering teams, and so the focus is less the plan or the deadline and more the outcome, so ensuring that the teams understand the goal that they\u2019re supposed to be driving."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "And in product, your goals are so variable, and you can invest 6 months launching a feature that tanks or spend a week and suddenly you have a great product, and so what I care about is\u2026 less about times and deadlines and estimates and plans and more about, are you being impactful and are you shipping as fast as you can so we can learn?\n\nD: I would underscore that rebuilding trust is really about being reliable in the things that you say.\n\nCommunication is important.\n\nWe had talked about diagnosing the real problem, and now when you\u2019re going and acting on that and executing.\n\nThe second time around, are you hitting what you aimed to hit based on the problem that you diagnosed?\n\nHopefully you are doing a good job of identifying what that real problem is and then when you drive the team to execute towards that milestone, it actually solves what you said it was going to solve \u2026 as you do that you\u2019re rebuilding trust."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Audience member: [To Juan Pablo] Tactically, how often are you resetting your principles because you can\u2019t make the mark or realize priority two has to be priority one?\n\nJuan Pablo: I\u2019m doing a good job if I\u2019m not resetting them that much, or they at least have an 18-24 month lifespan.\n\nI do start from a mission.\n\nWhen I was at Splice, the mission of engineering was to enable Splice to learn faster than the market before we ran out of money.\n\nSo that was driving engineers, that was our mission, anything you do is in service of that, because we\u2019re serving musicians.\n\nAnd from there, the principles that we set were about sensible choices in technology.\n\nWe were like, yes it\u2019s fun to learn, but our job is not to learn; our job is to learn faster than the market.\n\nI also crowdsourced feedback from the team as far as what resonated with them in regards to our principles, because usually I don\u2019t have the full perspective."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "I also crowdsourced feedback from the team as far as what resonated with them in regards to our principles, because usually I don\u2019t have the full perspective.\n\nIf there\u2019s ownership from the group, it\u2019s easier for them to also embrace the principles.\n\nAudience member: There\u2019s a known standard in the tech industry of listening to your customers versus understanding business objectives from leadership.\n\nWhat has been your experience trying to carve in both business objectives and customer feedback?\n\nCat: More and more, I think every dichotomy in tech is long- and short-term planning."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "What has been your experience trying to carve in both business objectives and customer feedback?\n\nCat: More and more, I think every dichotomy in tech is long- and short-term planning.\n\nFor example, I think that tech debt is long term and product and desires is short term, and I think what you\u2019re talking about a little bit here is what your customers are beating down your door right now, whereas presumably your business metrics are about your long range plans, what your business needs to grow, what our burn rate needs to be\u2026 And I don\u2019t necessarily have an answer for you, but I think dispassionately thinking about how much are we investing immediately \u2014 how much do we need to do this month or this year, versus three years from now?\n\n\u2014 is an interesting way to think about your portfolio across a lot of different things like this."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "\u2014 is an interesting way to think about your portfolio across a lot of different things like this.\n\nRyan: I worked at a company where it was very referral based, and the business metrics were: How many referrals did we make, and how much revenue did we make from that referral?\n\nThe other side of that is, how happy is your customer?\n\nDoes a happier customer actually produce more revenue?\n\nMaybe not in the very short term, but repeat customers, and happier folks in the marketplace of that particular referral business goes a long way.\n\nThe business is able to interact with a consumer that\u2019s happy and potentially upsell them and so on.\n\nJuan Pablo: Usually we\u2019ve done a good job as a leadership team if we\u2019ve set business metrics that empower teams to take these customer needs and act on them.\n\nBecause customer needs and business metrics should not be diametrically opposed, and if they are, there\u2019s something wrong.\n\nWatch the full panel here.\n\nSubscribe to our newsletter for more engineering intelligence."}, {"source": "https://codeclimate.com/blog/maintaining-alignment-with-stakeholders", "content": "Watch the full panel here.\n\nSubscribe to our newsletter for more engineering intelligence.\n\nSubscribe\n\nShare\n\nRelated Blog Posts\n\nOther articles you may also like:\n\nUsing DORA Metrics: What is Deployment Frequency and Why Does it Matter?\n\n6 min read\n\nIntroducing Incidents API: Get a Handle on Interruptions With Our New Feature\n\n4 min read\n\nDORA Assessment is Tricky \u2014 Here\u2019s How We Calculate the 4 Metrics\n\n6 min read"}]