[{"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityDeveloper productivity is complex and nuanced, \nwith important implications for software \ndevelopment teams.\n\nA clear understanding of \ndefining, measuring, and predicting developer \nproductivity could provide organizations, \nmanagers, and developers with the ability to make higher-\nquality software\u2014and make it more efficiently.\n\nDeveloper productivity has been studied extensively.\n\nUnfortunately, after decades of research and practical \ndevelopment experience,  knowing how to measure \nproductivity or even define developer productivity has \nremained elusive, while myths about the topic are common.\n\nFar too often teams or managers attempt to measure \ndeveloper productivity with simple metrics, attempting to \ncapture it all with \u201cone metric that matters.\u201d\nOne important measure of productivity is personal \nperception;1 this may resonate with those who claim to be \nin \u201ca flow\u201d on productive days."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "There is also agreement that developer productivity \nis necessary not just to improve engineering outcomes, \nbut also to ensure the well-being and satisfaction of \ndevelopers, as productivity and satisfaction are intricately \nconnected.12,20 There\u2019s more \nto it than \nyou think.\n\nNICOLE FORSGREN, Github\nMARGARET-ANNE STOREY, \nUniversity Of Victoria  \nCHANDRA MADDILA,  \n THOMAS ZIMMERMANN,  \nBRIAN HOUCK, AND  \n JENNA BUTLER,  \n Microsoft Research1 of 29TEXT  \nONLY \n        SPACE   Theof \nDeveloper \nProductivity\nacmqueue | january-february 2021   1"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityEnsuring the efficient development of software \nsystems and the well-being of developers has never \nbeen more important as the Covid-19 pandemic has \nforced the majority of software developers worldwide \nto work from home,17 disconnecting developers and \nmanagers from their usual workplaces and teams.\n\nAlthough this was unexpected and unfortunate, this \nchange constitutes a rare \u201cnatural experiment\u201d that \nstatisticians can capitalize upon to study, compare, and \nunderstand developer productivity across many different \ncontexts.\n\nThis forced disruption and the future transition \nto hybrid remote/colocated work expedites the need to \nunderstand developer productivity and well-being, with \nwide agreement that doing so in an efficient and fair way is \ncritical.\n\nThis article explicates several common myths and \nmisconceptions about developer productivity."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "This article explicates several common myths and \nmisconceptions about developer productivity.\n\nThe most \nimportant takeaway from exposing these myths is that \nproductivity cannot be reduced to a single dimension (or \nmetric!).\n\nThe prevalence of these myths and the need \nto bust them motivated our work to develop a practical \nmultidimensional framework, because only by examining \na constellation of metrics in tension can we understand \nand influence developer productivity.\n\nThis framework, \ncalled SPACE, captures the most important dimensions \nof developer productivity: satisfaction and well-being; \nperformance; activity; communication and collaboration; \nand efficiency and flow.\n\nBy recognizing and measuring \nproductivity with more than just a single dimension, teams \nand organizations can better understand how people and \nteams work, and they can make better decisions."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "By recognizing and measuring \nproductivity with more than just a single dimension, teams \nand organizations can better understand how people and \nteams work, and they can make better decisions.\n\n2 of 29\nThe most \nimportant \ntakeaway \nfrom  \nexposing \nthese myths is \nthat productivity  \ncannot be re -\nduced to a single \ndimension  \n(or metric!).\n\nacmqueue | january-february 2021   2"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityThe article demonstrates how this framework can \nbe used to understand productivity in practice and why \nusing it will help teams better understand developer \nproductivity, create better measures to inform their \nwork and teams, and may positively impact engineering \noutcomes and developer well-being.\n\nMYTHS AND MISCONCEPTIONS ABOUT  \nDEVELOPER PRODUCTIVITY\nA number of myths about developer productivity have \naccumulated over the years.\n\nAwareness of these \nmisconceptions leads to a better understanding of \nmeasuring productivity.\n\nMYTH:  Productivity is all about developer activity \nThis is one of the most common myths, and it can cause \nundesirable outcomes and developer dissatisfaction.\n\nSometimes, higher volumes of activity appear for various \nreasons: working longer hours may signal developers \nhaving to \u201cbrute-force\u201d work to overcome bad systems \nor poor planning to meet a predefined release schedule."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "On the other hand, increased activity may reflect better \nengineering systems, providing developers with the \ntools they need to do their jobs effectively, or better \ncollaboration and communication with team members in \nunblocking their changes and code reviews.\n\nActivity metrics alone do not reveal which of these is \nthe case, so they should never be used in isolation either \nto reward or to penalize developers.\n\nEven straightforward \nmetrics such as number of pull requests, commits, or \ncode reviews are prone to errors because of gaps in data 3 of 29\nacmqueue | january-february 2021   3"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityand measurement errors, and systems that report these \nmetrics will miss the benefits of collaboration seen in peer \nprogramming or brainstorming.\n\nFinally, developers often \nflex their hours to meet deadlines, making certain activity \nmeasures difficult to rely on in assessing productivity.\n\nMYTH:  Productivity is only about individual performance  \nWhile individual performance is important, contributing \nto the success of the team is also critical to measuring \nproductivity.\n\nMeasures of performance that balance the \ndeveloper, team, and organization are important.\n\nSimilar \nto team sports, success is judged both by a player\u2019s \npersonal performance as well as the success of their team.\n\nA developer who optimizes only for their own personal \nproductivity may hurt the productivity of the team.\n\nMore \nteam-focused activities such as code reviews, on-call \nrotations, and developing and managing engineering \nsystems help maintain the quality of the code base and the \nproduct/service."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "More \nteam-focused activities such as code reviews, on-call \nrotations, and developing and managing engineering \nsystems help maintain the quality of the code base and the \nproduct/service.\n\nFinding the right balance in optimizing for \nindividual, team, and organizational productivity, as well as \nunderstanding possible tradeoffs, is key.\n\nMYTH:  One productivity metric can tell us everything \nOne common myth about developer productivity is that it \nproduces a universal metric, and that this \u201cone metric that \nmatters\u201d can be used to score teams on their overall work \nand to compare teams across an organization and even an \nindustry.\n\nThis isn\u2019t true.\n\nProductivity represents several \nimportant dimensions of work and is greatly influenced by \nthe context in which the work is done.\n\n4 of 29\nacmqueue | january-february 2021   4"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityMYTH:  Productivity measures are useful only  \nfor managers \nDevelopers often say that productivity measures aren\u2019t \nuseful.\n\nThis may come from the misuse of measures by \nleaders or managers, and it\u2019s true that when productivity \nis poorly measured and implemented, it can lead to \ninappropriate usage in organizations.\n\nIt\u2019s disappointing that \nproductivity has been co-opted this way, but it\u2019s important \nto note that developers have found value in tracking their \nown productivity\u2014both for personal reasons and for \ncommunicating with others.\n\nBy remembering that developer productivity is \npersonal,7 developers can leverage it to gain insights into \ntheir work so they can take control of their time, energy, \nand days.\n\nFor example, research has shown that high \nproductivity is highly correlated with feeling satisfied and \nhappy with work.12,20 Finding ways to improve productivity \nis also about finding ways to introduce more joy, and \ndecrease frustration, in a developer\u2019s day."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "MYTH:  Productivity is only about engineering systems  \nand developer tools  \nWhile developer tools and workflows have a large \nimpact on developer productivity, human factors such as \nenvironment and work culture have substantial impact too.\n\nOften the critical work needed to keep the environment \nand culture healthy can be \u201cinvisible\u201d to many members \nof the organization or to metrics traditionally used for \nmeasuring productivity.\n\nWork such as morale building, \nmentoring, and knowledge sharing are all critical to \nsupporting a productive work environment and yet are 5 of 29\nacmqueue | january-february 2021   5"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityoften not measured.\n\nThe \u201cinvisible\u201d work that benefits the \noverall productivity of the team is just as important as \nother more commonly-measured dimensions.21\nSPACE: A FRAMEWORK FOR UNDERSTANDING  \nDEVELOPER PRODUCTIVITY\nProductivity is about more than the individual or the \nengineering systems; it cannot be measured by a single \nmetric or activity data alone; and it isn\u2019t something that \nonly managers care about.\n\nThe SPACE framework was \ndeveloped to capture different dimensions of productivity \nbecause without it, the myths just presented will persist.\n\nThe framework provides a way to think rationally about \nproductivity in a much bigger space and to choose metrics \ncarefully in a way that reveals not only what those metrics \nmean, but also what their limitations are if used alone or in \nthe wrong context."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Satisfaction and well-being  \nSatisfaction  is how fulfilled developers feel with their \nwork, team, tools, or culture; well-being  is how healthy \nand happy they are, and how their work impacts it.\n\nMeasuring satisfaction and well-being can be beneficial \nfor understanding productivity20 and perhaps even for \npredicting it.15 For example, productivity and satisfaction \nare correlated, and it is possible that satisfaction could \nserve as a leading indicator for productivity; a decline \nin satisfaction and engagement could signal upcoming \nburnout and reduced productivity.13\nFor example, when many places shifted to mandatory \nwork from home during the pandemic, an uptick occurred 6 of 29\nProductivity \nand satis -\nfaction are \ncorrelated, \nand it is \npossible that  \nsatisfaction \ncould serve as a \nleading indicator \nfor productivity.\n\nacmqueue | january-february 2021   6"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityin some measures of productivity (e.g., code commits \nand speed to merge pull requests).8 Qualitative data, \nhowever, has shown that some people were struggling \nwith their well-being.3 This highlights the importance \nof balanced measures that capture several aspects of \nproductivity: While some activity measures looked positive, \nadditional measures of satisfaction painted a more holistic \npicture, showing that productivity is personal, and some \ndevelopers were approaching burnout.\n\nTo combat this, \nsome software groups in large organizations implemented \n\u201cmental health\u201d days\u2014essentially, free days off to help \npeople avoid burnout and improve well-being.\n\nIt is clear that satisfaction and well-being are important \ndimensions of productivity.\n\nThese qualities are often \nbest captured with surveys.\n\nTo assess the satisfaction \ndimension, you might measure the following:\n3  Employee satisfaction."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "These qualities are often \nbest captured with surveys.\n\nTo assess the satisfaction \ndimension, you might measure the following:\n3  Employee satisfaction.\n\nThe degree of satisfaction among \nemployees, and whether they would recommend their \nteam to others.\n\n3  Developer efficacy.\n\nWhether developers have the tools \nand resources they need to get their work done.\n\n3  Burnout.\n\nExhaustion caused by excessive and prolonged \nworkplace stress.\n\nPerformance  \nPerformance  is the outcome of a system or process.\n\nThe \nperformance of software developers is hard to quantify, \nbecause it can be difficult to tie individual contributions \ndirectly to product outcomes.\n\nA developer who produces \na large amount of code may not be producing high-\nquality code.\n\nHigh-quality code may not deliver customer 7 of 29\nacmqueue | january-february 2021   7"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityvalue.\n\nFeatures that delight customers may not always \nresult in positive business outcomes.\n\nEven if a particular \ndeveloper\u2019s contribution can be tied to business outcomes, \nit is not always a reflection of performance since the \ndeveloper may have been assigned a less impactful \ntask, instead of having agency to choose more impactful \nwork.\n\nFurthermore, software is often the sum of many \ndevelopers\u2019 contributions, exacerbating the difficulty in \nevaluating the performance of any individual developer.\n\nIn \nmany companies and organizations, software is written by \nteams, not individuals.\n\nFor these reasons, performance is often best evaluated \nas outcomes instead of output .\n\nThe most simplified view of \nsoftware developer performance could be, Did the code \nwritten by the developer reliably do what it was supposed \nto do?\n\nExample metrics to capture the performance \ndimension include:\n3  Quality.\n\nReliability, absence of bugs, ongoing service \nhealth.\n\n3  Impact."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Example metrics to capture the performance \ndimension include:\n3  Quality.\n\nReliability, absence of bugs, ongoing service \nhealth.\n\n3  Impact.\n\nCustomer satisfaction, customer adoption and \nretention, feature usage, cost reduction.\n\nActivity  \nActivity  is a count of actions or outputs completed in the \ncourse of performing work.\n\nDeveloper activity, if measured \ncorrectly, can provide valuable but limited insights about \ndeveloper productivity, engineering systems, and team \nefficiency.\n\nBecause of the complex and diverse activities \nthat developers perform, their activity is not easy to \nmeasure or quantify.\n\nIn fact, it is almost impossible to \ncomprehensively measure and quantify all the facets 8 of 29\nIt is almost \nimpossible to \ncomprehen -\nsively measure \nand quantify \nall the facets  \nof developer \nactivity across \nengineering  \nsystems and  \nenvironments.\n\nacmqueue | january-february 2021   8"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityof developer activity across engineering systems and \nenvironments.\n\nA well-designed engineering system, \nhowever, will help in capturing activity metrics along \ndifferent phases of the software development life cycle \nand quantify developer activity at scale.\n\nSome of the \ndeveloper activities that can be measured and quantified \nrelatively easily are:\n3  Design and coding.\n\nVolume or count of design documents \nand specs, work items, pull requests, commits, and code \nreviews.\n\n3  Continuous integration and deployment.\n\nCount of build, \ntest, deployment/release, and infrastructure utilization.\n\n3  Operational activity.\n\nCount or volume of incidents/\nissues and distribution based on their severities, on-call \nparticipation, and incident mitigation.\n\nThese metrics can be used as waypoints to measure \nsome tractable developer activities, but they should never \nbe used in isolation to make decisions about individual or \nteam productivity because of their known limitations."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "They \nserve as templates to start with and should be customized \nbased on organizational needs and development \nenvironments.\n\nAs mentioned earlier, many activities that \nare essential to developing software are intractable (such \nas attending team meetings, participating in brainstorming, \nhelping other team members when they encounter issues, \nand providing architectural guidance, to name a few).\n\nCommunication and collaboration\nCommunication  and  collaboration  capture how people \nand teams communicate and work together.\n\nSoftware \ndevelopment is a collaborative and creative task that relies 9 of 29\nacmqueue | january-february 2021   9"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityon extensive and effective communication, coordination, \nand collaboration within and between teams.11 Effective \nteams that successfully contribute to and integrate \neach other\u2019s work efficiently rely on high transparency5 \nand awareness6 of team member activities and task \npriorities.\n\nIn addition, how information flows within and \nacross teams impacts the availability and discoverability \nof documentation that is needed for the effective \nalignment and integration of work.\n\nTeams that are diverse \nand inclusive are higher performing.22 More effective \nteams work on the right problems, are more likely to be \nsuccessful at brainstorming new ideas, and will choose \nbetter solutions from all the alternatives.\n\nWork that contributes to a team\u2019s outcomes or supports \nanother team member\u2019s productivity may come at the \nexpense of an individual\u2019s productivity and their own ability \nto get into a state of flow, potentially reducing motivation \nand satisfaction."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Effective collaboration, however, can \ndrive down the need for some individual activities (e.g., \nunnecessary code reviews and rework), improve system \nperformance (faster pull request merges may improve \nquality by avoiding bugs), and help sustain productivity and \navoid (or conversely, if not done right, increase) burnout.\n\nUnderstanding and measuring team productivity and \nteam member expectations are, however, complicated \nbecause of items that are difficult to measure such as \ninvisible work21 and articulation work for coordinating \nand planning team tasks.18 That said, the following are \nexamples of metrics that may be used as proxies to \nmeasure communication, collaboration, and coordination: \n3 Discoverability of documentation and expertise.10 of 29\nacmqueue | january-february 2021   10"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivity3 How quickly work is integrated.\n\n3  Quality of reviews of work contributed by team \nmembers.\n\n3  Network metrics that show who is connected to whom \nand how.\n\n3 Onboarding time for and experience of new members.\n\nEfficiency and flow\nFinally, efficiency  and flow  capture the ability to complete \nwork or make progress on it with minimal interruptions or \ndelays, whether individually or through a system.\n\nThis can \ninclude how well activities within and across teams are \norchestrated and whether continuous progress is being made."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "This can \ninclude how well activities within and across teams are \norchestrated and whether continuous progress is being made.\n\nSome research associates productivity with the ability \nto get complex tasks done with minimal distractions or \ninterruptions.2 This conceptualization of productivity is \nechoed by many developers when they talk about \u201cgetting \ninto the flow\u201d when doing their work\u2014or the difficulty \nin finding and optimizing for it, with many books and \ndiscussions addressing how this positive state can be \nachieved in a controlled way.4 For individual efficiency \n(flow), it\u2019s important to set boundaries to get productive \nand stay productive\u2014for example, by blocking off time for \na focus period.\n\nIndividual efficiency is often measured by \nuninterrupted focus time or the time within value-creating \napps (e.g., the time a developer spends in the integrated \ndevelopment environment is likely to be considered \n\u201cproductive\u201d time)."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "At the team and system level, efficiency is related to \nvalue-stream mapping, which captures the steps needed \nto take software from idea and creation to delivering it to The concep -\ntualization \nof produc -\ntivity is \nechoed by \nmany developers \nwhen they talk \nabout \u201cgetting \ninto the flow\u201d \nwhen doing  \ntheir work.11 of 29\nacmqueue | january-february 2021   11"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitythe end customer.\n\nTo optimize the flow in the value stream, \nit is important to minimize delays and handoffs.\n\nThe DORA \n(DevOps Research and Assessment) framework introduced \nseveral metrics to monitor flow within teams9\u2014for \nexample, deployment frequency measures how often an \norganization successfully releases to production, and lead \ntime for changes measures the amount of time it takes a \ncommit to get into production.\n\nIn addition to the flow of changes through the system, \nthe flow of knowledge and information is important.\n\nCertain aspects of efficiency and flow may be hard to \nmeasure, but it is often possible to spot and remove \ninefficiencies in the value stream.\n\nActivities that produce \nno value for the customer or user are often referred to as \nsoftware development waste19\u2014for example, duplicated \nwork, rework because the work was not done correctly, or \ntime-consuming rote activities."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Some example metrics to capture the efficiency and \nflow dimension are:\n3  Number of handoffs in a process; number of handoffs \nacross different teams in a process.\n\n3 Perceived ability to stay in flow and complete work.\n\n3  Interruptions: quantity, timing, how spaced, impact on \ndevelopment work and flow.\n\n3  Time measures through a system: total time, value-\nadded time, wait time.\n\nEfficiency is related to all the SPACE dimensions.\n\nEfficiency at the individual, team, and system levels has \nbeen found to be positively associated with increased \nsatisfaction.\n\nHigher efficiency, however, may also \nnegatively affect other factors.\n\nFor example, maximizing Efficiency  \nis related  \nto all  \nthe SPACE  \ndimensions.\n\n12 of 29\nacmqueue | january-february 2021   12"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityflow and speed may decrease the quality of the system \nand increase the number of bugs visible to customers \n(performance).\n\nOptimizing for individual efficiency by \nreducing interruptions may decrease the ability to \ncollaborate, block others\u2019 work, and reduce the ability of \nthe team to brainstorm.\n\nFRAMEWORK IN ACTION\nTo illustrate the SPACE framework, figure 1 lists concrete \nmetrics that fall into each of the five dimensions.\n\nThe \nfigure provides examples of individual-, team- or group-, \nand system-level measures.\n\nThree brief discussions about \nthese metrics follow: First, an example set of metrics \nconcerning code review is shown to cover all dimensions of \nthe SPACE framework, depending on how they are defined \nand proxied.\n\nNext, additional examples are provided for \ntwo select dimensions of the framework: activity, and \nefficiency and flow."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Next, additional examples are provided for \ntwo select dimensions of the framework: activity, and \nefficiency and flow.\n\nThe section closes with a discussion \nof how to use the framework: combining metrics for a \nholistic understanding of developer productivity, as well \nas cautions.\n\nThe accompanying sidebar shows how the \nframework can be used for understanding productivity in \nincident management.\n\nLet\u2019s begin with code review as an example scenario that \npresents a set of metrics that can cover all five dimensions \nof the SPACE framework, depending on how it is framed \nand which metric is used: \n3 Satisfaction.\n\nPerceptual measures about code reviews \ncan reveal whether developers view the work in a good or \nbad light\u2014for example if they present learning, mentorship, \nor opportunities to shape the codebase.\n\nThis is important, 13 of 29\nacmqueue | january-february 2021   13"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityIndividual\nOne \npersonz Developer \nsatisfaction\nzRetention\u2020 \nz Satisfaction \nwith code \nreviews \nassigned \nz Perception of \ncode reviewsz Code  \nreview \nvelocityz Number \nof code \nreviews \ncompleted \nz  Coding time\nz # Commits \nz Lines of \ncode\u2020z Code review \nscore (quality or \nthoughtfulness) \nz PR merge times\nz Quality of \nmeetings\u2020\nz Knowledge \nsharing, \ndiscoverability \n(quality of \ndocumentation)z Code review \ntiming \nz Produc-\ntivity \nperception \nz Lack of \ninter-\nruptions \nTeam or \nGroup\nPeople \nthat work \ntogetherz Developer \nsatisfaction\nz Retention\u2020 z Code  \nreview \nvelocity\nz Story points \nshipped\u2020z # Story \npoints \ncompleted\u2020z PR merge times \nz Quality of \nmeetings\u2020\nz Knowledge \nsharing or \ndiscoverability \n(quality of \ndocumentation) z Code review \ntiming \nz Handoffs\nSystem\nEnd-to-\nend work \nthrough \na system \n(like a  \ndevel-  \nopment \npipeline)z Satisfaction \nwith \nengineering \nsystem (e.g., CI/\nCD pipeline)z Code review \nvelocity\nz Code review \n(acceptance \nrate)\nz Customer \nsatisfaction \nz Reliability \n(uptime) z Frequency \nof deploy-\nmentsz Knowledge \nsharing, \ndiscoverability \n(quality of \ndocumentation)z Code review \ntiming \nz Velocity/ \nflow \nthrough the \nsystem LevelSatisfaction & well-being\nHow fulfilled, happy, and healthy one isPerformance\nAn outcome of a processActivity\nThe count of actions or outputsCommunication & collaboration\nHow people talk and work togetherEfficiency & flow\nDoing work with minimal \n delays or interruptions\n\u2020 Use these metrics with (even more) caution \u2014 they can proxy more things.FIGURE 1 : Example metrics14 of 29\nacmqueue | january-february 2021   14"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitybecause the number of code reviews per developer may \nsignal dissatisfaction if some developers feel they are \nconsistently assigned a disproportionate amount of code \nreviews, leaving them with less time for other work.\n\n3 Performance.\n\nCode-review velocity captures the speed \nof reviews; because this can reflect both how quickly an \nindividual completes a review and the constraints of the \nteam, it is both an individual- and a team-level metric.\n\n(For \nexample, an individual could complete a review within an \nhour of being assigned, but a team could have a policy of \nleaving all reviews open for 24 hours to allow all team \nmembers to see the proposed changes.)\n\n3 Activity.\n\nNumber of code reviews completed is an \nindividual metric capturing how many reviews have been \ncompleted in a given time frame, and contributes to the \nfinal product.\n\n3 Communication and collaboration."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "3 Communication and collaboration.\n\nCode reviews \nthemselves are a way that developers collaborate \nthrough code, and a measure or score of the quality or \nthoughtfulness of code reviews is a great qualitative \nmeasure of collaboration and communication.\n\n3 Efficiency and flow.\n\nCode review is important but can \ncause challenges if it interrupts workflow or if delays \ncause constraints in the system.\n\nSimilarly, having to \nwait for a code review can delay a developer\u2019s ability to \ncontinue working.\n\nBatching up code reviews so they don\u2019t \ninterrupt a developer\u2019s coding time (which would impact \nindividual measures), while also not causing delays in \nthe throughput of the system (which impacts system \nmeasures), allows teams to deliver code efficiently (team-\nlevel measures).\n\nTherefore, measuring the effects of code-15 of 29\nacmqueue | january-february 2021   15"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityreview timing on the efficiency and flow of individuals, \nteams, and the system is important\u2014this can be done \nthrough perceptual or telemetry measures that capture \nthe time to complete reviews and the characteristics of \ninterruptions (such as timing and frequency).\n\nLet\u2019s examine the SPACE framework in more depth by \nlooking further at the dimensions of (1) activity and (2) \nefficiency and flow.\n\nIn this example, the activity measures \nare individual-level metrics: number of commits, coding \ntime (total time spent or times of day), and number of code \nreviews completed.\n\nThese best describe work that directly \ncontributes to the final product, understanding that work \npatterns and behaviors are influenced by the teams and \nenvironments in which developers work.\n\nEfficiency and flow have a broader mix of metrics."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Efficiency and flow have a broader mix of metrics.\n\nSelf-\nreported measures of productivity are best captured at \nthe individual level: asking a developer whether the team \nis productive is subject to blind spots, while asking if that \nmember felt productive or was able to complete work \nwith minimal distractions is a useful signal.\n\nYou can also \nmeasure the flow of work\u2014whether code, documents, or \nother items\u2014through a system, and capture metrics such \nas the time it takes or the number of handoffs, delays, \nand errors in the software delivery pipeline.\n\nThese would \nconstitute system-level metrics, because their values \nwould capture the journey of the work item through the \nentire workflow, or system.\n\nHOW TO USE THE FRAMEWORK\nTo measure developer productivity, teams and leaders \n(and even individuals) should capture several metrics 16 of 29\nacmqueue | january-february 2021   16"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityacross multiple dimensions of the framework\u2014at least \nthree are recommended.\n\nFor example, if you\u2019re already \nmeasuring commits (an activity measure), don\u2019t simply \nadd the number of pull requests and coding time to your \nmetrics dashboard, as these are both activity metrics.\n\nAdding these can help round out the way you capture the \nactivity dimension of productivity, but to really understand \nproductivity, add at least one metric from two different \ndimensions: perhaps perception of productivity and pull \nrequest merge time.\n\nAnother recommendation is that at least one of the \nmetrics include perceptual measures such as survey \ndata.\n\nBy including perceptions about people\u2019s lived \nexperiences, a more complete picture of productivity can \nbe constructed."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "By including perceptions about people\u2019s lived \nexperiences, a more complete picture of productivity can \nbe constructed.\n\nMany times, perceptual data may provide \nmore accurate and complete information than what can be \nobserved from instrumenting system behavior alone.10 \nIncluding metrics from multiple dimensions and types \nof measurements often creates metrics in tension; this \nis by design, because a balanced view provides a truer \npicture of what is happening in your work and systems.\n\nThis more balanced view should help to reinforce smarter \ndecisions and tradeoffs among team members, who may \notherwise understandably focus on one aspect of work to \nthe detriment of the whole system.\n\nOne example is story points, a metric commonly used \nin Agile development processes to assess team-level \nprogress."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "One example is story points, a metric commonly used \nin Agile development processes to assess team-level \nprogress.\n\nIf a team is rated only on story points, members \nwill focus on optimizing their own points, to the detriment \nof completing potentially invisible work that is important \nto other developers\u2019 progress and to the company if that 17 of 29\nacmqueue | january-february 2021   17"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitymeans collaborating with other teams or onboarding \nfuture developers.\n\nAnd if leaders measured progress \nusing story points without asking developers about their \nability to work quickly, they wouldn\u2019t be able to identify \nif something wasn\u2019t working and the team was doing \nworkarounds and burning out, or if a new innovation was \nworking particularly well and could be used to help other \nteams that may be struggling.\n\nThis leads to an important point about metrics and their \neffect on teams and organizations: They signal what is \nimportant.\n\nOne way to see indirectly what is important in \nan organization is to see what is measured, because that \noften communicates what is valued and influences the way \npeople behave and react.\n\nFor example, companies that \ncare about employee health, well-being, and retention will \nlikely include the satisfaction and well-being dimension in \ntheir productivity measures."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "For example, companies that \ncare about employee health, well-being, and retention will \nlikely include the satisfaction and well-being dimension in \ntheir productivity measures.\n\nAs a corollary, adding to or \nremoving metrics can nudge behavior, because that also \ncommunicates what is important.\n\nFor example, a team where \u201cproductivity = lines of code\u201d \nalone is very different from a team where \u201cproductivity \n= lines of code AND code review quality AND customer \nsatisfaction.\u201d In this case, you have kept a (problematic, but \nprobably embedded) metric about productivity and output, \nbut nudged perceptions about productivity in a direction \nthat also values both teamwork (by valuing thoughtful \ncode reviews) and the end user (by valuing customer \nsatisfaction).\n\nMetrics shape behavior, so by adding and valuing just \ntwo metrics, you\u2019ve helped shape a change in your team \nand organization.\n\nThis is why it\u2019s so important to be sure to 18 of 29\nacmqueue | january-february 2021   18"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitypull from multiple dimensions \nof the framework: it will lead \nto much better outcomes at \nboth the team and system \nlevels.\n\nIn this example, as the \nteams continue to improve and \niterate, they could exchange \nthe activity metric lines of code  \nfor something like number of \ncommits .\n\nWHAT TO WATCH FOR\nHaving too many metrics \nmay also lead to confusion \nand lower motivation; not \nall dimensions need to be \nincluded for the framework \nto be helpful.\n\nFor example, \nif developers and teams \nare presented with an \nextensive list of metrics \nand improvement targets, \nmeeting them may feel like an \nunattainable goal.\n\nWith this in \nmind, note that a good measure \nof productivity consists of a \nhandful of metrics across at \nleast three dimensions; these \ncan prompt a holistic view, and \nthey can be sufficient to evoke \nimprovement."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "19 of 29\nacmqueue | january-february 2021   19SPACE and SRE: The Framework  \nin Incident Management \n The SPACE framework is relevant \n for SREs (site reliability engineers)  \nand their work in IM (incident management).\n\nAn \nincident occurs when a service is not available or \nis not performing as defined in the SLA (service-\nlevel agreement).\n\nAn incident can be caused \nby network issues, infrastructure problems, \nhardware failures, code bugs, or configuration \nissues, to name a few.\n\nBased on the magnitude of the impact caused \nby an incident, it is typically assigned a severity \nlevel (sev-1 being the highest).\n\nAn outage to the \nentire organization\u2019s customer-facing systems \nis treated differently than a small subset of \ninternal users experiencing a delay in their email \ndelivery.\n\nHere are some of the common myths \nassociated with IM:\n3 Myth:  Number of incidents resolved by an \nindividual is all that matters ."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Here are some of the common myths \nassociated with IM:\n3 Myth:  Number of incidents resolved by an \nindividual is all that matters .\n\nLike a lot of other \nactivities in the SDLC (software development \nlife cycle), IM is a team activity.\n\nA service that \ncauses a lot of outages and takes more hours to \nrestore reflects badly on the entire team that \ndevelops and maintains the service.\n\nMore team-\nfocused activities such as knowledge sharing, \npreparing troubleshooting guides to aid other 3"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityAny measurement paradigm \nshould be used carefully \nbecause no metric can ever be \na perfect proxy.\n\nSome metrics \nare poor measures because \nthey are noisy approximations \n(some examples are noted in \nfigure 1).\n\nRetention is often \nused to measure employee \nsatisfaction; however, this \ncan capture much more than \nsatisfaction\u2014it can reflect \ncompensation, promotion \nopportunities, issues with \na team, or even a partner\u2019s \nmove.\n\nAt the team level, some \nmanagers may block transfers \nto protect their own retention \nratings.\n\nEven if retention did \nreflect satisfaction, it is a \nlagging measure, and teams \ndon\u2019t see shifts until it is too \nlate to do anything about it.\n\nWe \nhave written elsewhere about \nthe limitations inherent in the \nuse of story points,9 which \ncould give teams incentive to \nfocus on their own work at the \nexpense of collaborating on \nimportant projects."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Teams and organizations 20 of 29\nacmqueue | january-february 2021   20team members, mentoring juniors and new \nmembers of the team, doing proper handoffs \nand assignment/re-assignments are important \naspects of IM.\n\n3 Myth:  Looking at one metric in isolation will \ntell you everything.\n\nIt\u2019s important to understand \nthe metrics in context: the number of incidents, \nhow long they took to resolve\u2014 the volume and \nresolution times of sev-1 incidents compared \nwith sev-4, and other factors relevant to \nunderstanding incidents and how to improve \nboth the system and the team\u2019s response.\n\nSo, \nthere is no \u201cone metric that matters.\u201d\n3 Myth:  Only management cares about incident \nvolume and meeting SLAs.\n\nWith the rise of \nDevOps, developers are also doing operations \nnow.\n\nIM (a part of operations) can take away a \nsignificant chunk of developers\u2019 time and energy \nif the volume and severity of the incidents \nare high."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "IM (a part of operations) can take away a \nsignificant chunk of developers\u2019 time and energy \nif the volume and severity of the incidents \nare high.\n\nAs important as it is to management \nand executives to guarantee SLAs and reduce \nincident volume and resolution times, it is equally \nimportant to the individual developers who are \npart of the IM process.\n\n3 Myth:  Effective IM is just about improving \nsystems and tools.\n\nBetter monitoring systems, \nticketing systems, case-routing systems, log-\nanalysis systems, etc.\n\nwill help make developers \nproductive.\n\nWhile tools, guides, and workflows \nhave a large impact on productivity, the human"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityshould be cognizant of \ndeveloper privacy and report \nonly anonymized, aggregate \nresults at the team or group \nlevel.\n\n(In some countries, \nreporting on individual \nproductivity isn\u2019t legal.)\n\nIndividual-level productivity \nanalysis, however, may be \ninsightful for developers.\n\nFor \nexample, previous research \nshows that typical developer \nwork shifts depend on the \nphase of development, and \ndevelopers may have more \nproductive times of day.14 \nDevelopers can opt in to these \ntypes of analyses, gaining \nvaluable insights to optimize \ntheir days and manage their \nenergy.\n\nFinally, any measurement \nparadigm should check for \nbiases and norms.\n\nThese \nare external influences that \nmay shift or influence the \nmeasures.\n\nSome examples are \nincluded here, but they aren\u2019t \nexhaustive, so all teams are \nencouraged to look for and \nthink about external influences 21 of 29\nacmqueue | january-february 2021   21factors of the environment and work culture \nhave substantial impact too."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Mentoring new \nmembers of the team and morale building are \nimportant.\n\nIf developers are constantly being \npaged in the night for sev-1 incidents while \nworking from home during Covid-19, these \n\u201cinvisible\u201d factors are especially helpful to make \nthem more productive.\n\nIncident management is a complex process \nthat involves various stakeholders performing \nseveral individual and team activities, and \nit requires support from different tools and \nsystems, so it is critical to identify metrics that \ncan capture various dimensions of productivity:\n3 Satisfaction:  how satisfied SREs are with the \nIM process, escalation and routing, and on-call \nrotations are key metrics to capture, especially \nsince burnout is a significant issue among SREs.\n\n3 Performance: these measures focus on \nsystem reliability; monitoring systems\u2019 ability to \ndetect and flag issues faster, before they hit the \ncustomer and become an incident.\n\nMTTR (mean \ntime to repair) overall, and by severity."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "MTTR (mean \ntime to repair) overall, and by severity.\n\n3 Activity:  number of issues caught by the \nmonitoring systems, number of incidents \ncreated, number of incidents resolved\u2014and their \nseverity distribution.\n\n3 Communication and collaboration:  people \nincluded in resolving the incident, how many \nteams those people came from, and how they"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitythat may be present in their \ndata:\n3 Peer review and gender.\n\nResearch shows that women \nare more likely to receive \nnegative comments and less \nlikely to receive positive \ncomments in their code \nreviews.16 Any analysis of \nsatisfaction with the review \nprocess should check for this in \nyour environment.\n\nUnderstand \nthat developers are likely \ninfluenced by the broader tech \nindustry even if the patterns \nare not in your organization or \nteam.\n\nTake these effects into account.\n\n3 Normalizing measures across time.\n\nTeams should \nbe careful about any methods used to normalize time, \nespecially across long periods.\n\nFor example, looking \nat metrics over a year would bias against those taking \nparental leave.\n\n3 Perceptual measures.\n\nTeams and organizations should \nbe mindful of cultural norms\u2014and embrace these.\n\nSome \ncultures naturally report higher, while some report lower."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "3 Perceptual measures.\n\nTeams and organizations should \nbe mindful of cultural norms\u2014and embrace these.\n\nSome \ncultures naturally report higher, while some report lower.\n\nIt doesn\u2019t mean perceptual measures can\u2019t be trusted; it \njust means measures from these different cultures will \nhave a different baseline and shouldn\u2019t be compared with \neach other.22 of 29\nacmqueue | january-february 2021   22communicate during an incident.\n\nIncident \nresolution documentation outlines the steps \ninvolved in resolving incidents; this can be \nmeasured by completeness (to check if any \nresolution data was entered) or quick quality \nscores (e.g., thumbs up/down).\n\nTeams may also \ninclude a metric that measures the percentage \nof incidents resolved that reference these guides \nand documentation.\n\n3 Efficiency and flow:  incident handoffs, incident \nassignment/re-assignment, number of hops an \nincident has to take before it is assigned to the \nright individual or team."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityWHY THIS MATTERS NOW\nDeveloper productivity \nis about more than an \nindividual\u2019s activity levels \nor the efficiency of the \nengineering systems relied \non to ship software, and it \ncannot be measured by a \nsingle metric or dimension.\n\nWe developed the SPACE \nframework to capture \ndifferent dimensions of \nproductivity, because without \nit, pervasive and potentially \nharmful myths about \nproductivity may persist.\n\nThe SPACE framework \nprovides a way to logically \nand systematically think \nabout productivity in a much \nbigger space and to carefully \nchoose balanced metrics \nlinked to goals\u2014and how \nthey may be limited if used alone or in the wrong context.\n\nThe framework helps illuminate tradeoffs that may \nnot be immediately obvious and to account for invisible \nwork and knock-on effects of changes such as increased \nwork if activity is measured at the expense of unfulfilled \ndevelopers or disruptions to overall flow and efficiency."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "The need to understand and measure productivity \nholistically has never been greater.\n\nAs the Covid-19 Related articles 3 Getting What You Measure \nFour common pitfalls in using software metrics \nfor project management.\n\nEric Bouwers, Joost Visser, and Arie van Deursen \nhttps://queue.acm.org/detail.cfm?id=2229115  3 DevOps Metrics \nYour biggest mistake might be collecting  \nthe wrong data.\n\nNicole Forsgren and Mik Kersten \nhttps://queue.acm.org/detail.cfm?id=3182626  3 Beyond the \u201cFix-it\u201d Treadmill \nThe use of post-incident artifacts in high-\nperforming organizations.\n\nJ. Paul Reed \nhttps://queue.acm.org/detail.cfm?id=3380780  3 People and Process \nMinimizing the pain of business process change.\n\nJames Champy \nhttps://queue.acm.org/detail.cfm?id=1122687  23 of 29\nacmqueue | january-february 2021   23"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitypandemic disrupted work and brought a sudden switch \nto working from home, many questioned its impact \non productivity and posed questions around how to \nunderstand and measure this change.\n\nAs the world \nslowly returns to a \u201cnew normal,\u201d the SPACE framework \ncaptures the dimensions of productivity that are important \nto consider as future changes are proposed and made.\n\nThe framework is meant to help individuals, teams, and \norganizations identify pertinent metrics that present \na holistic picture of productivity; this will lead to more \nthoughtful discussions about productivity and to the \ndesign of more impactful solutions.\n\nAcknowledgments\nWe are grateful for the thoughtful review and insightful \ncomments from our reviewers and are confident that \nincorporating their notes and responses has strengthened \nthe paper.\n\nWe are excited to have it published in acmqueue .\n\nReferences\n1.\n\nBeller, M., Orgovan, V., Buja, S., Zimmermann, T. \n2020."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "We are excited to have it published in acmqueue .\n\nReferences\n1.\n\nBeller, M., Orgovan, V., Buja, S., Zimmermann, T. \n2020.\n\nMind the gap: on the relationship between \nautomatically measured and self-reported productivity.\n\nIEEE Software ; https://arxiv.org/abs/2012.07428 .\n\n2.\n\nBrumby, D. P., Janssen, C. P., Mark, G. 2019.\n\nHow do interruptions affect productivity?\n\nIn \nRethinking Productivity in Software Engineering,  \ned.\n\nC. Sadowski and T. Zimmermann, 85-107.\n\nBerkeley, CA: Apress; https://link.springer.com/\nchapter/10.1007/978-1-4842-4221-6_9 .\n\n3.\n\nButler, J. L., Jaffe, S. 2020.\n\nChallenges and gratitude: a 24 of 29\nacmqueue | january-february 2021   24"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitydiary study of software engineers working from home \nduring Covid-19 pandemic (August).\n\nMicrosoft; https://\nwww.microsoft.com/en-us/research/publication/\nchallenges-and-gratitude-a-diary-study-of-software-\nengineers-working-from-home-during-covid-19-\npandemic/ .\n\n4.\n\nCsikszentmihalyi, M. 2008.\n\nFlow: The Psychology \nof Optimal Experience .\n\nHarper Perennial Modern \nClassics.\n\n5.\n\nDabbish, L., Stuart, C., Tsay, J., Herbsleb, J.\n\n2012.\n\nSocial \ncoding in GitHub: transparency and collaboration in an \nopen software repository.\n\nIn Proceedings of the ACM \n2012 Conference on Computer-supported Cooperative \nWork (February), 1277-1286; https://dl.acm.org/\ndoi/10.1145/2145204.2145396 .\n\n6.\n\nDourish, P., Bellotti, V. 1992.\n\nAwareness and \ncoordination in shared workspaces.\n\nIn Proceedings \nof the 1992 ACM Conference on Computer-supported \nCooperative Work (December), 107-114; https://dl.acm.\n\norg/doi/10.1145/143457.143468 .\n\n7."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "In Proceedings \nof the 1992 ACM Conference on Computer-supported \nCooperative Work (December), 107-114; https://dl.acm.\n\norg/doi/10.1145/143457.143468 .\n\n7.\n\nFord, D., Storey, M. A., Zimmermann, T., Bird, C., Jaffe, S., \nMaddila, C., Butler, J. L., Houck, B., Nagappan, N. 2020.\n\nA tale of two cities: software developers working from \nhome during the Covid-19 pandemic; https://arxiv.org/\nabs/2008.11147 .\n\n8.\n\nForsgren, N. 2020.\n\nFinding balance between work and \nplay.\n\nThe 2020 State of the Octoverse .\n\nGitHub; https://\noctoverse.github.com/static/github-octoverse-2020-\nproductivity-report.pdf .\n\n9.\n\nForsgren, N., Humble, J. Kim, G. 2018.\n\nAccelerate: The \nScience of Lean Software and DevOps: Building and 25 of 29\nacmqueue | january-february 2021   25"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityScaling High Performing Technology Organizations .\n\nIT \nRevolution Press.\n\n10.\n\nForsgren, N., Kersten, M. 2018.\n\nDevOps metrics.\n\nCommunications of the ACM  61(4), 44-48; https://\ndl.acm.org/doi/10.1145/3159169 .\n\n11.\n\nFuks, H., Raposo, A., Gerosa, M. A., Pimental, M. \n2008.\n\nThe 3C collaboration model.\n\nIn Encyclopedia \nof E-Collaboration,  ed.\n\nNed Kock, 637-644.\n\nIGI Global; \nhttps://www.researchgate.net/publication/292220266_\nThe_3C_collaboration_model .\n\n12.\n\nGraziotin, D., Fagerholm, F. 2019.\n\nHappiness \nand the productivity of software engineers.\n\nIn \nRethinking Productivity in Software Engineering,  \ned.\n\nC. Sadowski and T. Zimmermann, 109-124.\n\nBerkeley, CA: Apress; https://link.springer.com/\nchapter/10.1007/978-1-4842-4221-6_10 .\n\n13.\n\nMaslach, C., Leiter, M. P. 2008.\n\nEarly predictors of \njob burnout and engagement.\n\nJournal of Applied \nPsychology  93(3), 498-512; https://doi.apa.org/doiLandin\ng?doi=10.1037%2F0021-9010.93.3.498 .\n\n14."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "13.\n\nMaslach, C., Leiter, M. P. 2008.\n\nEarly predictors of \njob burnout and engagement.\n\nJournal of Applied \nPsychology  93(3), 498-512; https://doi.apa.org/doiLandin\ng?doi=10.1037%2F0021-9010.93.3.498 .\n\n14.\n\nMeyer, A. N., Barton, L. E., Murphy, G. C., Zimmermann, \nT., Fritz, T. 2017.\n\nThe work life of developers: activities, \nswitches and perceived productivity.\n\nIEEE Transactions \non Software Engineering  43(12), 1178-1193; https://dl.acm.\n\norg/doi/10.1109/TSE.2017.2656886 .\n\n15.\n\nMurphy-Hill, E., Jaspan, C., Sadowski, C., Shepherd, D., \nPhillips, M., Winter, C., Knight, A., Smith, E., Jorde, M. \n2019.\n\nWhat predicts software developers\u2019 productivity?\n\nIEEE Transactions on Software Engineering ; https://\nieeexplore.ieee.org/document/8643844/ .\n\n16.\n\nPaul, R., Bosu, A., Sultana, K. Z.\n\n2019.\n\nExpressions of 26 of 29\nacmqueue | january-february 2021   26"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitysentiments during code reviews: male vs. female.\n\nIn IEEE 26th International Conference on Software \nAnalysis, Evolution and Reengineering (SANER) , 26-37; \nhttps://ieeexplore.ieee.org/document/8667987 .\n\n17.\n\nRalph, P., et al.\n\n2020.\n\nPandemic programming: How \nCovid-19 affects software developers and how their \norganizations can help.\n\nEmpirical Software Engineering  \n25(6), 4927-4961; https://www.researchgate.net/\npublication/344342621_Pandemic_programming_How_\nCOVID-19_affects_software_developers_and_how_\ntheir_organizations_can_help .\n\n18.\n\nSchmidt, K., Bannon, L. 1992.\n\nTaking CSCW seriously: \nsupporting articulation work.\n\nComputer Supported \nCooperative Work  1(1), 7-40; https://link.springer.com/\narticle/10.1007/BF00752449 .\n\n19.\n\nSedano, T., Ralph, P., P\u00e9raire, C. 2017.\n\nSoftware \ndevelopment waste.\n\nIn Proceedings of the 39th \nInternational Conference on Software Engineering , 130-\n140; https://dl.acm.org/doi/10.1109/ICSE.2017.20 .\n\n20."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Software \ndevelopment waste.\n\nIn Proceedings of the 39th \nInternational Conference on Software Engineering , 130-\n140; https://dl.acm.org/doi/10.1109/ICSE.2017.20 .\n\n20.\n\nStorey, M. A., Zimmermann, T., Bird, C., Czerwonka, \nJ., Murphy, B., Kalliamvakou, E. 2019.\n\nTowards a \ntheory of software developer job satisfaction \nand perceived productivity.\n\nIEEE Transactions on \nSoftware Engineering ; https://ieeexplore.ieee.org/\ndocument/8851296 .\n\n21.\n\nSuchman, L. 1995.\n\nMaking work visible.\n\nCommunications \nof the ACM  38(9), 56-64; https://dl.acm.org/\ndoi/10.1145/223248.223263 .\n\n22.\n\nVasilescu, B., Posnett, D., Ray, B., van den Brand, M. G. J., \nSerebrenik, A., Devanbu, P., Filkov, V. 2015.\n\nGender and \ntenure diversity in GitHub teams.\n\nIn Proceedings of 27 of 29\nacmqueue | january-february 2021   27"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivitythe 33rd Annual ACM Conference on Human Factors in \nComputing Systems  (April), 3789-3798; https://dl.acm.\n\norg/doi/abs/10.1145/2702123.2702549 .\n\nNicole Forsgren is the VP of Research & Strategy at GitHub.\n\nShe is an expert in DevOps and the author of the Shingo \nPublication Award-winning book Accelerate: The Science \nof Lean Software and DevOps .\n\nHer work on technical \npractices and development has been published in industry \nand academic journals and is used to guide organizational \ntransformations around the world.\n\nMargaret-Anne Storey  is a Professor of Computer Science \nat the University of Victoria and a Canada Research Chair \nin Human and Social Aspects of Software Engineering.\n\nHer research focuses on improving software engineering \nprocesses, tools, communication and collaboration in \nsoftware engineering.\n\nShe consults with Microsoft to improve \ndeveloper productivity.\n\nChandra Maddila  is a Senior Research Engineer at Microsoft \nResearch."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "She consults with Microsoft to improve \ndeveloper productivity.\n\nChandra Maddila  is a Senior Research Engineer at Microsoft \nResearch.\n\nHis research focuses on improving developer \nproductivity and software engineering processes leveraging \nmachine learning and AI.\n\nHe developed tools and techniques \nthat are used organization-wide at Microsoft, won best paper \naward at USENIX OSDI, and has been featured in tech journals \nlike VentureBeat .\n\nThomas Zimmermann  is a Senior Principal Researcher at \nMicrosoft Research.\n\nHis research uses quantitative and \nqualitative methods to improve software productivity and to 28 of 29\nacmqueue | january-february 2021   28"}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "productivityinvestigate and overcome software engineering challenges.\n\nHe is best known for his work on mining software repositories \nand data science in software engineering, which received \nseveral most influential paper awards.\n\nBrian Houck is a Principal Program Manager in the Azure \nEngineering Systems at Microsoft.\n\nHis work focuses on \nimproving developer productivity and satisfaction for \nengineers within the Azure organization by improving \ndeveloper tooling, development processes, and team culture.\n\nJenna Butler holds a PhD in Computer Science and specializes \nin Bioinformatics.\n\nShe is an Adjunct Professor at Bellevue \nCollege in the Radiation Therapy department and is a Senior \nSoftware Engineer at Microsoft.\n\nRecently Jenna has been \nworking with the Productivity & Intelligence (P+I) team in \nMSR to study alignment and decision making; working in the \nservices; and the impact of remote work during this time."}, {"source": "sources/todo/2021_the_SPACE_of_dev_productivity.pdf", "content": "Jenna most enjoys multidisciplinary work that can benefit \nwell-being and health while maximizing productivity.\n\nCopyright \u00a9 2021 held by owner/author.\n\nPublication rights licensed to ACM.\n\n29 of 29\nacmqueue | january-february 2021   29"}]