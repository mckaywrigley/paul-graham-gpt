[{"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nThe ultimate guide to developer experience\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nFeb 28, 2023\n\nUnderstanding developer experience is vital when you want to improve the work engagement and productivity of the developers within your engineering organization.\n\nWe'll cover what developer experience is, why it is important, and how to measure and improve it.\n\nWhat is developer experience (DevEx, DX)?\n\nDeveloper experience (DevEx, DX) is the overall experience of a developer when they are building software in a team.\n\nIt describes how developers perceive, feel about, and value their work."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Developer experience (DevEx, DX) is the overall experience of a developer when they are building software in a team.\n\nIt describes how developers perceive, feel about, and value their work.\n\nThe three components of developer experience are:\n\nHow developers perceive the development infrastructure.\n\nThis includes both the technical infrastructure (e.g., development tools, issue trackers, programming languages, cloud platforms, libraries) and ways of working (e.g., working agreements, processes, and methods).\n\nHow developers feel about their work.\n\nDo they feel respected?\n\nDo they care about their work?\n\nDo they feel like they belong in their team?\n\nHow developers value their work.\n\nDo they feel they\u2019re making an impact?\n\nAre their values and goals aligned with those of the company?\n\nIn research these three components are known as cognition, affect, and conation.\n\nIn this guide we\u2019ll keep things practical and refer to them as infrastructure, feelings about work, and the value of work."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "In this guide we\u2019ll keep things practical and refer to them as infrastructure, feelings about work, and the value of work.\n\nWhy is developer experience important?\n\nImproved developer experience boosts both the productivity and work engagement of the engineers in your organization.\n\nStreamlining your development processes and tools helps developers complete their tasks faster with less pain.\n\nPeople with high engagement are more likely to produce better quality software, collaborate better, and have lower turnover rates.\n\nReseach has shown that human factors are the most critical factors affecting software development productivity and quality.\n\nDeveloper experience gives you a lens to your engineering organization that allows you to improve both the human factor as well as the tools and methods you use \u2014 ultimately leading to better business performance.\n\nHow to measure developer experience?\n\nIf you\u2019re just getting started, talk to your managers, team leads, and developers."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "How to measure developer experience?\n\nIf you\u2019re just getting started, talk to your managers, team leads, and developers.\n\nWhat are the top 5-10 things causing a bad experience for your developers and breaking their flow?\n\nSelect the most impactful problems to solve and set a measurable goal.\n\nAt this stage, companies commonly start improving things like compile times or number of flaky tests and measure things related only to their development infrastructure.\n\nIn the long run, you need to be able to address bigger problems like company culture or the way you structure your teams.\n\nTo achieve this, you need to measure all three components of developer experience: infrastructure, feelings about work, and value of work.\n\nThis requires multiple measures from multiple different angles.\n\nSpecifically, you should track both engineering metrics as well as developer feedback.\n\nFor engineering metrics, common things to measure include wait times, DORA metrics, and your\u00a0investment balance."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Specifically, you should track both engineering metrics as well as developer feedback.\n\nFor engineering metrics, common things to measure include wait times, DORA metrics, and your\u00a0investment balance.\n\nWait time metrics include compile times, test suite duration and flakiness, CI/CD build times, pull request cycle time, and\u00a0issue cycle time.\n\nDORA metrics help you achieve and maintain continuous delivery.\n\nTracking your investment allows you to balance feature work and developer experience improvements.\n\n(More on these metrics below.)\n\nDeveloper feedback allows you to measure satisfaction and wellbeing.\n\nIt also gives context to complex, nuanced problems like cross-team collaboration or changes in how teams work.\n\nDeveloper feedback is invaluable when ensuring that your engineering metrics reflect reality.\n\nIf your teams have a high level of psychological safety and trust, 1-1s and retrospectives are the best ways to get genuine and timely developer feedback."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "If your teams have a high level of psychological safety and trust, 1-1s and retrospectives are the best ways to get genuine and timely developer feedback.\n\nIt should also be easy for developers to report issues when they face them.\n\nYou can \u2014 and should \u2014 also run surveys, but  if you run them too often with too many questions, people won't reply.\n\nSo they\u2019re practically always a lagging indicator, and you should try to find ways of tracking more real-time signals whenever you can.\n\nHow to drive great developer experience\n\nImproving developer experience is a big topic, but this section includes five of the most impactful things you can do.\n\nYou will notice that none of the suggestions is linked to just a single component of developer experience.\n\nThe components are intertwined, so changes in, for example infrastructure will affect how people feel about and value their work.\n\n1.\n\nReduce developer wait times and interruptions\n\nThe number one driver of developer experience is flow."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "1.\n\nReduce developer wait times and interruptions\n\nThe number one driver of developer experience is flow.\n\nAnd the number one enemy of flow is unnecessary wait times and interruptions.\n\nFlow state allows developers to focus on their work, get a sense of accomplishment, and enjoy tackling challenging problems.\n\nUnnecessary wait times and interruptions make developers frustrated and unproductive.\n\nCommon causes preventing developer flow are poor developer tooling, impractical team processes, and unproductive company culture.\n\nExamples include flaky tests, slow code reviews, and wasteful meetings.\n\nThe larger your organization gets, the more things can break people\u2019s flow.\n\nTo tackle wait times and interruptions in your development tooling, you analyze what happens when developers write code and run your CI/CD pipeline.\n\nHow long does it take to compile code, run tests, or deploy to production?"}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "How long does it take to compile code, run tests, or deploy to production?\n\nThe wins here are often small (seconds or minutes), but they have substantial compounding effects since they happen so frequently.\n\nWhen analyzing the flow of developing features end-to-end, you need to understand your lead times, most commonly, issue and pull request cycle times.\n\nHow long does it takes to ship a feature from start to finish and for code to get from the first commit to production (to your customers)?\n\nWhat interrupts developers when they try to complete their tasks?\n\nCommon issues include poor collaboration, working with too large pull requests and stories, and not agreeing on ways of working together.\n\nTackling wait times is an iterative process where you improve things step-by-step.\n\nYou should:\n\nBuild observability into your development process.\n\nThis allows you to understand the full impact of the changes you make."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "You should:\n\nBuild observability into your development process.\n\nThis allows you to understand the full impact of the changes you make.\n\nYou don\u2019t want to optimize a small part of developer experience at the expense of the whole.\n\nTackle issues one by one, starting with the simpler ones.\n\nThis forces you to prioritize and makes it easier to evaluate impact.\n\nGive developers easy access to tools.\n\nThis is one of the simplest and cheapest ways to improve flow.\n\nSeemingly trivial things like timely notifications can remove a whole category of unnecessary wait times.\n\nTweet from Gergely Orosz on why Uber and Shopify replaced their developer Intel Macbooks with M1 ones ($2000+ each)\n\n2.\n\nInvest in maintaining a healthy codebase\n\nNothing demonstrates the importance of developer experience like a chaotic working environment full of breaking tools, bugs, and constant firefighting.\n\nA mistake many organizations make is trying run their engineering organization as a feature factory with 100% efficiency."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "A mistake many organizations make is trying run their engineering organization as a feature factory with 100% efficiency.\n\nAs a result, they\u2019re overwhelmed with managing complexity and struggle to keep the lights on.\n\nInstead of creating chaos, you want to ensure developers have a healthy environment to build and maintain features.\n\nTo achieve this, you need to track your investment balance.\n\nIt lets you see where your time goes and continually invest in paying back technical debt.\n\nThe investment balance above uses a categorization originally developed at Dropbox that divides work into four categories based on its impact: \u201cbuilding new stuff,\u201d \u201cimproving things,\u201d \u201cimproving developer productivity,\u201d and \u201ckeeping the lights on\u201d (KTLO).\n\nCategorizing your work into these buckets allows you to:\n\nContinually pay back tech debt.\n\n10% is a great goal for many teams, but sometimes making more significant investments in issues with major impact makes sense.\n\nUnderstand what causes firefighting."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "10% is a great goal for many teams, but sometimes making more significant investments in issues with major impact makes sense.\n\nUnderstand what causes firefighting.\n\nHigh levels of KTLO contribute to developer burnout and attrition.\n\nUnderstanding what causes KTLO helps you prioritize tech debt improvements.\n\nImprove developer motivation.\n\nDevelopers feel heard when they know that \u201cimproving developer productivity\u201d is a company goal.\n\nCommunicate impact.\n\nDevelopers want to build great things.\n\nEnsure they know how the things they build contribute to the product's success.\n\nTweet from John Cutler illustrating the results of ignoring managing complexity\n\n3.\n\nMake deployments safe and fast\n\nContinuous deployment practices have a proven relationship with better developer experience."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Make deployments safe and fast\n\nContinuous deployment practices have a proven relationship with better developer experience.\n\nThe DevOps Research and Assessment (DORA) team\u2019s studies have shown that teams that ship consistently are more motivated, ship higher-quality code, have less deployment pain and burnout, and have higher levels of job satisfaction.\n\nTo make deployments fast and safe:\n\nWork in small batches.\n\nInstead of using long-lived feature branches, continually integrate work to the main branch.\n\nInvest in automated tests.\n\nIf developers are afraid to deploy on a Friday, you probably need to increase your test coverage or quality.\n\nAutomate repetitive tasks.\n\nEnforce code style with linters and use code analysis tools.\n\nCode reviews should have very few (if any) \u201cnitpicking\u201d comments.\n\nAutomate your deployment process.\n\nWith web applications, deploy every pull request when you merge.\n\nOtherwise, make sure you can create a new release with a few clicks.\n\n4."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Automate your deployment process.\n\nWith web applications, deploy every pull request when you merge.\n\nOtherwise, make sure you can create a new release with a few clicks.\n\n4.\n\nEmpower teams\n\nMost developers have experienced it: Unclear goals and requirements.\n\nUnreasonable deadlines.\n\nArguments over roadmap and priorities.\n\nHigh-priority task overriding everything else \u2013 no one knows why.\n\nSubpar product outcomes as problems are half-solved.\n\nProduct management is a common source of discontent among developers.\n\nA solution many organizations employ is adding more processes and formal roles.\n\nMore people and layers between the customer and the developer.\n\nThis is a dead-end.\n\nThe better option is to build empowered product teams that own the customer experience of a feature or parts of the product end-to-end.\n\nThese teams have higher autonomy, grasp the impact of their work, and encounter fewer blockers.\n\nThese are all things that contribute to great developer experience."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "These teams have higher autonomy, grasp the impact of their work, and encounter fewer blockers.\n\nThese are all things that contribute to great developer experience.\n\nTo create empowered teams:\n\nBuild cross-functional teams.\n\nTeams should be able to tackle customer problems and features end-to-end \u2013 with minimal or no help from other teams.\n\nLet teams own the problem and the solution.\n\nWhen teams have full control over the end result, it creates shared accountability \u2013 a collective responsibility over the success or failure of the whole solution, not just parts of it.\n\nRun blameless retrospectives.\n\nWhen something goes wrong, don\u2019t ask \u201cwho\u201d but \u201cwhy.\u201d This builds psychological safety among the team and promotes collaboration over competition.\n\n5.\n\nOptimize for high work engagement\n\nYou can have an office full of developers with the fastest possible development environments shipping very little code.\n\nEven if they are cranking a ton of code, they might not care about building the right thing."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Even if they are cranking a ton of code, they might not care about building the right thing.\n\nThis is where work engagement comes into play.\n\nDevelopers with high engagement are persistent, dedicated to work, and want to ship quality software.\n\nThey are proactive and willing to support the rest of the organization.\n\nThey are also the most likely people do great work even when your developer experience is still lacking.\n\nHigh work engagement stems from the right balance of stimulation (cognitive load, challenges, and stress) and pleasure (feelings of success, learning, purpose, and connectedness).\n\nWhen people have the right amount of stimulation and enjoy their work, they become excited and engaged.\n\nTo drive great developer experience through work engagement, you should:\n\nInvest in engineering leadership.\n\nManagers account for the majority of variance in team engagement.\n\nMake sure your leaders know how to support great developer experience.\n\nSupport personal growth."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Managers account for the majority of variance in team engagement.\n\nMake sure your leaders know how to support great developer experience.\n\nSupport personal growth.\n\nThe right level of stimulus and sources of pleasure are very personal.\n\nHelp people identify what motivates them and what they enjoy at work.\n\nEnable career progression and continuous learning.\n\nSupport job crafting and ensure developers know how to progress in their career.\n\nBuild connectedness.\n\nInvest in empowered teams where people create impact together.\n\nWrapping it all up\n\nUnderstanding developer experience is vital when you want to improve the lives of the developers in your teams.\n\nHaving a systematic approach to improving developer experience will help you improve both the work engagement and productivity of your developers and, as a result, improve the business performance of your organization."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Start driving better developer experience with Swarmia\n\nIf you're interested in measuring and improving your organization's developer experience, you can get started with a free 14-day trial of Swarmia.\n\nStart free trial\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nNov 11, 2021Swarmia is now SOC 2 compliantRead now \u2192\n\nOct 12, 2021A complete guide to code reviewsRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nSize, age, culture: 3 factors that will shape your productivity path\n\nRebecca Murphey, Head of Engagement & Insights \u00b7 \n\nFeb 13, 2023\n\nI\u2019ve spent my first few weeks at Swarmia listening in on a lot of customer calls, and talking to many other software companies myself.\n\nIt\u2019s been a good reminder that every company\u2019s productivity journey is different.\n\nWhenever I\u2019m talking to a new company about their productivity challenges, there are two questions I like to ask:\n\nHow did you get here?\n\nWhere do you want to go from here?"}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "Whenever I\u2019m talking to a new company about their productivity challenges, there are two questions I like to ask:\n\nHow did you get here?\n\nWhere do you want to go from here?\n\nWith a little probing, the answers to these questions help me build a mental map of the company\u2019s size, age, and culture, and how each of these factors will influence what comes next:\n\nThe size of a company heavily informs the types of productivity challenges it will face.\n\nEven when headcount growth is effectively flat, productivity challenges tend to grow as your codebase grows.\n\nWithout intention or intervention, the age of a company is likely to be inversely related to its ability to adopt new technologies broadly, including off-the-shelf developer productivity solutions.\n\nOn the other hand, the earlier you become productivity-aware, the easier it will be to change and adapt accordingly."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "On the other hand, the earlier you become productivity-aware, the easier it will be to change and adapt accordingly.\n\nThe culture of a company defines the scope of available solutions for driving productivity improvements: Does the problem need to be solved solely within engineering, or are you willing (and able) to examine non-engineering solutions?\n\nIs there a framework for making long-term technical investments?\n\nIf you\u2019re starting out on a productivity journey, ask yourself these two questions, and then consider how your company\u2019s size, age, and culture will inform how you think about the problem and the path you take from here.\n\nQuestion 1: How did you get here?\n\nThere are plenty of \u201corigin stories\u201d for a company\u2019s decision to invest in sustaining and improving the effectiveness of their engineering organization."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "Question 1: How did you get here?\n\nThere are plenty of \u201corigin stories\u201d for a company\u2019s decision to invest in sustaining and improving the effectiveness of their engineering organization.\n\nSometimes it\u2019s a simple conversation among leaders: \u201cIs it just me, or did we used to ship things faster?\u201d Sometimes, it\u2019s driven by painful failure: \u201cWe missed most of our OKRs last half, and product and engineering are pointing fingers at each other.\u201d And sometimes, it\u2019s driven by curiosity about the opportunity \u2014 \u201cI\u2019ve heard of SPACE and DORA, and I think they could help us\u201d \u2014 more than an acute or targeted need.\n\nEach of these origin stories \u2014 and every other story that eventually leads a person like you to read a post like this \u2014 has a unique motivation.\n\nHow the problem is stated tells you a lot about what underlying issues you\u2019re likely to find when you start digging into the problem."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "How the problem is stated tells you a lot about what underlying issues you\u2019re likely to find when you start digging into the problem.\n\nIt\u2019s relatively easy to adopt a tool when you can operate with curiosity and a mindset of continuous improvement, and much harder when you are trying to solve an acute problem within the constraints of a company\u2019s current size, age, and culture.\n\nIn the examples above, two of the stories clearly lend themselves to tooling: \u201cIt seems like we used to ship things faster\u201d and \u201cI think DORA/SPACE could help us.\u201d In the third story, about a product vs eng blame game, a tool can certainly help quantify the problem and help you hypothesize solutions, but it\u2019s going to be harder for a tool to prescribe context-aware remedies.\n\nIf you\u2019re at the point of feeling like developer productivity/experience/effectiveness is A Thing You Should Care About, it\u2019s good to ask yourself a few questions to prepare for the conversation that\u2019s ahead:\n\nWhy is this important?"}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "\u201cWe have a goal to improve productivity\u201d is an answer, but not a great one.\n\nWhat\u2019s motivating the company to spend time on this topic?\n\nHow did it beat out other goals?\n\nHow high up does the goal go?\n\nWhy is this important now?\n\nDevelopment teams can always be more productive, but suddenly now is the time you\u2019re paying attention.\n\nWhat changed?\n\nWhat have you tried so far?\n\nHow did you decide you needed to do something else?\n\nWhat metrics are you tracking today?\n\nWhere are they falling short?\n\nHow are they changing over time?\n\nQuestion 2: Where do you want to go from here?\n\nYou know where you are and how you got here \u2014 now what?\n\nAgain, size, age, and culture come into play.\n\nAs you consider your path forward, the particular nature of your company will point to useful guardrails and dangerous sinkholes.\n\nSmaller companies may still need to nail down delivery fundamentals, while larger companies may consider forming dedicated teams to standardize, automate, and speed up development processes."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "Smaller companies may still need to nail down delivery fundamentals, while larger companies may consider forming dedicated teams to standardize, automate, and speed up development processes.\n\nAt companies with 100+ engineers, it takes effort just to sustain the same amount of productivity: Even if the engineering headcount isn\u2019t growing, the codebase is, and quickly.\n\nAs a company grows, its investment in productivity needs to grow too; the later that investment starts, the more debt there will be to pay down.\n\nAt a certain eng org size \u2014 bigger than you are, probably, but smaller than you think, perhaps \u2014 you may need a team dedicated simply to keeping things running smoothly as you accumulate LOCs every day.\n\nA company\u2019s trajectory is shaped by what the tech world looked like when the company was making pivotal tech decisions.\n\nThe earlier those decisions happened, the less tech had been commodified."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "A company\u2019s trajectory is shaped by what the tech world looked like when the company was making pivotal tech decisions.\n\nThe earlier those decisions happened, the less tech had been commodified.\n\nThe more time that has passed since those decisions, the more likely it is that those decisions have since been layered with alterations and customizations.\n\nA build vs. buy debate doesn\u2019t have an obvious winner when you\u2019re dealing with bespoke systems; on the other hand, the earlier you add observability to your engineering workflows, the more likely you are to have that information when you need it, even as your company evolves.\n\nA company\u2019s culture determines the likely pace, breadth, and permanence of improvement.\n\nCompanies that highly value team autonomy will face different challenges than companies that have standardized on tooling and centralized processes."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "Companies that highly value team autonomy will face different challenges than companies that have standardized on tooling and centralized processes.\n\nThe depth of trust between leadership and individual contributors will influence how readily those individual contributors embrace productivity efforts, and the company\u2019s engineering ladder will play a big part in who raises their hand to do the work.\n\nWhen you\u2019re thinking about how to drive change, don\u2019t pick fights with the culture: use it to your advantage whenever you can, and reshape it (gently) only when you must.\n\nAnswering these questions will deepen your understanding of how each of these three factors will come into play:\n\nWhat would \u201cbetter\u201d look like?\n\nYour engineering effectiveness investment proposal was approved, it\u2019s two years later, and everything is better.\n\nYou can\u2019t believe you used to spend time doing \u2026 what?\n\nWhat has changed?\n\nThinking back to current reality, what\u2019s kept you from making these changes now?"}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "You can\u2019t believe you used to spend time doing \u2026 what?\n\nWhat has changed?\n\nThinking back to current reality, what\u2019s kept you from making these changes now?\n\nWho benefits when we achieve \u201cbetter\u201d?\n\nThis is a trick question, because the answer is \u201ceveryone\u201d \u2014 from product to sales to customer support to engineering to users.\n\nStill: Where will you find reliable allies and champions for more effective delivery \u2014 even if it comes at some near-term cost, like slower delivery of bug fixes and new features?\n\nWhat kinds of potential changes are in scope?\n\nDoes The Business think of this as an engineering problem, or a business problem, or both?\n\nWhat is the scope of the most senior person who will sponsor necessary change, even if it has a near-term cost?\n\nWho will warm up to the cause after a couple of success stories?\n\nWhat are the biggest obstacles you expect?\n\nThis is not the time for rosy optimism: talk openly, now, with anyone who wants to pitch in, about what\u2019s going to be hard."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "What are the biggest obstacles you expect?\n\nThis is not the time for rosy optimism: talk openly, now, with anyone who wants to pitch in, about what\u2019s going to be hard.\n\nMaybe two different eng organizations aren\u2019t aligned on what\u2019s important; maybe you expect the CEO to defer to product priorities instead.\n\nMaybe everyone\u2019s on the same page but you worry that procurement is going to take three months.\n\nThere are lots of ways this sort of effort can go sideways: anticipate the ones you can.\n\nSo now what?\n\nEvery company takes a unique path to arrive at the start of their productivity journey, and the path they follow after that will be unique too.\n\nThere is plenty to learn from what others are doing, and plenty we can standardize on as an industry, but the way to improve your particular situation will be unique to the size, age, and culture in which you\u2019re operating.\n\nYou can use the big questions above \u2014 How did you get here?"}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "You can use the big questions above \u2014 How did you get here?\n\nand Where do you want to go from here \u2013 to orient yourself at a high level to some of the challenges you\u2019re likely to face.\n\nThen, the lower-level questions can help you start to chart a path forward.\n\nI wish there was a single silver bullet, but after \u201cget visibility into your current process,\u201d so much will depend on the details of what you find.\n\nIf you\u2019re trying to get a productivity initiative under way at a company of 100+ engineers, we should chat.\n\nI\u2019d love to learn about your goals and challenges and help you find a path forward \u2014 drop me a note at rebecca@swarmia.com and let\u2019s talk more.\n\nRebecca Murphey helps Swarmia customers navigate people, process, and technology challenges in pursuit of productivity.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/size-age-culture-productivity/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nDec 16, 2022Swarmia is now SOC 2 Type 2 compliantRead now \u2192\n\nNov 24, 2021Why product teams should plan together \u2014 and how we do it at SwarmiaRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nPractical advice for driving continuous improvement in software teams\n\nMandy Dye, Customer Success Manager \u00b7 \n\nJan 23, 2023\n\nAs a Customer Success Manager here at Swarmia, I get to work with engineering organizations from some of the most impressive technology companies in the world.\n\nAnd over time, I\u2019ve noticed that the highest-performing software teams have one simple thing in common: they get a little bit better every day.\n\nUnfortunately, though, \u201cgetting better\u201d and \u201ccontinuous improvement\u201d are phrases that often get thrown around without much detail or practical advice."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Unfortunately, though, \u201cgetting better\u201d and \u201ccontinuous improvement\u201d are phrases that often get thrown around without much detail or practical advice.\n\nAnd that\u2019s why in this blog post, I want to share some of the concrete steps our customers are taking to make gradual yet high-impact improvements in their ways of working.\n\nPrerequisites for continuous improvement\n\nBefore we jump over to the practical advice, let\u2019s quickly look at the three preconditions that allow modern engineering teams to continuously improve their practices and consequently, performance.\n\n1.\n\nMindset shift\n\nHistorically, when an organization needed to pivot its delivery practices or implement a new methodology, they would look to agile transformations as the answer.\n\nFor large, legacy organizations, it wasn\u2019t easy to suddenly change directions and implement new practices or ways of working.\n\nIt required changes to every aspect of the company, from job titles and organizational structures to technology and system changes."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "It required changes to every aspect of the company, from job titles and organizational structures to technology and system changes.\n\nTraining, change management, plans, and funding were needed to make these shifts a reality.\n\nTransformations of this scale have a whole industry, careers, and resources dedicated to them.\n\nThey typically are quite large undertakings that require a huge upfront investment and multi-year project plans, not to mention ample patience and goodwill from the employees.\n\nNow, if your organization was founded in the last decade or so, odds are you don\u2019t have the same legacy systems, processes, and organizational structures that require a larger transformation in order to see improvements across speed, quality, and developer experience.\n\nThat\u2019s why it\u2019s time for more modern engineering organizations to stop looking at productivity improvement as a set goal to achieve."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "That\u2019s why it\u2019s time for more modern engineering organizations to stop looking at productivity improvement as a set goal to achieve.\n\nRather, you should see improvement as a continuous element that can be embedded into your teams from the start.\n\nNot a destination, but a journey.\n\nBecause let\u2019s face it, there\u2019ll never be a shortage of things to improve on.\n\n2.\n\nEmpowered teams\n\nEmpowering your teams is a necessary step towards unlocking continuous improvement in your organization.\n\nAccording to Marty Cagan, author of \u201cEmpowered\u201d, empowering your engineers does not mean just giving them the space to figure out the best way to code or build something.\n\nRather, they should be empowered to figure out the best way to solve a problem that has been presented to them.\n\nFor a team to be empowered to solve real customer or user problems, there are several elements Cagan describes that need to be in place, specifically cross-functionality and shared accountability."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "For a team to be empowered to solve real customer or user problems, there are several elements Cagan describes that need to be in place, specifically cross-functionality and shared accountability.\n\nIf a team isn\u2019t cross-functional, it\u2019s difficult for the team members to take responsibility for the final solution.\n\nWhen you\u2019re only responsible for one piece of the final product, it\u2019s easier to be okay with a sub-par outcome, as long as your part of it was done well.\n\nBy structuring teams to include all roles and skillsets needed to deliver a product end-to-end, you provide them full control over the end product.\n\nThis control unlocks the shared accountability within the team and means they are now responsible for the success or failure of what they have built.\n\n3.\n\nVisibility\n\nIt\u2019s nearly impossible to determine where your team should focus their improvement efforts without some kind of visibility into your current workflow."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "3.\n\nVisibility\n\nIt\u2019s nearly impossible to determine where your team should focus their improvement efforts without some kind of visibility into your current workflow.\n\nThat\u2019s why having the proper tools and processes in place that provide this visibility is a huge piece of the continuous improvement puzzle.\n\nOften when I first meet with a customer about improving their team\u2019s productivity, they don\u2019t know where to begin.\n\nHaving a tool like Swarmia in place that provides you visibility into bottlenecks in your system or areas where the flow is breaking down is a great first step toward finding where to start.\n\nWorking with many engineering organizations over the years has taught us that it\u2019s difficult to improve what you aren\u2019t measuring.\n\nTaking that sentiment one step further, it\u2019s also hard to track improvement if you don\u2019t have a baseline against which to compare your progress."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Taking that sentiment one step further, it\u2019s also hard to track improvement if you don\u2019t have a baseline against which to compare your progress.\n\nNow, we frequently lump tools and processes together because a tool can only provide so much value if you don\u2019t have a process in place to to take action based on what you\u2019re seeing in the tool.\n\nThat\u2019s why at Swarmia, we want to ensure that we\u2019re building a product that\u2019s more than just a dashboard for the leadership team, but rather something that helps to drive improved processes and in turn, improved productivity throughout the engineering organization.\n\nContinuous improvement in action\n\nOnce you have the right mindset, empowered teams, and enough visibility, it\u2019s time to start chipping away at concrete improvement initiatives.\n\nHere are the three practical approaches our customers, as well as the engineering team here at Swarmia, have found particularly impactful early on.\n\n1."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Here are the three practical approaches our customers, as well as the engineering team here at Swarmia, have found particularly impactful early on.\n\n1.\n\nRetrospectives\n\nRetrospectives provide a safe space to reflect on past work and discuss areas of improvement or learnings within the team.\n\nSetting up these conversations on a regular cadence is a great way to strengthen this skill within your team.\n\nIf retrospectives are new to your team, try starting with them every four weeks and then adjust the cadence based on feedback from your team.\n\nAs the purpose of retrospectives is to facilitate continuous improvement in a team setting, using Swarmia in retrospectives can help you get there.\n\nWe actually have a fantastic retrospective guide that we share with our customers to help them start integrating retrospectives into their regular practices.\n\nOne particular data point I\u2019ve seen many engineering teams use in retrospective discussions is flow efficiency."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "One particular data point I\u2019ve seen many engineering teams use in retrospective discussions is flow efficiency.\n\nOut of all of the days your team spent working on a particular feature, how many days was there progress made or activity done to move that feature forward?\n\nHow many days was that feature blocked or left idle?\n\nThis information can help a team discuss ways to deliver value to customers faster.\n\nCould we have solved this issue as a team and removed the blocker faster?\n\nDid we have too much work in progress at that point that hindered us from delivering value from the new feature?\n\nOne of the biggest benefits that can come from retrospectives is the conversation that follows.\n\nDriving conversation around metrics is much more valuable than just making assumptions about what is shown.\n\nAfter all, there\u2019s always a story behind the data."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Driving conversation around metrics is much more valuable than just making assumptions about what is shown.\n\nAfter all, there\u2019s always a story behind the data.\n\nOver time, you might also want to experiment with focusing on specific pain points that come up in the retrospective and agree on actionable steps to improve or resolve.\n\nFor example, if the issue of CI pipeline slowness comes up in several retrospectives, it might make sense to focus an entire future retrospective on that topic.\n\n2.\n\nWorking agreements\n\nOnce your team has visibility into areas they can improve, the next step is to agree to take action.\n\nIn Swarmia, we make this action easy by allowing your team to adopt Working Agreements or targets they\u2019d like to set as a team.\n\nThese Working Agreements are all based on the real data from your GitHub and Issue Tracker integrations, which allow you to definitively see if there\u2019s been improvement."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "These Working Agreements are all based on the real data from your GitHub and Issue Tracker integrations, which allow you to definitively see if there\u2019s been improvement.\n\nAn example Working Agreement we often see teams adopt at Swarmia is around reducing pull request review times to no more than X number of days.\n\nBy adopting this agreement as a team, team members now have shared ownership and accountability to achieve that goal.\n\nOne other frequently adopted Working Agreement is around limiting work in progress (WIP) to a particular number of stories.\n\nThis allows the team to focus on a few key pieces of work, and to collaborate on existing stories or epics before starting something new.\n\nIf you\u2019re new to working agreements, try starting off with just a few key agreements for the team to focus on.\n\nLearning new ways to work takes time.\n\nOnce you start to see consistent improvement, look to move onto the next opportunity."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Learning new ways to work takes time.\n\nOnce you start to see consistent improvement, look to move onto the next opportunity.\n\nThe key to mastering your working agreements is to make sure they are enforced within the team and reviewed periodically as a part of your teams regular discussions.\n\n3.\n\nCode reviews\n\nAnother approach for collaborating and driving improvement in teams is through continuous feedback.\n\nA common way engineering teams provide and receive feedback is through their code reviews.\n\nHere\u2019s a great blog post on improving code reviews in your team if you\u2019re interested in some additional reading on this topic.\n\nCode reviews should be seen as a partnership or teamwork.\n\nYour teammates are not reviewing your code to find all the things you did wrong, but rather help ensure that the work you did is the best it can be.\n\nJust like book authors have editors review their work before publishing, great code requires an extra set of eyes as well."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Just like book authors have editors review their work before publishing, great code requires an extra set of eyes as well.\n\nDeveloping high-quality code is obviously beneficial for the customer, but the less obvious benefit is how it helps the team with future development.\n\nHaving multiple eyes on the code promotes knowledge sharing as well as improves quality, which helps to eliminate refactoring or production issues down the road.\n\nHaving this collaborative process in place allows for better discussions and improvements to be discovered and implemented.\n\nBecause we all know the old saying, \u2018two heads are better than one.\u2019\n\nWrapping up\n\nI hope you\u2019ll benefit from the prerequisites and practical steps discussed here when you\u2019re taking your first steps toward building a culture of continuous improvement within your engineering organization.\n\nTackling challenges can sound scary, but it doesn\u2019t have to be."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Tackling challenges can sound scary, but it doesn\u2019t have to be.\n\nRemember to look at improvement as a journey rather than a destination and understand that now is the best time to start.\n\nDrive continuous improvement with Swarmia\n\nProductivity improvements start with better visibility.\n\nSwarmia gives you the insights you need to spot process bottlenecks and the tools you need to resolve them.\n\nStart your free 14-day trial\n\nMandy Dye is a Customer Success Manager at Swarmia.\n\nBefore Swarmia, she worked in product and portfolio management at Omnitracs and in agile coaching and transformation at Travelport.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/continuous-improvement-in-software-development/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nJun 3, 2022Debugging Apollo GraphQL MockedProviderRead now \u2192\n\nMay 5, 2022Why small pull requests are\u00a0betterRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nAre daily stand-ups a waste of time?\n\nMika Vakula, Software Engineer \u00b7 \n\nSep 15, 2022\n\nIf your daily stand-ups feel like a waste of time, they probably are.\n\nHere\u2019s what\u2019s wrong with most stand-ups \u2014 and what you can do about it.\n\nHere\u2019s what\u2019s wrong with daily stand-ups\n\nIt certainly may feel like a waste of time listening to how George attended the opening of an envelope yesterday, what it was like, and whether he\u2019s planning on going to the same event today.\n\nNext up, it\u2019s Suzy\u2019s turn.\n\nShe\u2019ll make excuses for why she didn\u2019t have time to work on Jira issue DEV-123."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "Next up, it\u2019s Suzy\u2019s turn.\n\nShe\u2019ll make excuses for why she didn\u2019t have time to work on Jira issue DEV-123.\n\nAnd then Peppa will give her status update: she completed DEV-111, started working on DES-122 and DEV-110.\n\nAt this point, half the people have zoned out and are just waiting for each team member to finish their updates so they can get back to work.\n\nMost daily stand-ups revolve around the idea that developers have to justify their usefulness to the company.\n\nAnd if they fail to complete a task, they\u2019re expected to come up with an excuse.\n\nWhile you might get some value out of meetings like that, you\u2019d probably agree that you should be getting more.\n\nAfter all, you\u2019re wasting hours every week in those meetings.\n\nHow did we end up having daily stand-ups anyway?\n\nThe practice of daily stand-ups derives from the Scrum methodology.\n\nAs surprising as it may be, the Scrum Guide doesn\u2019t describe how you should conduct the meeting."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "The practice of daily stand-ups derives from the Scrum methodology.\n\nAs surprising as it may be, the Scrum Guide doesn\u2019t describe how you should conduct the meeting.\n\nEven more surprisingly, it doesn\u2019t state that you should go around the room asking every developer the three classic questions:\n\nWhat did you do yesterday?\n\nWhat are you doing today?\n\nAre there any blockers?\n\nThe Scrum Guide focuses on the purpose and goal of the daily meetings.\n\nThe purpose of the Daily Scrum is to inspect progress toward the Sprint Goal and adapt the Sprint Backlog as necessary, adjusting the upcoming planned work.\n\nIn other words, the focus should be on a) making progress toward the team\u2019s goal and b) coming up with an actionable plan for the day.\n\nIt\u2019s worth highlighting that the daily stand-up was never intended to become a status meeting.\n\nSomehow, though, we ended up with one anyway and act surprised when people say they don't find their stand-ups useful."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "Somehow, though, we ended up with one anyway and act surprised when people say they don't find their stand-ups useful.\n\nUltimately, though, the problem isn\u2019t that we run daily stand-ups.\n\nIt\u2019s how we run them.\n\nAnd luckily, that\u2019s something you can change.\n\nIntroducing a better way to run your daily stand-ups: walk the board\n\nHere at Swarmia, we\u2019ve adopted the so-called \u201cwalk the board\u201d method for running our daily stand-ups.\n\nAs Kanban's service delivery principles suggest, it focuses on managing the work \u2014 not the people."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "As Kanban's service delivery principles suggest, it focuses on managing the work \u2014 not the people.\n\nHere\u2019s what walking the board entails in practice:\n\nLook at the board that shows the current status of every item\n\nReview each item in progress one by one\n\nStart from the items that are closest to being finished and walk towards the items that have just been started\n\nIf you have multiple swim lanes, arrange lanes in the order of priority and start from the highest priority lane walking towards the lower priority lanes\n\nInstead of focusing on what George did or will do today, walking the board allows you to focus on what you, as a team, can finish today.\n\nTo make the meeting even more productive, you can ask questions like: \u201cHow can we finish this story today?\u201d\n\nThis is especially beneficial if some of your team members are spending too much time on personal pet projects or fine-tuning trivial details.\n\nWalking the board helps the team focus on their goals."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "Walking the board helps the team focus on their goals.\n\nIf the work isn\u2019t visible on the board, it doesn\u2019t deserve the team\u2019s time or attention.\n\nAnd if the work is important and aligned with the team\u2019s goal, it should be added to the board.\n\nIn addition to shifting the focus away from individuals to the value being created, walking the board also encourages collaboration in a way personal status updates can\u2019t.\n\nI\u2019ve also found these types of daily stand-ups easier to follow, digest, and manage.\n\nOur daily stand-ups are broken, what can we do to fix them?\n\nIf you feel like your daily stand-up routine is broken, there\u2019s a high likelihood your teammates feel the same.\n\nThe best way forward is to bring up the issue in your next retrospective.\n\nYou can discuss the goal and purpose of your daily stand-ups are, and brainstorm better alternatives for the meeting format.\n\nHere are some common problems and possible solutions."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "You can discuss the goal and purpose of your daily stand-ups are, and brainstorm better alternatives for the meeting format.\n\nHere are some common problems and possible solutions.\n\nOur daily stand-ups are too long\n\nRemember when I said the Scrum Guide doesn\u2019t prescribe how you should conduct your daily stand-ups?\n\nWell, I lied.\n\nBut I promise that the only thing it does prescribe is the length of the meeting.\n\nThe guide says a daily stand-up should last no longer than 15 minutes.\n\nIt\u2019s a good practice to keep the meetings short.\n\nThe longer they get, the more likely people will find them irrelevant and zone out.\n\nYour facilitator should catch the topics that warrant longer conversations and move those for after the stand-up.\n\nThis way, the stand-up itself will only take 15 minutes, and important conversation can continue after the daily \u2014 usually in smaller groups.\n\nAfter all, the whole team is rarely needed for these detailed conversations about a particular issue."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "After all, the whole team is rarely needed for these detailed conversations about a particular issue.\n\nThe daily stand-up is a good way to keep everyone in the loop about the work what\u2019s happening in the team.\n\nIt also gives the team an opportunity to flag any potential issues that need further planning or clarification.\n\nIt\u2019s a great way to get people together, share context, and start deeper conversations.\n\nBut remember, it\u2019s not a status meeting, and your teammates don\u2019t need to know everything.\n\nThe topics we discuss are irrelevant\n\nSometimes developers find the topics discussed in daily stand-ups irrelevant.\n\nIf you go through tickets that you know nothing about, you haven\u2019t been planning them, you haven\u2019t worked on that corner of the codebase, and won\u2019t be contributing to the work in the future, it\u2019s no wonder you might have a hard time focusing.\n\nThe daily stand-up is unlikely to be the root cause here.\n\nInstead, it sounds like you\u2019re not really working as a team."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "The daily stand-up is unlikely to be the root cause here.\n\nInstead, it sounds like you\u2019re not really working as a team.\n\nIt\u2019s surprisingly common for \u201cteams\u201d to consist of groups of individuals who work solely on their own user stories/features/corners of the codebase.\n\nIn other words, your real problem isn\u2019t the stand-up; it\u2019s that the work is siloed.\n\nYou may want to spark the conversation and ask your team whether you really are a team.\n\nShould you all have the same single goal and break the silos?\n\nIt may be wise to split the team, regroup, or refocus.\n\nAnd while I can\u2019t give you any definitive answers here, I will say that skipping the daily stand-up and ignoring the issue is unlikely to make things better.\n\nOur work doesn\u2019t progress enough to warrant a daily meeting\n\nIf there isn\u2019t any progress from day to day, walking the board every day may definitely feel like a waste of time.\n\nThis is usually a sign of your stories or tasks being too large."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "This is usually a sign of your stories or tasks being too large.\n\nOn average, your tasks should be small enough to be completed in a day or two.\n\nAny task can be split, and you can split them even when they are in progress.\n\nSmall tasks help team achieve faster results and gain feedback as early as possible.\n\nTL;DR\n\nDone right, daily stand-ups aren\u2019t a waste of time.\n\nBut to get the most value out of them, you need to stop blindly following some age-old best practices and make sure the format of the meeting supports the goals you\u2019ve set as a team.\n\nAfter all, the daily stand-up isn\u2019t a status meeting.\n\nIt\u2019s an opportunity for your team to come together to plan how to move important work forward.\n\nSo feel free to boldly try new formats and shake things up to see what works best.\n\nWant to run better retrospectives?\n\nRead our ultimate guide to data-informed retrospectives to learn how your team can use non-toxic software development data to improve the quality of conversations."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "Want to run better retrospectives?\n\nRead our ultimate guide to data-informed retrospectives to learn how your team can use non-toxic software development data to improve the quality of conversations.\n\nRead the retrospective guide\n\nMika Vakula is a Software Engineer at Swarmia.\n\nIn the past, he's worked as a CEO, CTO, and a software developer.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/daily-stand-ups/", "content": "In the past, he's worked as a CEO, CTO, and a software developer.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nDec 28, 20225x the customers and 38 new features \u2014 our year in reviewRead now \u2192\n\nMar 16, 2022Why investors should care about product development performanceRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nWhy cycle time is a better metric than velocity\n\nEero Kettunen, Customer Success Manager \u00b7 \n\nAug 31, 2022\n\nCycle time and velocity are both commonly used to measure and improve software teams\u2019 ability to estimate how long it will take for them to complete a piece of work.\n\nWhile both metrics have their time and place, cycle time is generally the more useful measure of the two.\n\nBut before we get into the why, let\u2019s quickly define both metrics.\n\nWhat is velocity?\n\nVelocity is an estimation of how many story points an agile team can complete within a sprint.\n\nIt conveys the average number of story points completed in past sprints."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "What is velocity?\n\nVelocity is an estimation of how many story points an agile team can complete within a sprint.\n\nIt conveys the average number of story points completed in past sprints.\n\nVelocity helps teams plan their work and decide how much work to include in their next sprint.\n\nWhat is cycle time?\n\nCycle time is a measure of how long it takes for a team to complete a piece of work from start to finish.\n\nIt\u2019s commonly used to understand how long it takes to deliver a piece of work and optimize the team\u2019s speed.\n\nWhy is cycle time a better metric than velocity?\n\nWhile both cycle time and velocity can be used in a variety of different ways, planning estimates are a common use case for both.\n\nIn this comparison, we\u2019ll focus on that particular objective.\n\nHowever, it\u2019s also good to note that making the right decision between the two depends heavily on your context.\n\n1."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "In this comparison, we\u2019ll focus on that particular objective.\n\nHowever, it\u2019s also good to note that making the right decision between the two depends heavily on your context.\n\n1.\n\nCycle time is harder to game\n\nOne of the main reasons agile teams use story points to estimate time-bound work is that the abstraction makes it difficult to compare teams with one another.\n\nThat\u2019s because the size of a story point is subjective, allowing each team to come up with their own definition.\n\nUnfortunately, this also makes velocity inherently easy to game.\n\nIn fact, increasing velocity is as simple as over-estimating how long it will take you to complete a task and adding a larger number to your issue tracker.\n\nWhile cycle time is a more objective unit of measurement than story points, you could still argue that cycle time can also be gamed by lowering the scope of work you complete in a given cycle.\n\nThat\u2019s partially true, but this kind of optimization will most likely work in your favor."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "That\u2019s partially true, but this kind of optimization will most likely work in your favor.\n\nMost teams are working on overly large issues anyway, and splitting the work into smaller batches helps them iterate faster.\n\nThis is especially true for smaller pieces of work, such as pull requests.\n\nAnd since decreasing your cycle time requires you to complete work measurably faster, your team will have to identify and fix real process bottlenecks to improve.\n\n2.\n\nCycle time helps spot outliers\n\nA good way to continually improve a team\u2019s ability to plan and estimate work is to have open discussions about outliers and understand why a specific task took much longer than estimated.\n\nIn other words, if you can\u2019t identify and drill down into outliers, it\u2019ll be hard to get better at planning as a team.\n\nStory point -based velocity, on the other hand, has one additional level of abstraction on top of time."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "Story point -based velocity, on the other hand, has one additional level of abstraction on top of time.\n\nThat extra layer makes it harder for teams to get to the important discussion on why a specific task exploded.\n\nAnd without that conversation, it\u2019s nearly impossible to improve the team\u2019s planning accuracy over time.\n\nWhen you\u2019re using cycle time for planning, the goal is that all the planned units of work (user stories in particular) are approximately the same size.\n\nWith this practice, you team learns to split work into equally sized chunks, which helps you better estimate how many issues of different kinds (bugs, tasks, stories) you can complete in a sprint.\n\nAnd when you notice that any issue took longer than expected, you can have an informed discussion about what caused it and learn from it.\n\n3.\n\nCycle time doesn\u2019t add meetings to your calendar\n\nMeasuring velocity comes with the overhead of planning poker."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "3.\n\nCycle time doesn\u2019t add meetings to your calendar\n\nMeasuring velocity comes with the overhead of planning poker.\n\nPlanning poker is a type of meeting where the whole software team comes together to guesstimate the effort of different  tasks.\n\nThis technique results in gauging a number of story points for each task.\n\nThe problem is, planning poker and guessing the size of a task is\u00a0additional work that in itself provides little value.\n\nWith the right tools, measuring cycle time doesn\u2019t add any extra meetings or ceremonies to your work weeks.\n\nWith the cycle time based planning approach, your team will spend more time in splitting and better defining tasks, which is valuable work that contributes to creating the actual solution.\n\nBonus: Cycle time is connected to improved business outcomes\n\nAs an added bonus, out of the two metrics, only cycle time is directly related to business outcomes."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "Bonus: Cycle time is connected to improved business outcomes\n\nAs an added bonus, out of the two metrics, only cycle time is directly related to business outcomes.\n\nAnd while this argument has nothing to do with planning and estimation, it\u2019s still important to address for the following reasons.\n\nFirstly, the link between cycle time and business outcomes has been extensively researched by the DevOps Research and Assessment team.\n\nWhen talking about the cycle time of features shipped to customers, this metric determines how fast you\u2019re able to ship additional value to your customers.\n\nSoftware teams with fast cycle times learn faster and can outpace their competition.\n\nSecondly, it pays off to look outside your immediate use cases when you\u2019re making a decision on what to track.\n\nBesides, getting to your objectives with a minimum number of metrics will make things easier."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "Besides, getting to your objectives with a minimum number of metrics will make things easier.\n\nSo if you choose to use velocity for the planning estimation use case, you would still want to follow cycle time as well because it\u2019s linked to business outcomes.\n\nBy measuring only cycle time you will satisfy both of these needs with one metric.\n\nThirdly, given the strong link to business outcomes and the objective unit of measurement, cycle time is a great metric for continuously improving your software teams\u2019 ability to iterate quickly.\n\nAfter all, teams that ship fast have more opportunities to learn and improve their planning accuracy.\n\nIn addition, discovering and fixing bottlenecks related to cycle time, such as too much work in progress or long wait times for code reviews, are closely related to improving estimation accuracy, since these are exactly the kind of things that make estimation difficult in the first place.\n\nCan we use cycle time as our north star metric?"}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "Can we use cycle time as our north star metric?\n\nUnfortunately, cycle time is not a silver bullet either.\n\nWhile it\u2019s a proven metric for improving planning accuracy, when used in isolation, you run the risk of obsessing over a single metric and compromising other important aspects of software development productivity.\n\nThat\u2019s why measuring cycle time should be balanced with other metrics that can indicate if you\u2019re going too fast, such as change failure rate.\n\nHow should you decide what to measure, then?\n\nIt\u2019s relatively easy to come up with a large number of metrics that all seem to give a signal of some sort.\n\nWhat\u2019s difficult but crucial is being able to separate the wheat from the chaff, especially when your engineering culture is at stake.\n\nLuckily, there\u2019s new research in the area of software team performance, making it that much easier to confidently select a holistic set of measures that can help you get towards your objectives."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "Luckily, there\u2019s new research in the area of software team performance, making it that much easier to confidently select a holistic set of measures that can help you get towards your objectives.\n\nThe SPACE framework combines much of this latest research under a single framework.\n\nWe strongly recommend familiarizing yourself with the framework when thinking about which metrics to adopt in your organization.\n\nStart measuring your team\u2019s cycle time today\n\nSwarmia gives you access to reseach-backed software development metrics \u2014 including cycle time.\n\nIt also helps you set and track relevant working agreements.\n\nGet started with a free 14-day trial.\n\nStart trial\n\nEero Kettunen is a Customer Success Manager at Swarmia.\n\nIn the past, he worked as a Consultant at BCG.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/velocity-vs-cycle-time/", "content": "In the past, he worked as a Consultant at BCG.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nMar 16, 2022Why investors should care about product development performanceRead now \u2192\n\nNov 24, 2021Why product teams should plan together \u2014 and how we do it at SwarmiaRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nYour organization\u2019s guide to the SPACE framework\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nJul 28, 2022\n\nWe\u2019ve helped hundreds of organizations build a more complete picture of development productivity.\n\nThis guide on the SPACE framework of developer productivity explains the framework, what we\u2019ve learned along the way, and how to get started with SPACE in your organization.\n\nWhat is the SPACE framework?\n\nSPACE\u00a0is a framework for developer productivity.\n\nIt combines much of the latest research on development productivity under a single framework.\n\nNicole Forsgren, a member of the DORA team and a co-author of the book Accelerate, led the SPACE framework study."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Nicole Forsgren, a member of the DORA team and a co-author of the book Accelerate, led the SPACE framework study.\n\nSPACE goes beyond the specific metrics included in DORA and gives a more complete and nuanced picture of developer productivity.\n\nSPACE lists the five most important dimensions of developer productivity (Satisfaction & Well-being, Performance, Activity, Communication & Collaboration, Efficiency & Flow) at three different organizational levels (individual, team, and system).\n\nWhy you should use the SPACE framework?\n\nThe SPACE framework aims to overcome the flaws of earlier attempts of measuring developer productivity.\n\nThese \"myths and misconceptions about developer productivity\" include:\n\nProductivity is all about developer activity.\n\nProductivity is only about individual performance.\n\nOne productivity metric can tell us everything.\n\nProductivity measures are useful only for managers.\n\nProductivity is only about engineering systems and developer tools."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "One productivity metric can tell us everything.\n\nProductivity measures are useful only for managers.\n\nProductivity is only about engineering systems and developer tools.\n\nTo counteract these myths, the SPACE framework \"provides a way to think rationally about productivity in a much bigger space\" that is informed by a wide range of research on developer productivity.\n\nSPACE framework dimensions of developer productivity\n\nSatisfaction and well-being\n\n\u201cSatisfaction is how fulfilled developers feel with their work, team, tools, or culture; well-being is how healthy and happy they are, and how their work impacts it.\u201d\n\nStudies show that productivity and satisfaction are correlated.\n\nMeasuring satisfaction and well-being can help you understand productivity and may act as a leading indicator of burnout and reduced productivity.\n\nSatisfaction and well-being can often be best measured with surveys."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Satisfaction and well-being can often be best measured with surveys.\n\nExample metrics:\n\nEmployee satisfaction (eNPS and team health checks)\n\nInvestment balance (amount of KTLO)\n\nBurnout and engagement\n\nPerformance\n\n\u201cPerformance is the outcome of a system or process.\u201d\n\nSoftware engineering performance can be hard to quantify.\n\nConnecting individual work to business outcomes is often difficult.\n\nProducing more code faster may not lead to more high-quality code.\n\nHigh-quality code may not deliver customer value.\n\nFeatures that customers love don\u2019t always create positive business outcomes.\n\nBecause of these challenges, software engineering performance is best evaluated as outcomes instead of outputs."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Features that customers love don\u2019t always create positive business outcomes.\n\nBecause of these challenges, software engineering performance is best evaluated as outcomes instead of outputs.\n\nExample metrics:\n\nChange failure rate (DORA)\n\nInvestment balance (the amount of building new stuff)\n\nCustomer satisfaction (NPS)\n\nReliability\n\nActivity\n\n\u201cActivity\u00a0is a count of actions or outputs completed in the course of performing work.\u201d These include outputs like design documents and actions like incident mitigation.\n\nDeveloper activity can provide valuable but limited insights about developer productivity if measured correctly.\n\nIn practice, developer activity is impossible to measure comprehensively, because many developer activities are intractable (e.g.\n\nattending team meetings and helping other team members).\n\nTherefore, you should never use activity metrics in isolation and always balance them with metrics from other dimensions."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "attending team meetings and helping other team members).\n\nTherefore, you should never use activity metrics in isolation and always balance them with metrics from other dimensions.\n\nExample metrics:\n\nIssues completed\n\nPull requests reviewed and merged\n\nDeployment frequency (DORA)\n\nCommunication and collaboration\n\n\u201cCommunication and collaboration capture how people and teams communicate and work together.\u201d\n\nSoftware development requires extensive and effective communication and collaboration between individuals and teams.\n\nEffective teams rely on high transparency and awareness of other people\u2019s work and make sure everyone has access to the necessary information.\n\nGood communication and collaboration improve the team- and system-level productivity but are often in tension with individual productivity.\n\nHelping others can limit an individual developer\u2019s ability to get into a state of flow, which may reduce motivation and satisfaction."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Helping others can limit an individual developer\u2019s ability to get into a state of flow, which may reduce motivation and satisfaction.\n\nMeasuring communication and collaboration directly is complex as it includes a lot of invisible work.\n\nThe example metrics below can be used as proxies to measure communication and collaboration.\n\nExample metrics:\n\nThe number of people working on the same features\n\nTeam health checks (silos and communication)\n\nPull request review time\n\nEfficiency and flow\n\n\u201cEfficiency and\u00a0flow capture the ability to complete work or make progress on it with minimal interruptions or delays, whether individually or through a system.\u201d\n\nFor individual developers, this dimension of productivity is echoed when talking about \u201cgetting into the flow.\u201d At the team- and system-level, efficiency is related to the steps needed to take an idea from start to the end customer.\n\nThe systemic effects of improving efficiency and flow often significantly impact your engineering productivity."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "The systemic effects of improving efficiency and flow often significantly impact your engineering productivity.\n\nOutside of SPACE, this dimension is discussed in detail in the ground-breaking book\u00a0Principles of Product Development Flow by Donald G. Reinertsen.\n\nYou can measure efficiency and flow through a combination of metrics collected from the software development flow (e.g.\n\nDORA change lead time) and survey data.\n\nExample metrics:\n\nTeam health checks (silos and communication)\n\nPerceived ability to stay in flow and complete work\n\nInvestment balance (the amount of productivity-related work)\n\nChange lead time and time to recovery (DORA)\n\nStory/issue cycle time\n\nSPACE framework organizational levels\n\nFor a fuller picture of what is happening in your organization, the SPACE framework suggests that you select separate metrics for each of these three organizational levels:\n\nIndividual\n\nTeam or group:\u00a0People who work together."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "System:\u00a0End-to-end work through a system, e.g., the development pipeline of your organization from design to production.\n\nBest practices for using the SPACE framework\n\nWe\u2019ve helped hundreds of companies start and succeed in their efforts to build a more complete picture of development productivity.\n\nThese are the best practices we\u2019ve learned along the way.\n\n1.\n\nInclude metrics from at least three dimensions\n\nTo genuinely understand development productivity, you should use several metrics across multiple dimensions of the framework.\n\nThe recommended minimum is three dimensions.\n\nWhen selecting what metrics to include, less is more.\n\nHaving too many metrics will make using the framework overly complex.\n\nDon\u2019t try to squeeze everything in.\n\nRather, start with a set of proven metrics that support your engineering organization\u2019s priorities.\n\nFor modern software organizations, DORA metrics, issue cycle time, investment balance, and team health checks form a great set of core metrics."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "For modern software organizations, DORA metrics, issue cycle time, investment balance, and team health checks form a great set of core metrics.\n\nThese all have a proven link to an engineering organization\u2019s ability to deliver good business outcomes.\n\n2.\n\nStart from team-level metrics\n\nOut of the three organizational levels in the SPACE framework, the team level is often the easiest to get started with.\n\nIt\u2019s also the level, where you are likely to get the most useful insights and least likely to cause negative incentives or harm company culture.\n\nStarting from the team level allows you also better optimize the metrics you use in each team.\n\nProductivity is very context-dependent.\n\nEspecially in larger companies, different things matter for different teams and systems.\n\n3.\n\nInvest in getting your engineers on board\n\nDevelopers are often wary of all kinds of software engineering metrics.\n\nThe resulting pushback may lead to managers trying to ignore the engineers and move forward without them."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "The resulting pushback may lead to managers trying to ignore the engineers and move forward without them.\n\nIn our experience, though, attempts that don\u2019t include individual engineers fail.\n\nEngineers create the data in the systems that you\u2019re trying to observe and will game the metrics if they don\u2019t want to use them.\n\nAlso, asking people about their experiences creates a more accurate picture of productivity than data gathered from system behavior alone.\n\nIf people don\u2019t want to share their experiences honestly, you\u2019ll lose crucial parts of the insights you need to succeed.\n\nTo get individual engineers on board, make sure the tools you use benefit individual developers and get them excited about improving the ways they work.\n\n4.\n\nGo beyond aggregates to detect patterns and reduce bias\n\nRelying solely on high-level metrics can quickly lead to making unwarranted conclusions and makes it impossible to spot possible bias."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "4.\n\nGo beyond aggregates to detect patterns and reduce bias\n\nRelying solely on high-level metrics can quickly lead to making unwarranted conclusions and makes it impossible to spot possible bias.\n\nMake sure you\u2019re able to drill down to individual items to investigate what\u2019s causing a change in the metrics.\n\nFor example, when aggregating a year\u2019s worth of data, one team member\u2019s parental leave can show up as poor performance for the whole team.\n\nHow to implement the SPACE framework in your organization?\n\nThese steps will help you implement the SPACE framework in your organization without getting overwhelmed.\n\n1.\n\nStart with the why\n\nFor most organizations, introducing the SPACE framework is a major cultural change.\n\nAs with all changes, people will have questions and fears.\n\nYou should communicate openly why the SPACE framework is important and proactively address the objections people may have."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "As with all changes, people will have questions and fears.\n\nYou should communicate openly why the SPACE framework is important and proactively address the objections people may have.\n\nWhen communicating the why, your main goal is to get everyone to agree that continuous improvement is important.\n\nContinuous improvement requires participation \u2014 and work \u2014 from everyone in the organization.\n\nIf your leaders and teams don\u2019t value continuous improvement, you\u2019re unlikely to succeed.\n\nSecondly, you should communicate that the goal of the SPACE framework is to benefit everyone in the organization.\n\nNot to stalk developers.\n\nMeasuring development productivity correctly and applying the results improves product quality, engineering velocity, and developer experience.\n\n2.\n\nGet easy wins and share success stories\n\nTrying to roll out the SPACE framework to your whole organization immediately will diminish your chances of success.\n\nInstead, start with a few of the most motivated teams."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Instead, start with a few of the most motivated teams.\n\nThis will allow you to get some easy wins and gain momentum.\n\nYour goal is to show that implementing the SPACE framework is not too cumbersome and that individual teams can use it to get real results.\n\nThe easiest way to get started is to use a tool like Swarmia, which includes a number of well-researched metrics that map into the different dimensions of the SPACE framework.\n\nWhile you\u2019re making progress and getting results, share any success stories with the wider organization to build momentum and get more people interested in measuring development productivity.\n\n3.\n\nRoll out SPACE to the wider organization\n\nOnce you have a few teams happily using the SPACE framework, you can start thinking about rolling it out for the rest of the teams.\n\nIf you\u2019ve succeeded with the SPACE framework and the teams have found it an integral part of their continuous improvement journey, you should have multiple advocates excited to convince their peers."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "If you\u2019ve succeeded with the SPACE framework and the teams have found it an integral part of their continuous improvement journey, you should have multiple advocates excited to convince their peers.\n\nIn the beginning, continue rolling out the SPACE framework team-by-team to multiple systems in your organization.\n\nWe\u2019ve found that team lead and individual team onboarding sessions are a good way to educate people on the benefits of measuring software engineering productivity and address any concerns or questions that people may have.\n\nWhen rolling out the SPACE framework, make sure that teams also incorporate it into their day-to-day working practices.\n\nThe insights SPACE provides are useful in recurring meetings and ceremonies, such as one-to-ones, retrospectives, and feature prioritization discussions.\n\nThis ensures that continuous improvement through metrics becomes a part of your culture \u2014 not a one-and-done project."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "This ensures that continuous improvement through metrics becomes a part of your culture \u2014 not a one-and-done project.\n\nSPACE framework example template\n\nThis filled out template includes carefully selected metrics based on the latest research.\n\nThese metrics fit most modern software engineering organizations and are our recommended starting point for implementing the SPACE framework.\n\nIf you\u2019re using Swarmia, the example template shows how the metrics in Swarmia are related to the SPACE framework and suggests metrics you can collect from other systems.\n\nConclusion\n\nImplementing the SPACE framework will allow you to build a more complete picture of developer productivity in your organization.\n\nHaving the right insights will allow your teams and the whole organization to improve the ways they work, be more satisfied, and create better business outcomes."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Having the right insights will allow your teams and the whole organization to improve the ways they work, be more satisfied, and create better business outcomes.\n\nYou\u2019ll likely go through multiple iterations of your SPACE framework implementation, which is OK. Get started with something simple today and keep improving it.\n\nMake the most of the SPACE framework with Swarmia\n\nSwarmia allows you to not only track different dimensions of the SPACE framework but also set team-wide working agreements that reflect your priorities.\n\nYou can get started by watching our 3-minute product tour.\n\nWatch now\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/space-framework/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nDec 16, 2021Fixing the coffee situation at the office with lean and queuing theoryRead now \u2192\n\nNov 11, 2021Swarmia is now SOC 2 compliantRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nDORA change failure rate \u2013 what, why, and how\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nJun 9, 2022\n\nOut of all the four DORA metrics, change failure rate is the one causing the most headache to engineering organizations.\n\nAt Swarmia, we\u2019ve spent quite a bit of time making sure we get it right to help software teams drive good business outcomes.\n\nIn this blog post, I will shortly discuss what DORA change failure rate is, explain how it should be calculated, and share some common mistakes organizations make when measuring change failure rate.\n\nWhat is the definition of DORA change failure rate?"}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "What is the definition of DORA change failure rate?\n\nThe change failure rate of a team is defined by answering the question:\n\nFor the primary application or service you work on, what percentage of changes to production or releases to users result in degraded service (for example, lead to service impairment or service outage) and subsequently require remediation (for example, require a hotfix, rollback, fix forward, patch)?\u201d\n\nIn short, DORA change failure rate is the percentage of deployed changes that cause a failure in production.\n\nWhy should you measure DORA change failure rate?\n\nDORA metrics are currently the best-researched metrics in software engineering productivity that have a proven relationship with business performance.\n\nThe goal of using DORA metrics is to maximize your ability to iterate quickly, while making sure that you're not sacrificing quality."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "The goal of using DORA metrics is to maximize your ability to iterate quickly, while making sure that you're not sacrificing quality.\n\nTo achieve this, there are DORA metrics for speed (deployment frequency and change lead time) and quality (change failure rate and time to restore service).\n\nThe quality metrics are there to alert you when you're going too fast.\n\nTo summarize, you measure DORA change failure rate to maintain engineering quality while accelerating your engineering performance.\n\nHow should you calculate DORA change failure rate?\n\nTo calculate DORA change failure rate you need to know three things:\n\nThe number of production deployments.\n\nThe total number of production deployments or releases you\u2019ve made.\n\nThe number of \u201cfix-only\u201d deployments.\n\nThe number of production deployments or releases that were only for remediation (a hotfix, rollback, fix forward, patch).\n\nThe number of failed changes.\n\nThe number of production deployments or releases causing an incident or a failure."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "The number of failed changes.\n\nThe number of production deployments or releases causing an incident or a failure.\n\nTo get your change failure rate, start by calculating the number of changes.\n\nThat\u2019s the number of production deployments minus the number of \u201cfix-only\u201d deployments.\n\nOnce you know the number of changes, you can calculate your team\u2019s change failure rate by simply dividing the number of failed changes by the number of changes.\n\nIn theory, this sounds simple.\n\nHowever, there are some common pitfalls that you should be aware of when you start measuring the change failure rate of your team.\n\nCommon mistakes measuring DORA change failure rate\n\n1.\n\nIncluding all incidents in change failures\n\nThe quality of incident data varies heavily between teams and organizations.\n\nOften, incident data doesn\u2019t readily differentiate between (1) incidents that were caused by changes that were made by the team and (2) incidents that were caused by external factors, such as cloud provider downtime."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "Categorizing the data is extra work, and it can be tempting to include all incidents when calculating your change failure rate.\n\nThis works against the purpose of change failure rate: to tell you when you\u2019re moving too fast and compromising on quality.\n\nAlso, seeing the change failure rate go up because of external factors can make the metric feel irrelevant to the team.\n\n2.\n\nIncluding \u201cfix-only\u201d deployments in the number of changes\n\nOne mistake teams make with their definition of \u201cchange failure\u201d is that they don\u2019t exclude \u201cfix-only\u201d deployments from the total number of changes.\n\nAs a result, change failure rate calculations may be skewed.\n\nFor example, let\u2019s imagine we have a change called \u201cadd todo list sorting\u201d that we\u2019re trying to deploy.\n\nUnfortunately, our pre-release testing process fails miserably.\n\nTwice."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "For example, let\u2019s imagine we have a change called \u201cadd todo list sorting\u201d that we\u2019re trying to deploy.\n\nUnfortunately, our pre-release testing process fails miserably.\n\nTwice.\n\nAs a result, our change is successful only on the third try, \u201cAdd fixed fixed todo list sorting.\u201d\n\n: Add todo list sorting\n\npi31415\n\n: Revert\n\n\"Add todo list sorting\"\n2aleph0\n\n: Add fixed todo list sorting\n\na1337cd\n\n: Revert\n\n\"Add fixed todo list sorting\"\n0042sdc\n\n: Add fixed fixed todo list sorting \ud83c\udf89\n\nIf we include the \u201cfix-only\u201d deployments in the \u201cnumber of changes\u201d our change failure rate is 40% (2/5) suggesting that we deployed 3 successful changes to production.\n\nThis is obviously wrong as it makes incident remediation look as if we\u2019re successfully shipping improvements to users.\n\nIf we exclude the \u201cfix-only\u201d deployments, our change failure rate is ~67% (2/3), which is correct.\n\nNote that if the software you build practically never has \u201cfix-only\u201d releases (commonly e.g.\n\nmobile apps), you can ignore this advice."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "Note that if the software you build practically never has \u201cfix-only\u201d releases (commonly e.g.\n\nmobile apps), you can ignore this advice.\n\nIn these cases, the number of \u201cfix-only\u201d deployments will be zero.\n\n3.\n\nMeasuring deployment failures instead of change failures\n\nSome tools incorrectly measure change failure rate as the \u201cpercentage of workflows that fail to enter production.\u201d Meaning, the number of deployment builds that failed on the CI/CD pipeline.\n\nWhile this number can also be useful, it\u2019s very different from DORA change failure rate and only indicative of the quality of your CI/CD build (e.g.\n\ntest flakiness).\n\nCalculating a proper change failure rate requires incident data, which is usually located in a separate system (like PagerDuty) and needs to be connected to deployment data.\n\nIt\u2019s tempting for vendors to sell \u201ceasy DORA metrics support\u201d by cutting some corners.\n\n4.\n\nGaming change failure rate\n\nDORA doesn\u2019t clearly define what \u201cdegraded service\u201d means in practice."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "It\u2019s tempting for vendors to sell \u201ceasy DORA metrics support\u201d by cutting some corners.\n\n4.\n\nGaming change failure rate\n\nDORA doesn\u2019t clearly define what \u201cdegraded service\u201d means in practice.\n\nThe definition of what counts as \u201cchange failure\u201d is up to you.\n\nAs a result, you can always improve your change failure rate just by having a more lax definition of \u201cdegraded service\u201d and marking fewer deployments as failures.\n\nWhen trying to define \u201cdegraded service\u201d for measuring your change failure rate, ask: \u201cwhat kind of failures in production are related to us trying to go too quickly?\u201d Define, track, and mark these as change failures.\n\n5.\n\nTrying to make too detailed conclusions from change failure rate\n\nDORA categorizes team performance into four different levels: elite, high, medium, and low performers.\n\nFor change failure rate elite, high, and medium teams all have the same change failure rate of 0-15%.\n\nThis means that you can be \u201celite\u201d even if 1/7 of your production deployments or releases fail."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "For change failure rate elite, high, and medium teams all have the same change failure rate of 0-15%.\n\nThis means that you can be \u201celite\u201d even if 1/7 of your production deployments or releases fail.\n\nThe low granularity of the metric can be explained by the high variability of production incidents.\n\nIn change failure rate, a multi-day outage and a change affecting 10% of your users for 15 minutes are both counted as single failures.\n\nWhen using DORA change failure rate, keep its limits in mind.\n\nThe best uses for change failure rate are:\n\nGetting priority for improving software quality (like adding automated tests), when you clearly have a high (> 15%) change failure rate.\n\nKeeping track of the trend in your engineering quality.\n\nWhen you notice your change failure rate trending upwards, make sure you understand the nature of the failures that you're experiencing.\n\nIf you want to understand software engineering productivity more deeply, you need to go beyond DORA metrics."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "If you want to understand software engineering productivity more deeply, you need to go beyond DORA metrics.\n\nConclusion\n\nWhen you start measuring DORA change failure rate, make sure you understand why you\u2019re doing it and how it relates to the other three DORA metrics.\n\nThis will allow you to define how to correctly calculate change failure rate for your teams.\n\nRemember, your goal is to drive good business outcomes and not to measure just for the sake of measuring.\n\nStart measuring DORA change failure rate today\n\nSwarmia makes it easy to measure all four DORA metrics \u2014 including change failure rate.\n\nStart your free 14-day trial to see it in action.\n\nStart trial\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/dora-change-failure-rate/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nMay 5, 2022Why small pull requests are\u00a0betterRead now \u2192\n\nJan 5, 2022How software engineers can learn at workRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nHow to balance engineering investments \u2014 and not just keep the lights on?\n\nLauri Ikonen, Product Manager \u00b7 \n\nMay 25, 2022\n\nOne of the inescapable problems in software engineering has to do with balance.\n\nHow do you balance the scales between new investments and keeping the existing software functional; how do you keep teams autonomous while ensuring alignment; which of your customer profiles, markets, products, or initiatives do you prioritize; how do product managers divide their focus between the short, medium and long term?"}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Here, we focus on the first of these balancing acts \u2014 how teams and companies should categorize and prioritize work, such as new features, improving the existing product, reducing complexity, or simply keeping things operational.\n\nThis is a problem all teams face, regardless of their chosen process.\n\nIn deciding which items to work on next, the teams make an implicit or explicit decision on what kind of work they prioritize.\n\nThe stakes are high, at least over the long term.\n\nIgnore the technical burden or productivity improvements for too long, and you\u2019ll risk running into a wall.\n\nNothing quite drives the point home like this visualization by John Cutler:\n\nIn this blog post, we\u2019ll introduce a framework for balancing engineering investments.\n\nWe go through why this framework is our recommendation for organizations who want to get started.\n\nFinally, we provide a few tips on how the categorization and balancing of investments work in practice."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "We go through why this framework is our recommendation for organizations who want to get started.\n\nFinally, we provide a few tips on how the categorization and balancing of investments work in practice.\n\nIntroducing a framework for categorizing engineering investments\n\nThere\u2019s no perfect, one-size-fits-all way to categorize work.\n\nCompanies face their own unique problems, which evolve as the companies change.\n\nAs a consequence, companies need to learn what categories work best for them and iterate on those categories as they go.\n\nStarting somewhere is better than flying blind.\n\nUnless you\u2019ve already established a useful way to categorize engineering work, we recommend getting started with what our customers and we have dubbed the \u201cBalance Framework\u201d."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Unless you\u2019ve already established a useful way to categorize engineering work, we recommend getting started with what our customers and we have dubbed the \u201cBalance Framework\u201d.\n\nOriginally introduced by a former Dropbox VP of Engineering, the framework divides work into two main categories: necessary efforts to keep the current system operational (\u201dkeeping the lights on\u201d or \u201cKTLO\u201d) and elective investments which teams have real freedom to prioritize.\n\nThe idea is that KTLO work can\u2019t be shrugged off without harming the current business, while the rest of the categories should be consciously prioritized."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "The idea is that KTLO work can\u2019t be shrugged off without harming the current business, while the rest of the categories should be consciously prioritized.\n\nThe elective investments are further divided into three categories:\n\nNew things \u2014 work towards your business objectives with new products, features, or integrations\n\nImproving things \u2014 improvements to existing features (including improvements in performance, reliability, and security)\n\nProductivity \u2014 mostly improvements to developer productivity but engineering organizations can also help scale many company operations\n\nFinally, all work belongs to one of the categories, and to one only.\n\nIn other words, the categories are mutually exclusive and collectively exhaustive.\n\nThis keeps the analysis of categories simple and enables aggregation from teams to companies.\n\nWe\u2019ve seen our customers adopt this framework to better understand where their engineering teams\u2019 time really goes and ultimately improve the focus and impact of their teams."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "We\u2019ve seen our customers adopt this framework to better understand where their engineering teams\u2019 time really goes and ultimately improve the focus and impact of their teams.\n\nWe\u2019ve also used it ourselves to learn its ins and outs.\n\nMost importantly, the framework provides an indicator that can summarize where the focus went, and whether the balance is changing or not.\n\nIt enables having discussions based on data \u2014 rather than just intuition.\n\nWhy a balancing approach works\n\nThe Balance Framework aligns well with the typical goals and problems of engineering organizations.\n\nNext, we\u2019ll briefly introduce and discuss the five key benefits.\n\nIt aligns with the priorities of growth companies\n\nFrom the perspective of a growth company, the three categories of elective investments map extremely well to the mix of priorities product teams have:\n\nNew things contribute to the business objectives through building new products, features, or integrations.\n\nThis is the lifeblood of growing product companies."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "This is the lifeblood of growing product companies.\n\nThis is usually the category that receives the most attention and requests, because many of us like shiny, new things.\n\nImproving features is essential for closing new business and keeping existing customers happy  \u2014 in other words driving retention, which has a very significant effect on user and revenue growth.\n\nNote that building new things tends to increase demand for improvements.\n\nProductivity investments aim at reducing manual work, often by improving the health of underlying engineering systems.\n\nThis is a vital part of the work required to keep the business afloat in the long term, and the engineering teams happy and healthy.\n\nIt shifts the focus of technical debt towards impact\n\nThe productivity category is an excellent framing for work towards \u201creducing tech debt\u201d, because it highlights the impact of the work \u2014 instead of the work itself."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "This challenges engineering teams to think of what they\u2019re trying to achieve by reducing technical debt:\n\nWhat new things are easier to build if we do this?\n\nDoes improving this system help us move faster?\n\nHow many hours do we spend on this manual task each week?\n\nWhat\u2019s more, reframing technical debt this way helps align engineering with product managers, who are focused on the impact of the work.\n\nThe team will have an easier time communicating the importance of e.g.\n\nrefactoring work when they can communicate the end goal in terms of value.\n\nWhen teams understand the impact of fixing technical debt, it makes them think about priorities.\n\nThe prioritization process is further amplified by the balancing nature of the framework itself.\n\nWhen companies start adopting the framework, they need to think about target budgets and how much of each type of work the teams actually end up doing."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "When companies start adopting the framework, they need to think about target budgets and how much of each type of work the teams actually end up doing.\n\nHaving a budget for addressing tech debt increases the odds it\u2019s done continuously, while also ensuring any team doesn\u2019t go \u201call-in\u201d and try to fix everything at once.\n\nIt\u2019s compatible with different types of teams\n\nThe amount of specialization grows with the size of the organization, which can cause problems if the way of categorizing work is one-dimensional.\n\nA strength of the Balance Framework is its compatibility with different types of teams.\n\nNearly all teams can categorize their work to the four categories \u2014 even if they have different practices of keeping track of the categories for work items.\n\nYes, there might be teams that are heavy on a few of the categories (e.g.\n\nplatform or DevOps/tooling teams would, by definition, focus on increasing productivity), but the type of work the categories capture is consistent across the teams."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "platform or DevOps/tooling teams would, by definition, focus on increasing productivity), but the type of work the categories capture is consistent across the teams.\n\nIt works with both companies and teams\n\nThe advantage of the mutually exclusive, collectively exhaustive categories is that you can compare them on the company level or across multiple teams.\n\nBecause the categories are universal, you can aggregate team level data on the company level.\n\nThis way, you\u2019ll understand how much you\u2019re investing towards new features as a whole, and whether keeping the lights on is increasingly all you manage to do.\n\nBeing able to communicate how much the entire organization is able to prioritize towards critical feature work, or towards productivity investments that are vital in the long run, is useful for having tough conversations about priorities, focus, and resourcing with different stakeholders."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "It provides data to make tough discussions easier\n\nProblems in priorities are often about limited context or different approaches and perspectives between the organizational functions.\n\nEngineering, product, and business focus on different goals, which makes tough discussions unavoidable.\n\nUltimately, the resolution lies in good communication across the functions, and this is where both data and patience are key.\n\nThe qualitative side of the Balance Framework \u2014 even down to the name \u2014 makes the concept of balancing investments more tangible to people outside of the engineering organization.\n\nHaving a well-thought out and implemented approach for categorizing investments can help CTOs handle tough discussions in the board room or provide data-founded arguments for teams who need to defend their priorities to a stakeholder with a strong agenda.\n\nAchieving balance \u2014 how to put the framework into practice\n\nWith any framework, the first question is about how to start measuring it."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Achieving balance \u2014 how to put the framework into practice\n\nWith any framework, the first question is about how to start measuring it.\n\nThe only level of the organization that can reliably measure the work done are the teams themselves.\n\nThat\u2019s why leaders who want to start understanding the inputs need to start by getting buy-in from the teams.\n\nOnly after that, they can start to onboard the new \u2014 preferably lightweight \u2014 process of categorizing work.\n\nWe recommend starting with a few pilot teams and making sure that they\u2019re given clear context:\n\nIs it evident why the teams should start categorizing their work?\n\nMotivate the change.\n\nHow do the teams categorize the work in practice?\n\nEstablish clear guidelines and examples.\n\nWhere can the teams see and adjust the investment balance?\n\nProvide tooling and support.\n\nHow should the teams use the data?\n\nAdvise teams and connect them to the end goal."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Where can the teams see and adjust the investment balance?\n\nProvide tooling and support.\n\nHow should the teams use the data?\n\nAdvise teams and connect them to the end goal.\n\nStart categorizing work\n\nTo get an accurate picture of the engineering activities, you need to gather data where work happens.\n\nFor engineering organizations, this is usually captured in issue tracking systems (for plans and goals), and in the version control system (for the actual work and changes).\n\nWe recommend using your issue tracker to categorize the bulk of work.\n\nFirst, add labels to the issues on your issue tracker, starting with your largest projects to keep the process simple.\n\nHowever, looking at issue tracker data alone provides only a partial view into what\u2019s happening.\n\nNot all of the work is connected to issues \u2014 especially the unplanned KTLO work \u2014 and it can be helpful to also cover changes (e.g.\n\npull requests) not connected to any issues."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Not all of the work is connected to issues \u2014 especially the unplanned KTLO work \u2014 and it can be helpful to also cover changes (e.g.\n\npull requests) not connected to any issues.\n\nThese data points can also provide a more accurate measure of where time is going.\n\nYou can categorize such work using a lightweight process, e.g.\n\nwith naming conventions or labels \u2014 but you\u2019ll find that tagging this work manually will quickly become burdensome and unreliable.\n\nSwarmia provides filters based on both issue and pull request fields, which can be automatically used to categorize work.\n\nWe also prompt developers to categorize pull requests that don\u2019t automatically fall into any filter-based category.\n\nEstablish transparency\n\nOnce there\u2019s data to categorize, visualizing the balance of investments is the next step to tackle.\n\nYou can get started with manual exports and reports at the MVP scale."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Establish transparency\n\nOnce there\u2019s data to categorize, visualizing the balance of investments is the next step to tackle.\n\nYou can get started with manual exports and reports at the MVP scale.\n\nHowever, if the intention is to have the teams frequently consider their investment balance, they\u2019ll need near real-time transparency to their data.\n\nSet goals\n\nWhen teams can see what they\u2019re spending their time on, they can establish a feedback loop to adjust their balance.\n\nTeams can set goals for some of the categories first, and keep themselves accountable for reaching them.\n\nA team might want to invest at least 40% of their time in new things, or spend at most 25% of their time keeping the lights on.\n\nGoals can also be set on company level to drive a bigger initiative throughout the engineering organization and coordinated across the teams."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Goals can also be set on company level to drive a bigger initiative throughout the engineering organization and coordinated across the teams.\n\nTeams are different, and you don\u2019t want to end up with 30 teams aiming for the same balance of investments \u2014 think of this as a portfolio, where greenfield product teams should aim for a very high \u201cnew things\u201d ratio and platform teams should optimize for \u201cproductivity\u201d.\n\nDedicate bandwidth to a category of work\n\nTeams using Kanban are familiar with swim lanes, and they are a fitting tool to ensure a minimum investment towards a category of the team\u2019s choice.\n\nThe process needs to be adjusted somewhat for teams using Scrum: simply dedicate a certain percentage of story points for each planned sprint.\n\nThis is a good technique when the team has one important goal to drive.\n\nIt\u2019s worth mentioning that the dedicated swim lane, or the work of such category, should optimally have some type of visual indicator signifying its special nature."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "It\u2019s worth mentioning that the dedicated swim lane, or the work of such category, should optimally have some type of visual indicator signifying its special nature.\n\nThis is the easiest to do with physical boards but unfortunately more difficult to pull off with just issue tracking software.\n\nA lightweight process can help if it\u2019s difficult to visualize the category of work \u2014 e.g.\n\nstarting each daily stand-up with the dedicated category.\n\nWrapping up\n\nIn this blog post, we introduced one approach to categorizing and balancing engineering investments.\n\nThe Balance Framework provides a good set of defaults and a straightforward starting point for engineering organizations who\u2019ve yet to develop a better way of categorizing work.\n\nBalancing engineering investments is not a new problem, but it\u2019s been something that\u2019s only done periodically, top-down, and with relatively incomplete data."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Balancing engineering investments is not a new problem, but it\u2019s been something that\u2019s only done periodically, top-down, and with relatively incomplete data.\n\nThis doesn\u2019t necessarily hold anymore, as modern tooling has made the tracking of investment balance easier to approach and implement.\n\nTools like Swarmia can provide a rich view of what the teams are working on, and provide flexible ways to implement the categorization process based on Jira/Linear, and GitHub data.\n\nRead more about balancing engineering investments with Swarmia.\n\nTry the easiest way to track your engineering investments\n\nSwarmia allows you to configure your own investment categories, whether you follow the Balance Framework or not.\n\nWatch our 3-minute product tour to see it in action.\n\nWatch now\n\nLauri Ikonen leads product management at Swarmia.\n\nIn the past, he led one of the product groups and worked as a Product Manager at Smartly.io."}, {"source": "https://www.swarmia.com/blog/balancing-engineering-investments/", "content": "Watch now\n\nLauri Ikonen leads product management at Swarmia.\n\nIn the past, he led one of the product groups and worked as a Product Manager at Smartly.io.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nDec 8, 2022How we use Swarmia at SwarmiaRead now \u2192\n\nMar 16, 2022Why investors should care about product development performanceRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nHow your software engineering team can ship\u00a010x\u00a0faster\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nApr 13, 2022\n\nAt Swarmia, we use the tagline \"ship 10x faster.\u201d To many, that sounds like an audacious claim.\n\nThis blog post is the long footnote behind the asterisk (*) on that tagline.\n\nWhen we talk about \u201cshipping 10x faster\u201d at Swarmia, we mean that your customers will have the features that matter to them in their hands 10x sooner.\n\nUltimately, this allows you to serve your customers better than the competition."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Ultimately, this allows you to serve your customers better than the competition.\n\n\u201cShipping 10x faster\u201d can be achieved through the combination of improving the speed at which you ship code, improvements, and \u2014 most importantly \u2014 value to your customers.\n\nIn this blog post, I\u2019ll explain and share practical examples of what shipping faster on each of these three levels looks like when using Swarmia.\n\nShip code faster\n\nShipping code faster is the natural starting point for engineering teams who want to improve productivity.\n\nIt has the most immediate impact on the everyday life of the team members.\n\nEngineers hate wasting time on manual work or chasing people down to get their code reviewed.\n\nWhen you\u2019re deciding how to measure productivity, you want to avoid vanity metrics.\n\nDORA metrics are the most thoroughly researched engineering metrics with a proven relationship to business performance."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "DORA metrics are the most thoroughly researched engineering metrics with a proven relationship to business performance.\n\nThe \u201clead time for changes\u201d DORA metric is great for measuring shipping code faster as it measures \"the amount of time it takes a commit to get into production.\u201d\n\nIn Swarmia, we track lead time for changes through pull request cycle time.\n\nOur cycle time metric is broken down into four distinct parts: time in progress, time in review, time to merge, and time to release.\n\nPeople often have an optimistic view of how long this process takes and are usually surprised when they see their team\u2019s actual cycle time.\n\nUnderstanding their real cycle time allows teams to identify bottlenecks that have been previously invisible or downplayed.\n\nExample: Team with slow code reviews\n\nHere\u2019s an example of a team that has a review time of 46 hours.\n\nThis means that each engineer has to wait for more than two days to get their code reviewed \u2014 and often chase people down to get a faster review."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "This means that each engineer has to wait for more than two days to get their code reviewed \u2014 and often chase people down to get a faster review.\n\nSwarmia can help the team in multiple ways:\n\nThe team can adopt a review time working agreement that allows them to see how they\u2019re doing and get daily reminders about pull requests waiting for review.\n\nThey can enable review notifications for their Slack channel and a personal Slack notifications when a PR is reviewed.\n\nSwarmia\u2019s pull request view clearly shows all the pull requests waiting for review across all the repositories the team is working on.\n\nBy making code reviews a priority, the team\u2019s review time went down to nine hours, cutting away 37 hours of their cycle time.\n\nYou can also see that their in-progress time went down by seven hours and merge time by six hours.\n\nWhy?\n\nTurns out that when people have long review times, they start making larger PRs."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "You can also see that their in-progress time went down by seven hours and merge time by six hours.\n\nWhy?\n\nTurns out that when people have long review times, they start making larger PRs.\n\nThey also forget to merge their PRs after they\u2019ve been reviewed as they\u2019ve already moved on to a new task.\n\nIn total, the team cut 50 hours (65,7%) of their cycle time, which means they now ship code to production ~3x faster.\n\nShip improvements faster\n\nOnce a team has understood and started addressing the bottlenecks associated with shipping individual pull requests, it\u2019s important to start thinking about bigger chunks of work.\n\nLarger improvements or new features often consist of multiple tasks and pull requests.\n\nIt\u2019s common for the improvement to go live only after most of the tasks have been completed.\n\nIn Swarmia, larger units of work can be tracked through epic, story, and issue cycle time.\n\nThese metrics show how fast you\u2019re shipping improvements."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "In Swarmia, larger units of work can be tracked through epic, story, and issue cycle time.\n\nThese metrics show how fast you\u2019re shipping improvements.\n\nIssue cycle time often reveals if a team is having a hard time focusing and getting things done.\n\nExample: Improving the focus and impact of a team\n\nAbove we see Swarmia\u2019s high-level Work Log visualizing epics for a team that\u2019s having trouble staying focused.\n\nThis manifests itself as very long issue cycle times and gaps in active weeks.\n\nThe developers in this team have clearly started gravitating towards simple tasks, instead of the roadmap work that's more difficult to complete.\n\nWhenever there\u2019s a blocker, the engineers pick up a new task to work on.\n\nThis leads to increased multi-tasking and amplifies the existing problems with cycle time.\n\nLet\u2019s take a look at what the epic cycle times would look like if the team were able to reach 80% flow efficiency."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Let\u2019s take a look at what the epic cycle times would look like if the team were able to reach 80% flow efficiency.\n\n\u201c80% flow efficiency\u201d means that the team does some work on the epic four days a week while the epic is in progress.\n\nIn this second screenshot, the red box is the original completion date and green is the new one.\n\nEvery light red box represents a week of unnecessary delay.\n\nWe can see that with proper prioritization, the cycle time for most epics could have been 2-3x shorter.\n\nFor example, \u201cFantastic Rubber Cheese\u201d could have been in the hands of customers almost five months earlier.\n\nThis is not an isolated example.\n\nWe know from research and our data that teams with clear priorities are able to ship the most important things much faster.\n\nYou can take a look at our blog post on improving issue cycle time to learn more."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "You can take a look at our blog post on improving issue cycle time to learn more.\n\nTo improve their focus using Swarmia, the team can do multiple things:\n\nAdopt a \u201cwork-in-progress\u201d working agreement that helps them stay honest about their priorities.\n\nAdopt issue cycle time working agreements.\n\nThese help the team scope their work into smaller chunks so they can maintain their focus and switch to other priorities in an organized manner.\n\nAdopt an \u201cavoid solo work\u201d working agreement to teach the team to split work better and collaborate on important issues.\n\nDrill down to individual issues to understand where the gaps in the work came from.\n\nShip value 10x faster\n\nIndustry-leading engineering organizations not only enable teams to ship code and improvements quickly but also help them focus on the most valuable work.\n\nIn the end, the goal of shipping faster is not to build a huge list of features but to create value for customers and the business.\n\nWe call this impact."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "In the end, the goal of shipping faster is not to build a huge list of features but to create value for customers and the business.\n\nWe call this impact.\n\nThe highest-performing organizations aim for productive teams that are customer-focused.\n\nTeams that use good DevOps practices, infrastructure, and automation.\n\nTeams that ship in small increments, learn from their users, and take that feedback back into the product.\n\nAs software companies grow, maximizing value becomes a cross-team effort.\n\nIt becomes necessary to align teams across the organization around strategic goals and to help them balance the investment between new features, improving features, increasing productivity, and simply keeping the lights on.\n\nSwarmia helps teams consistently ship high-quality code and features while aligning on priorities with the rest of the engineering organization."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Swarmia helps teams consistently ship high-quality code and features while aligning on priorities with the rest of the engineering organization.\n\nExample: Balancing investment between maintainability and building new stuff\n\nEven teams with experienced engineers have big differences in how much they emphasize improving the maintainability of the product vs. building new stuff for customers.\n\nThis is even more true at the company level, where customer support, sales, marketing, and other functions have different extremely pressing needs for engineering and product.\n\nIn many cases, shipping value 2-3x faster is about making sure you don\u2019t waste time on unnecessary work.\n\nTo prevent individual engineers, managers, or stakeholders from dominating the prioritization, you have to be deliberate about allocating your work.\n\nSwarmia\u2019s investment distribution allows you to do just that.\n\nThe investment distribution above has been configured to use the categories recommended by Dropbox\u2019s VP of Engineering."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Swarmia\u2019s investment distribution allows you to do just that.\n\nThe investment distribution above has been configured to use the categories recommended by Dropbox\u2019s VP of Engineering.\n\nWe can see how much reactive work goes into \u201ckeeping the lights on.\u201d We can also see how much effort goes to \u201cbuilding new stuff,\u201d \u201cimproving existing stuff,\u201d and \u201cincreasing productivity.\u201d\n\nIf \u201ckeeping the lights on\u201d starts to grow too much, teams can prioritize projects that decrease it.\n\nAllocating around 20% of the remaining time for \u201cincreasing productivity\u201d and an additional 20% to \u201cimproving existing stuff\u201d allows engineers to continually improve quality and tackle technical debt.\n\nThe limited allocation helps the team to focus on the most impactful technical improvements.\n\nContinually improving things allows your teams to continually ship value and not paint themselves into a corner with technical debt."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Continually improving things allows your teams to continually ship value and not paint themselves into a corner with technical debt.\n\nExample: Visualizing cross-team dependencies and unblocking critical work\n\nOne of the worst-case scenarios for an engineering team is to end up in a situation where they suddenly need to drop the majority of feature work for a long period of time.\n\nThis can be caused by some pressing technical problems that require some kind of a migration or a dead-end brought on by the unexpected ballooning of a crucial project due to risks or unknowns.\n\nThese kinds of situations are bad enough for the team itself, but often cross-team efforts will suffer the most.\n\nInnocent-looking \u201cpatchy\u201d tasks can immensely slow down cross-team work.\n\nLet\u2019s imagine three teams: the Core team and two feature teams, A and B.\n\nBoth feature teams are building their own new feature that requires 10 days of work from the Core team."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Let\u2019s imagine three teams: the Core team and two feature teams, A and B.\n\nBoth feature teams are building their own new feature that requires 10 days of work from the Core team.\n\nOnly after the Core team has finished their contributions, the feature teams can start their own task that requires an additional 10 days of work.\n\nIdeally, all of the work could be completed in four weeks without any waiting time:\n\nNow, let\u2019s say, the Core team has to spend 40% of their time on fixing bugs and other tasks required for \u201ckeeping the lights on.\u201d As a result, the other teams have to wait for an added 12 working days to complete their work.\n\nNot too bad yet.\n\nBut what happens if the Core team has allocated most of their engineers on some major migration and only a single engineer can work on the 10-day tasks and works on each task every other day?\n\nSuddenly, the added wait time grows to 44 working days (~3.5x)\n\nThis may seem like a lot, but in reality, things often get even messier."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Suddenly, the added wait time grows to 44 working days (~3.5x)\n\nThis may seem like a lot, but in reality, things often get even messier.\n\nCross-team interactions can be challenging and yet, they have a huge potential for shipping value faster.\n\nIn this case, even a simple thing, like a work-in-progress limit in Swarmia, could have saved one of the teams 15 working days of waiting time.\n\nAs a result, they would have shipped the feature to their users almost 2x faster (26 vs. 41 working days).\n\nSumming it all up\n\nMany software teams and organizations can achieve 2-3x speed increases on each of these three levels: shipping code, shipping improvements, and shipping value.\n\nTogether, these changes compound and allow the organization to address the critical needs of their customers 10x faster than the competition.\n\nAccelerating engineering performance requires a solid understanding of what makes engineering teams productive and tools to support continuous improvement."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Accelerating engineering performance requires a solid understanding of what makes engineering teams productive and tools to support continuous improvement.\n\nWith Swarmia, all engineering organizations get the insights and tools they need to drive small changes that have a big impact over time.\n\nReady to start shipping 10x faster?\n\nIf you\u2019re interested in shipping code, improvements, and/or customer value faster, you can see Swarmia in action by watching our 3-minute product overview.\n\nNo email required.\n\nWatch now\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/ship-software-10x-faster/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nJun 9, 2022DORA change failure rate \u2013 what, why, and howRead now \u2192\n\nOct 12, 2021A complete guide to code reviewsRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nWhy investors should care about product development performance\n\nEero Kettunen, Customer Success Manager \u00b7 \n\nMar 16, 2022\n\nWhen you\u2019re considering investing in an early stage software startup, it\u2019s difficult to predict its future performance \u2014 especially if the market is already full of more established competitors.\n\nHowever, one leading indicator of success is product development performance.\n\nThat\u2019s why in this article, we\u2019ll explain why and how investors should use software development metrics as part of their technical due diligence."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "That\u2019s why in this article, we\u2019ll explain why and how investors should use software development metrics as part of their technical due diligence.\n\nSoftware development performance is a leading indicator of business performance\n\nIn 2015, the Sales Engagement Platform (SEP) market was dominated by well-funded companies like Xant, ClearSlide, and Yesware.\n\nMeanwhile, a startup called Outreach was only just getting off the ground.\n\nFast-forward to 2022, and Outreach has raised $200 million at a $4.4 billion valuation \u2014 and is seemingly the furthest ahead in the market.\n\nThis development would\u2019ve been difficult to predict back in 2015.\n\nWhile there are certainly many reasons for the success of Outreach, I would argue that their ability to ship products and features faster and more reliably than their competitors has played a large part.\n\nArguably, the earlier stage a company is, the more value investors will place on the founding team and their perceived ability to execute."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "Arguably, the earlier stage a company is, the more value investors will place on the founding team and their perceived ability to execute.\n\nIn later stages, investment decisions are typically better informed as more quantitative data on past and projected outcomes like financial performance becomes available.\n\nBefore lagging indicators like revenue growth and profitability can be evaluated, investors can absorb signals from leading indicators.\n\nOne such group of metrics is product development performance, which can be used as a signal of the team\u2019s ability to execute.\n\nThis, of course, doesn\u2019t mean that you should overlook outcomes.\n\nBut instead, when there aren't many outcomes to analyze, you should look at the indicators that positively affect those outcomes.\n\nFor example, if an established competitor is shipping new features faster than the challenger, it\u2019s unlikely that the smaller company will ever catch up."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "For example, if an established competitor is shipping new features faster than the challenger, it\u2019s unlikely that the smaller company will ever catch up.\n\nHowever, if the established competitor is enjoying some level of commercial success regardless of their poor engineering performance, they\u2019ll likely start losing market share to faster-moving competitors.\n\nThis link between software development performance and business performance is well documented in a recent study by McKinsey.\n\nWrapping your head around software development productivity metrics\n\nWhile technical due diligence is a large part of most investment evaluation processes, it rarely includes assessing product development performance, i.e.\n\nhow fast and reliably the team is able to deliver new features.\n\nThis is not all that surprising, since the research and best practices on how to measure software development productivity has only just started emerging.\n\nHistorically, measuring engineering productivity has been a difficult subject."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "Historically, measuring engineering productivity has been a difficult subject.\n\nThe first attempts included harmful practices like measuring lines of code and stack-ranking developers based on vanity metrics.\n\nAs you can imagine, these practices caused more harm than good and drove many engineering leaders, managers, and teams to give up on productivity measurement entirely.\n\nHowever, ever since the DevOps Research Association (DORA) published their first annual State of DevOps report in 2014, the industry has started regaining its faith in measuring engineering productivity.\n\nIn fact, many startup CTOs and VPs of Engineering are currently looking into tracking the four DORA metrics to help them gain visibility into how their engineering organization is faring against industry benchmarks.\n\nAnd when the 2018 book Accelerate came out from the same authors, it finally proved that there is a strong correlation between four software delivery metrics and strong business performance."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "And when the 2018 book Accelerate came out from the same authors, it finally proved that there is a strong correlation between four software delivery metrics and strong business performance.\n\nThese metrics have become known as the DORA metrics, and they include change lead time (or cycle time for issues), deployment frequency, change failure rate, and mean time to recovery.\n\nNicole Forsgren, one of the authors of Accelerate, has recently published a whitepaper that introduces an even more holistic approach to measuring engineering productivity, the SPACE framework.\n\nThe new framework suggests measuring engineering productivity across five dimensions:\n\nSatisfaction and well-being\n\nPerformance\n\nActivity\n\nCommunication and collaboration\n\nEfficiency and flow\n\nFor the first time, this framework incorporates psychological and social aspects of engineering productivity, such as developer satisfaction, well-being, communication, and collaboration."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "If you\u2019re interested in learning more about the topic, read this extensive guide about measuring software development productivity, followed by this practical article on getting started with the SPACE framework.\n\nHow to assess engineering productivity \u2014 and invest in software companies with higher confidence\n\nWith more evidence supporting the fact that software excellence fuels business performance and more research behind the metrics that matter, now is a great time to start evaluating software development productivity as part of technical due diligence.\n\nThis way, you\u2019ll be able to increase your confidence in a startup\u2019s ability to execute and avoid passing up on the opportunity to invest in the next Outreach.\n\nHere\u2019s our recommendation on how to assess software development performance as part of technical due diligence:\n\n1.\n\nEvaluate the engineering leadership\u2019s approach to measuring software development performance\n\nAs clich\u00e9d as it may sound, it\u2019s hard to improve what you don\u2019t measure."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "Evaluate the engineering leadership\u2019s approach to measuring software development performance\n\nAs clich\u00e9d as it may sound, it\u2019s hard to improve what you don\u2019t measure.\n\nConversely, all metrics \u2014 even the wrong ones \u2014 drive behavior.\n\nThat\u2019s why it\u2019s important to first understand whether the engineering leadership is already measuring software development performance in some way.\n\nAnd if they are, what metrics they\u2019re tracking.\n\nIf, for example, the engineering leadership is using development activity metrics like lines of code to stack-rank their engineers, it would be good to understand what they\u2019re thinking they\u2019ll achieve with such metrics.\n\nIf, instead, they\u2019re interested in using engineering metrics to improve deployment frequency, code quality, and/or developer well-being, it\u2019s an indication that they\u2019re at least attempting to build a healthy engineering culture.\n\n2."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "2.\n\nFind out how the company is doing in terms of the four DORA metrics\n\nEven if the company you\u2019re evaluating isn\u2019t yet measuring research-backed engineering metrics, you can ask them to rate themselves on the four DORA metrics.\n\nIn SPACE framework\u2019s terms, the four DORA metrics give you an idea of the engineering organization's \u201cperformance\u201d, \u201cactivity\u201d, and \u201cefficiency and flow\u201d.\n\nThe DORA research group has published industry reference values, which help companies benchmark against high performers.\n\nElite teams get code from commit to production in hours, deploy multiple times a day, restore services in a matter of hours, and have a change failure rate of 0-15%.\n\nIf the four DORA metrics indicate low or medium performance, it\u2019s a sign of possible issues in the future.\n\nKnowing where the company stands on these metrics gives you a good baseline on how productive the engineering organization is.\n\n3."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "Knowing where the company stands on these metrics gives you a good baseline on how productive the engineering organization is.\n\n3.\n\nInclude a qualitative assessment of team health\n\nGoing beyond the four DORA metrics, you might also want to assess the team\u2019s \u201csatisfaction and well-being\u201d and \u201ccommunication and collaboration\u201d, which are the remaining two dimensions of the SPACE framework.\n\nAccording to the authors of Accelerate, a good way to measure these two dimensions is to survey the company on how they rank on the Westrum organizational culture.\n\nBy asking questions like the ones below, you\u2019ll get a pretty good idea of where the organization stands in terms of psychological safety, employee well-being, and collaboration:\n\nOn my team, information is actively sought.\n\nMessengers are not punished when they deliver news of failures or other bad news.\n\nOn my team, responsibilities are shared.\n\nOn my team, cross-functional collaboration is encouraged and rewarded.\n\nOn my team, failure causes inquiry."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "On my team, responsibilities are shared.\n\nOn my team, cross-functional collaboration is encouraged and rewarded.\n\nOn my team, failure causes inquiry.\n\nOn my team, new ideas are welcomed.\n\nBy combining the four DORA metrics with the Westrum organizational culture survey, you\u2019ll be able to not only reliably assess the current performance of the engineering organization but also predict its future success.\n\nScoring high on all the five dimensions of the SPACE framework is a signal of strong engineering performance.\n\nThe scores will also allow you to identify any potential gaps the organization may want to bridge going forward.\n\nConclusion\n\nThanks to recent research, we can assert with high confidence that teams that do well in terms of DORA metrics and Westrum culture have a greater probability of successfully scaling their operations and attracting talent."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "That\u2019s why we would strongly recommend that early stage investors also include product development metrics in their technical due diligence processes.\n\nNeed a quick way to assess product development metrics?\n\nIf you're looking for a tool to help your (prospective) portfolio companies measure software development productivity, watch our 3-minute product tour to get started.\n\nWatch now\n\nEero Kettunen is a Customer Success Manager at Swarmia.\n\nIn the past, he worked as a Consultant at BCG.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/product-development-performance-for-investors/", "content": "In the past, he worked as a Consultant at BCG.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nFeb 28, 2023The ultimate guide to developer experienceRead now \u2192\n\nJul 14, 2022Creating the best GitHub experience on SlackRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nPractical guide to DORA metrics\n\nOtto Hilska, Founder & CEO \u00b7 \n\nMar 9, 2022\n\nEver since the book Accelerate was published in 2018, it\u2019s been borderline impossible to have a conversation about measuring software development performance without any reference to the four DORA metrics that were popularized by the book.\n\nAnd while DORA metrics are a useful tool for understanding your software delivery performance, there are a number of things you should consider before you jump head-first into measuring them."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "And while DORA metrics are a useful tool for understanding your software delivery performance, there are a number of things you should consider before you jump head-first into measuring them.\n\nIn this post, we discuss how the four DORA metrics came to be, what they are, how to get started with measuring them, and how to avoid some of the typical mistakes software teams make when they\u2019re first starting out with DORA metrics.\n\nWhat is DORA?\n\nThe DevOps Research and Assessment (DORA) team was founded in 2014 as an independent research group focused on investigating the practices and capabilities that drive high performance in software delivery and financial results.\n\nThe DORA team is known for the annual State of DevOps report that has been published for seven consecutive years, from 2014 to 2021.\n\nIn 2019, DORA was acquired by Google."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "The DORA team is known for the annual State of DevOps report that has been published for seven consecutive years, from 2014 to 2021.\n\nIn 2019, DORA was acquired by Google.\n\nIn 2018, three members of the DORA team, Nicole Forsgren, Jez Humble, and Gene Kim, published a book called Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organizations, which goes into more detail about the group\u2019s research methodology and findings.\n\nIn short, the book uncovers a complex relationship between organizational culture, operational performance, and organizational performance.\n\nAccelerate is a must-read for anyone interested in building a high-performing software organization \u2014 as well as anyone planning to implement DORA metrics.\n\nWhat are the four DORA engineering metrics?"}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "Accelerate is a must-read for anyone interested in building a high-performing software organization \u2014 as well as anyone planning to implement DORA metrics.\n\nWhat are the four DORA engineering metrics?\n\nEven though the State of DevOps reports and Accelerate uncover complex relationships between culture, software delivery, and organizational performance, the most famous part of the group\u2019s research are the four software delivery performance metrics that have come to be known as DORA metrics."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "The four DORA metrics are:\n\nDeployment frequency: How often a software team pushes changes to production\n\nChange lead time: The time it takes to get committed code to run in production\n\nChange failure rate: The share of incidents, rollbacks, and failures out of all deployments\n\nTime to restore service: The time it takes to restore service in production after an incident\n\nThe unique aspect of the research is that these metrics were shown to predict an organization's ability to deliver good business outcomes.\n\nWhy should I care about DORA metrics?\n\nHistorically, measuring software development productivity was mostly a matter of opinion.\n\nBut since your opinion is as good as mine, any discussion stalled easily and most organizations defaulted to doing nothing.\n\nThe team behind DORA applied scientific rigor to evaluating how some well-known DevOps best practices relate to business outcomes.\n\nThe four metrics represent a simple and relatively harmless way start your journey."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "The four metrics represent a simple and relatively harmless way start your journey.\n\nThe basic logic is: maximize your ability to iterate quickly while making sure that you're not sacrificing quality.\n\nIn this space, being mostly harmless is already an achievement.\n\nThe industry is full of attempts to stack-rank your developers based on the number of commits or provide coaching based on the number of times they edited their own code.\n\nThe four metrics\n\nNext up, let\u2019s look at each of the metrics in turn.\n\nDeployment frequency\n\nDeployment frequency measures how often a team pushes changes to production.\n\nHigh-performing software teams ship often and in small increments.\n\nShipping often and in small batches is beneficial for two reasons.\n\nFirst, it helps software teams create customer value faster.\n\nSecond, it reduces risk by making it easier to identify and fix any possible issues in production.\n\nDeployment frequency is affected by a number of things:\n\nCan we trust our automated tests?"}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "Second, it reduces risk by making it easier to identify and fix any possible issues in production.\n\nDeployment frequency is affected by a number of things:\n\nCan we trust our automated tests?\n\nA passing test suite should indicate that it's safe to deploy to production, and a failing test suite should indicate that we need to fix something.\n\nProblems arise from a lack of automated test coverage and flaky tests.\n\nAre the deployments automated?\n\nInvesting in automated deployments pays itself back very quickly.\n\nIs it possible to ship in small increments?\n\nOptimally, your developers will work in short-lived branches.\n\nFeatures under construction will be hidden from end-users with feature gates.\n\nDo we know how to split work to small increments?\n\nPlanning and splitting the work requires some practice and a good grasp of the codebase.\n\nThe best teams deploy to production after every change, multiple times a day.\n\nIf deploying feels painful or stressful, you need to do it more frequently."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "The best teams deploy to production after every change, multiple times a day.\n\nIf deploying feels painful or stressful, you need to do it more frequently.\n\nChange lead time\n\nChange lead time (also known as lead time for change or cycle time) captures the time it takes to get committed code to run in production.\n\nThe purpose of the metric is to highlight the waiting time in your development process.\n\nYour code needs to wait for someone to review it and it needs to get deployed.\n\nSometimes it's delayed further by a manual quality assurance process or an unreliable CI/CD pipeline.\n\nThese extra steps in your development process exist for a reason, but the ability to iterate quickly makes everything else run more smoothly.\n\nIt might be worth taking some extra risk for the added agility, and in many cases, smaller batch size actually reduces risk.\n\nThe State of DevOps report suggests that on average, elite teams get changes to production in under a few hours."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "The State of DevOps report suggests that on average, elite teams get changes to production in under a few hours.\n\nHowever, because the report is based on a survey, we're confident the reference value is more indicative of a happy path than an average.\n\nAnything in the ballpark of 24 hours is a great result.\n\nFor a team that's interested in improving their lead time for change, these are some common discussion topics:\n\nIs something in our process inherently slowing you down?\n\nIf you're manually testing every change, requesting it from an external QA team is going to be slow.\n\nCan we embed testers into the team?\n\nCan we use feature flags to hide features while they're being worked on, so that most features can be tested as a whole?\n\nHow quick are our code reviews?\n\nPull request reviews don't have to be slow.\n\nAre you working on too many things at once?"}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "How quick are our code reviews?\n\nPull request reviews don't have to be slow.\n\nAre you working on too many things at once?\n\nMulti-tasking might feel efficient when you're able to move from a blocked task to something else, but it also means that you're less likely to address those blockages.\n\nChange failure rate\n\nThe first two metrics are mostly about your ability to iterate quickly.\n\nThey're balanced by the next two metrics that ensure you're still running a healthy operation.\n\nThe SPACE framework follows this same pattern of choosing metrics from different groups to balance each other.\n\nWhen you're choosing metrics that measure speed, also pick metrics to alert you when you're going too fast.\n\nChange failure rate focuses on incidents caused by the changes that you've made yourself \u2013 as opposed to external factors, such as cloud provider downtime.\n\nThis makes a great control variable for the first two metrics.\n\nThe definition of an incident or failure is up to you."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "This makes a great control variable for the first two metrics.\n\nThe definition of an incident or failure is up to you.\n\nProduction downtime caused by a change is pretty clearly a failure.\n\nHaving to roll back a change is likely a good indication too.\n\nStill, bugs are a normal byproduct of newly built software and you don't necessarily need to count every regression.\n\nGood infrastructure will help you limit the blast radius of these issues.\n\nFor example, our Kubernetes cluster only sends traffic to instances if they respond to readiness and liveness checks, blocking deployments that would otherwise take the whole app down.\n\nTime to restore service\n\nMean Time To Restore (MTTR) captures the time it takes to restore service in production after an incident.\n\nWhile the trends are useful to understand, the most important thing is that your organization has a solid process for incident response and allows the engineering teams to invest time in resolving the root causes of these incidents."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "In a more complex microservices environment, you might also consider promoting Service Level Objectives instead of MTTR.\n\nCommon pitfalls with DORA metrics\n\nThe beauty of the four DORA metrics is that they offer a simple framework for measuring and benchmarking engineering performance across two variables: speed (deployment frequency and change lead time) and stability (change failure rate and time to restore service).\n\nHowever, as anyone who\u2019s ever worked in software engineering would attest: numbers \u2014 and especially aggregate ones \u2014 don\u2019t always tell the whole truth.\n\nHere are some of the key issues we\u2019ve seen with software organizations that are getting started with DORA metrics:\n\n1.\n\nTaking them too literally\n\nCargo cults were common in early agile adoption.\n\nPeople would read a book about Scrum and argue about \"the right way\" to do things without understanding the underlying principles.\n\nSpeaking of books, Accelerate is a great one."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "People would read a book about Scrum and argue about \"the right way\" to do things without understanding the underlying principles.\n\nSpeaking of books, Accelerate is a great one.\n\nAnd it actually does address the various factors that influence engineering performance, including organizational culture and developer well-being.\n\nHowever, when the whole book is reduced to the four DORA metrics, a bunch of this context is lost.\n\nDevOps practices are not the only thing you need to care about.\n\nGreat product management and product design practices still matter.\n\nPsychological safety still matters.\n\nRunning a great product development organization takes more than just the four metrics.\n\n2.\n\nHiding behind aggregate metrics\n\nAggregate values of DORA metrics are useful for two main reasons: following the long-term trends and getting the initial benchmark for your organization.\n\nHowever, your team needs more than the aggregate number to start driving improvement.\n\nWhat are the individual data points?"}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "However, your team needs more than the aggregate number to start driving improvement.\n\nWhat are the individual data points?\n\nWhat are the contributing factors for these numbers?\n\nHow should they be integrated to your existing daily and weekly workflows?\n\n3.\n\nLack of organizational buy-in\n\nMeasuring software development productivity is a delicate topic, and as such, top-down decisions can easily cause some controversy.\n\nOn the other hand, without direction from the engineering leadership, it's too easy to just give up.\n\nThe role of the leadership is to build an environment where teams and individuals can be successful.\n\nEnsuring that some feedback loops are in place is a perfect example of this.\n\nThus, it makes sense to be proactive in this discussion.\n\nDevelopers often have concerns about tracking harmful metrics and individual performance.\n\nI suggest proactively bringing it up and explaining how DORA metrics are philosophically aligned with how most developers think.\n\n4."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "I suggest proactively bringing it up and explaining how DORA metrics are philosophically aligned with how most developers think.\n\n4.\n\nObsessing over something that's good enough\n\nIf you're consistently getting code to production in 24 hours and you're deploying every change without major issues, you don't necessarily have to worry about DORA metrics too much.\n\nIt's still good to keep these numbers around to make sure that you're not getting worse as complexity grows, but they don't need to be top of mind all the time.\n\nThe good news is that your continuous improvement journey doesn't need to stop there.\n\nMoving beyond DORA metrics\n\nThe authors behind Accelerate have recently expanded their thinking on the topic of development productivity with the SPACE framework.\n\nIt's a natural next step and if you haven't yet looked into it, now is a good time.\n\nHow to get started with measuring DORA metrics?"}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "It's a natural next step and if you haven't yet looked into it, now is a good time.\n\nHow to get started with measuring DORA metrics?\n\nIf you\u2019re eager to start measuring the four DORA metrics, you can either spend some time on setting up a DIY solution or hit the ground running with a tool like Swarmia.\n\nHere\u2019s a quick look at each of those approaches.\n\nSetting up a DIY solution\n\nThe Four Keys is an open-source project that helps you automatically set up a data ingestion pipeline from your GitHub or Gitlab repositories to Google Data Studio through Google Cloud Services.\n\nIt aggregates your data into a dashboard that tracks the four DORA metrics.\n\nHere\u2019s how to get started with the Four Keys.\n\nUsing an engineering productivity platform like Swarmia\n\nFor engineering leaders who are looking to not only measure the four DORA metrics but also improve across all areas of engineering productivity (including business impact and team health), a tool like Swarmia might be a better fit."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "Start tracking DORA metrics with Swarmia\n\nSwarmia allows you to not only measure but also improve across the four DORA metrics.\n\nTry Swarmia with a free 14-day trial.\n\nStart trial\n\nOtto Hilska is the founder & CEO at Swarmia.\n\nIn the past, he scaled the product development team to 100+ people as the Chief Product Officer at Smartly.io, and founded Flowdock.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/dora-metrics/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nSep 15, 2022Are daily stand-ups a waste of time?Read now \u2192\n\nJul 28, 2022Your organization\u2019s guide to the SPACE frameworkRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nHow software engineers can learn at work\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nJan 5, 2022\n\nWe know from multiple studies (e.g., 1, 2, 3) that learning at work improves both job satisfaction and organizational commitment.\n\nBoth of these contribute to higher productivity and lower turnover.\n\nMany companies use personal learning budgets and some type of \"5%/10%/20% time\" policy to encourage learning.\n\nThese are useful but highly dependent on personal motivation and learning habits.\n\nIt\u2019s often hard for software engineers to prioritize learning over their busy day-to-day work.\n\nFor example, only around 10% of Googlers are using their famous \"20% time\" policy."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "It\u2019s often hard for software engineers to prioritize learning over their busy day-to-day work.\n\nFor example, only around 10% of Googlers are using their famous \"20% time\" policy.\n\nThe best way for a software engineer to learn is by having a role and a project where they can learn through their day-to-day tasks.\n\nThat\u2019s why companies should build a culture where learning is part of the engineers\u2019 job instead of an \"add-on.\"\n\nThis helps with motivation and allows people with little free time \u2014 like the parents of small children \u2014 to continue learning.\n\nHere are six proven ways to do that.\n\n1.\n\n(Good) code reviews\n\nCode reviews offer a great opportunity to learn because the feedback you get in a code review is highly contextual and often very specific.\n\nWhen you discuss why one solution is better than another, you can develop your professional intuition in a way that\u2019s very hard to achieve otherwise.\n\nLearning happens in code reviews only if they\u2019re done well."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "Learning happens in code reviews only if they\u2019re done well.\n\nIf your team suffers from rubber-stamping \"LGTM\" code reviews and you want to improve them, you can check this complete guide to code reviews from my colleague Kimmo Brundfeldt.\n\n2.\n\nPair programming\n\nDuring pair programming, you watch another person write code or hear them discuss a solution.\n\nThis allows you to pick up practical tips on improving your work (e.g., how to use your editor).\n\nYou also learn new ways of thinking and solving problems.\n\nPair programming costs less than most people think.\n\nIn addition to improving technical skills, it also improves design quality, reduces defects, reduces staffing risk, improves team communication, and is often considered more enjoyable than working alone.\n\nTuple\u2019s excellent Pair Programming Guide covers everything from getting started with pair programming to scientific research on the subject.\n\n3."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "Tuple\u2019s excellent Pair Programming Guide covers everything from getting started with pair programming to scientific research on the subject.\n\n3.\n\nWIP limits\n\nDevelopers often prefer to work alone on tasks and issues, even when the work could be split into smaller tasks and worked on side-by-side.\n\nEngineers feel more productive when they don\u2019t have to deal with the \"overhead\" of coordinating with others.\n\nHowever, this often leads to more siloing of knowledge and less knowledge sharing within the team.\n\nMany people know work-in-progress (WIP) limits only as a Lean/Kanban to improve the flow of work.\n\nBut having a sensible WIP limit improves learning through collaboration.\n\nAs an added bonus, it also leads to much better code reviews.\n\nYou can read our blog post on decreasing issue cycle time to figure out if you\u2019re working on too many things simultaneously and would benefit from WIP limits.\n\n4."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "You can read our blog post on decreasing issue cycle time to figure out if you\u2019re working on too many things simultaneously and would benefit from WIP limits.\n\n4.\n\nDesign documents\n\nDesign documents, RFCs, or just \"documented plans\" are a great way to enable learning on the job.\n\nWhen done well, the document explains why the chosen solution is the best from both product and technical perspectives.\n\nIt considers the tradeoffs of different approaches and highlights the most important non-functional requirements that contribute to the solution, like accessibility, performance, and user experience.\n\nReading a highly contextual document like this allows developers to learn how other \u2014 often more experienced \u2014 people think about technical decisions.\n\nThe developers writing the design documents also learn valuable skills: system design, communicating technical decisions, and how to motivate and inspire peers to adopt a solution."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "The developers writing the design documents also learn valuable skills: system design, communicating technical decisions, and how to motivate and inspire peers to adopt a solution.\n\nTo get started, you can check out our blog post on how to plan together as a team and Gergely Orosz\u2019s article on design documents.\n\n5.\n\nStudy groups\n\nOrganizing study groups within your engineering organization is a great tool for peer-to-peer learning.\n\nThis is especially true when you have more than a handful of engineers spread across multiple teams.\n\nTrying to apply books or courses to day-to-day work is not always easy \u2014 and may lead to people \"trying out stuff\" on your codebase just to learn.\n\nWhen people who work in the same context discuss the material, it\u2019s easier to identify valuable learnings.\n\nOften, the best part of study group meetings is going beyond the material by having people share their own experiences and different angles on the subject."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "Often, the best part of study group meetings is going beyond the material by having people share their own experiences and different angles on the subject.\n\nThis is especially true for books/materials that cover high-level principles (e.g., books like \"Domain-Driven Design\" and \"Working with Legacy Code.\")\n\nI\u2019m planning on writing a full guide on running great peer study groups (let me know if you\u2019re interested in reading it.)\n\nFor now, these are the steps we used at Vincit to run study groups at scale:\n\nFind a topic, a book, or a course that 4-10 engineers in your organization are interested in.\n\nOptionally, find 1-2 \"expert members\" from your company who can participate.\n\nChoose a person responsible for organizing the study group meetings.\n\nSet up a 30-60 minute meeting with a weekly recurring calendar invite for the study group.\n\nThe larger the group, the more time you need.\n\nThe meeting can be an extended company-paid lunch."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "Set up a 30-60 minute meeting with a weekly recurring calendar invite for the study group.\n\nThe larger the group, the more time you need.\n\nThe meeting can be an extended company-paid lunch.\n\nFor every meeting, choose a section of the material that everyone can go through beforehand.\n\nE.g., for books, we used less than 50 pages.\n\nParticipants are expected to go through this material at their own pace in between meetings.\n\nStart the meetings by having everyone go through their notes or thoughts on the material.\n\nDiscuss.\n\nWhen the material for the study group is highly related to the participants\u2019 current project, they can apply the learnings almost immediately.\n\nOther materials will usually pay dividends in the long run.\n\n6.\n\nPeer-to-peer sharing\n\nOne of the best ways to get excited about learning is through the people around you.\n\nThis is why building a culture of sharing learnings with peers is so important."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "6.\n\nPeer-to-peer sharing\n\nOne of the best ways to get excited about learning is through the people around you.\n\nThis is why building a culture of sharing learnings with peers is so important.\n\nFor example, you can watch engineering talks together, share links to interesting content on company Slack, or have sessions where team members share their knowledge on some topic.\n\nNot everyone will read every excellent blog post on Slack or attend every session, but whenever they do, they\u2019re likely to learn something useful.\n\nPositive learning experiences create a virtuous cycle and motivate people to learn more.\n\nShare your own experiences\n\nHave you tried out any of these practices?\n\nWhat has worked?\n\nDiscuss your experiences and share your tips with us on Twitter:\n\nYou seem to have Twitter embeds blocked.\n\nYou can reply to this Tweet.\u2014 Swarmia (\n\n@SwarmiaHQ)\n\nAri-Pekka Koponen is the Head of Platform at Swarmia."}, {"source": "https://www.swarmia.com/blog/software-engineers-learn-on-company-time/", "content": "You can reply to this Tweet.\u2014 Swarmia (\n\n@SwarmiaHQ)\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nDec 28, 20225x the customers and 38 new features \u2014 our year in reviewRead now \u2192\n\nJun 9, 2022DORA change failure rate \u2013 what, why, and howRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nTackling typical problems with issue cycle time\n\nEero Kettunen, Customer Success Manager \u00b7 \n\nDec 21, 2021\n\nThe unfortunate reality about software development is that if you keep doing what you\u2019ve been doing, you\u2019ll start slowing down.\n\nWhen you first start building a product with a small team, things move fast because everyone knows the codebase, and the team hasn\u2019t accumulated any technical debt yet.\n\nThis is true even if you don\u2019t pay any attention to processes and structures just yet.\n\nAs the team and codebase grow, your existing work incements (for example, epics, stories, and tasks) end up taking much longer than they used to."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "As the team and codebase grow, your existing work incements (for example, epics, stories, and tasks) end up taking much longer than they used to.\n\nAs a result, it becomes slower to deliver software to the end users and to react to new knowledge or customer feedback.\n\nTo reverse this trend, you\u2019ll need to start measuring cycle time with the aim to decrease it.\n\nTo maintain a swift pace of delivery, your team should pay attention to every level of the flow of work from the bottom up: from commits and pull requests all the way up to your biggest projects and initiatives.\n\nIf it looks like pull requests are taking too long to get through, you\u2019ll want to start by fixing that bottleneck before you move up the hierarchy.\n\nIf, on the other hand, your pull requests are already moving fast, you might want to start optimizing issue cycle time, meaning your tasks, stories, and epics.\n\nAs you move up the hierarchy and start to optimize for bigger chunks of work, complexity increases."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "As you move up the hierarchy and start to optimize for bigger chunks of work, complexity increases.\n\nThis is because completing a larger entity of work requires more collaboration and planning.\n\nUltimately, optimizing issue cycle time will help your team constantly deliver valuable features to your customers.\n\nWhat is issue cycle time?\n\nIssue cycle time captures how long your epics, stories, and tasks (or any other increments in which you plan your work) are in progress.\n\nEach team splits their work differently, so it\u2019s good to note that issue cycle times are never directly comparable.\n\nFor instance, if two teams are building the same product, it doesn't really matter whether that happens in two tasks taking ten hours each or five tasks taking four hours each.\n\nThe best way to measure cycle time for an issue is to look at the time it stayed \u201cin progress\u201d according to your issue tracker."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "The best way to measure cycle time for an issue is to look at the time it stayed \u201cin progress\u201d according to your issue tracker.\n\nSince the progression of an issue isn\u2019t always linear, it\u2019s important to differentiate between the time the issue has been actively worked on and the time between the first and last activity on the issue.\n\nHow to identify and fix 3 of the most typical problems software teams face with issue cycle time\n\nIf your issues are often delayed and it\u2019s hard to estimate when they\u2019ll be ready, it\u2019s fair to assume that things could be better.\n\nIt\u2019s often better to start optimizing from the smaller increments of work to make sure you have the necessary pieces in place to optimize larger chunks.\n\nAs a rule of thumb, if you\u2019re happy with your average pull request cycle time and throughput, you\u2019re ready to start optimizing issue cycle time."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "As a rule of thumb, if you\u2019re happy with your average pull request cycle time and throughput, you\u2019re ready to start optimizing issue cycle time.\n\nAfter working with dozens of software organizations that have struggled with making progress with and completing their issues, we\u2019ve noticed some common patterns.\n\nIn our experience, three of the most common problems with issue cycle time are:\n\nLimited collaboration\n\nMultitasking\n\nTrying to solve problems that are too large\n\nWhen you\u2019re trying to optimize your issue cycle time, we recommend that you look into these three areas first to try to identify antipatterns you can start solving.\n\n1.\n\nNot working as a team\n\nCollaboration is a good place to start when you\u2019re trying to identify antipatterns related to issue cycle time.\n\nWorking together helps teams prioritize, reduce multitasking, and enforce better planning.\n\nHaving every team member work on their own projects might feel efficient because it means they don\u2019t have to coordinate with others."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "Having every team member work on their own projects might feel efficient because it means they don\u2019t have to coordinate with others.\n\nHowever, building a great product and team is a long-term effort, and the benefits of collaboration far outweigh the costs.\n\nWhy should your team work together?\n\nStructuring your work with developer collaboration in mind forces you to be more thorough in the planning phase.\n\nThis can help clarify the context for the team and reduce unknowns before the implementation.\n\nTough problems become easier when you don't have to work on them alone.\n\nYou're going to have an easier time sparring, rubber ducking, and getting your code reviewed faster, all of which will likely make your work flow better and reduce frustration.\n\nToo many competing priorities can lead developers and teams to work on simple, reactive tasks.\n\nReactive tasks are easier to complete, but they\u2019re not always the best use of your team\u2019s time."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "Too many competing priorities can lead developers and teams to work on simple, reactive tasks.\n\nReactive tasks are easier to complete, but they\u2019re not always the best use of your team\u2019s time.\n\nIt's often better to focus attention on properly solving a few problems that really matter, rather than struggling to solve too many problems at once.\n\nHow to identify siloing?\n\nTo identify problems in collaboration, you need to answer questions like, \u201cHow many people worked on a story?\u201d and \u201cAre we good at sharing work?\u201d You\u2019ll want to find out if there are enough contributors working together on issues.\n\nDigging through your issue tracker, you might be able to tell whenever only a single contributor is assigned tasks on a story.\n\nSwarmia\u2019s Work Log makes it easy to identify issues with a single contributor.\n\nThis view shows the contributions made to any issue over time and helps you discover siloing quickly."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "Swarmia\u2019s Work Log makes it easy to identify issues with a single contributor.\n\nThis view shows the contributions made to any issue over time and helps you discover siloing quickly.\n\nIf you repeatedly see only a single person working on larger issues, it\u2019s a sign of lack of collaboration and sharing knowledge.\n\nHow to stop and prevent siloing?\n\nThe answer is fairly straightforward: just make sure to have multiple contributors on larger issues.\n\nHowever, getting this done in practice may not be as simple.\n\nThere are many possible reasons for limited collaboration.\n\nAnd when you\u2019re further investigating the issue, you might want to check whether the work is split into smaller chunks (which allows multiple developers to contribute) and whether the team is working on too many things at once.\n\nIdentifying and solving these two challenges are covered below.\n\nIt might also be that people gravitate to working alone to avoid having to work with others."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "Identifying and solving these two challenges are covered below.\n\nIt might also be that people gravitate to working alone to avoid having to work with others.\n\nIn this case, it might make sense to adopt a team-wide working agreement to avoid working alone on issues.\n\nSwarmia allows your team to adopt this working agreement (and many others) and get notified whenever there are exceptions.\n\nThis way, you\u2019ll know when people are working on their own projects and can take action to strengthen collaboration, improve knowledge sharing, and speed up the progress of top priority issues.\n\n2.\n\nWorking on too many things at the same time\n\nThere are typically more than enough features that your engineering teams could build at any given time.\n\nTo make matters worse, there\u2019s probably also pressure from your customers and internal stakeholders to do many of those things at once.\n\nThis might lead to a situation where your team starts new work before they finish what they\u2019ve started earlier."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "This might lead to a situation where your team starts new work before they finish what they\u2019ve started earlier.\n\nSimultaneously working on too many issues will slow everything down and likely result in waste from incomplete work that will never be shipped.\n\nIn addition, the issues that are visible in your project management software almost never tell the full story about what the teams are actually working on.\n\nThere are always other priorities taking time away from completing your planned work.\n\nWhile it's not possible \u2014 or smart \u2014  to eliminate distractions completely, it's important to understand the effect of context switching on the cycle time of your high-priority items.\n\nHow do you know if your teams are working on too many things at once?\n\nTo identify whether you have a problem with multitasking, you need to know all the things your teams are working on at any given time."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "To identify whether you have a problem with multitasking, you need to know all the things your teams are working on at any given time.\n\nYou might want to monitor the number of open epics, stories, and tasks over time and compare that to the number of developers in the team.\n\nTo get a better grasp of what\u2019s going on, you also need to check how much activity there is in the issues in progress.\n\nWhenever there\u2019s too much work in progress, activity in issues starts to get patchy with gaps in pull requests related to the issue.\n\nMost teams don\u2019t have visibility into where their efforts go beyond what\u2019s shown in the issue tracker.\n\nIf this is the case, you can rely on qualitative feedback from the team by asking where they are using their time and how they feel about their current work in progress levels.\n\nUltimately, you want to ensure that multitasking isn\u2019t preventing you from shipping your top priorities.\n\nHow to prevent working on too many issues at the same time?"}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "Ultimately, you want to ensure that multitasking isn\u2019t preventing you from shipping your top priorities.\n\nHow to prevent working on too many issues at the same time?\n\nIntroducing a work in progress limit is one of the most effective ways to ensure that you\u2019re not working on too many things at once.\n\nWhen the team has a work in progress limit, everyone is aligned on finishing some work before starting anything new.\n\nA good rule of thumb for the target number of stories in progress at once is the number of developers divided by two rounded down.\n\nWork in progress limits are easiest to manage when they are tied to real data.\n\nSwarmia allows you to set work in progress limits on multiple levels.\n\nIt automatically notifies you when you\u2019re above your agreed limit.\n\nThis way, you'll stay on top of your work in progress and can act fast if you\u2019re drifting towards working on too many things at once.\n\n3."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "This way, you'll stay on top of your work in progress and can act fast if you\u2019re drifting towards working on too many things at once.\n\n3.\n\nWorking in too big increments\n\nWhen your projects seem to take too long to complete but your work in progress limits are under control, you may need to look elsewhere for solutions.\n\nOne of the most common reasons for this is that you\u2019re trying to solve too large of a problem at once.\n\nThis is why you should critically evaluate the total scope of your issues.\n\nHowever, there\u2019s much more to planning than just the sheer scope of the issue.\n\nAfter all, it\u2019s rare that upfront planning manages to account for all the tasks that end up going into an issue.\n\nThat\u2019s why you\u2019ll also want to understand how the scope of your issues develops over time.\n\nHow to identify whether you\u2019re working on too big of an increment?\n\nTo identify possible shortcomings in planning, you\u2019ll want to take a look at how accurate your plans are and how they develop over time."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "To identify possible shortcomings in planning, you\u2019ll want to take a look at how accurate your plans are and how they develop over time.\n\nYour goal is to ensure that the quality of planning is high.\n\nLooking at how long it takes to complete issues is a good place to start.\n\nIf an issue takes two times more than your average issue to complete, the scope might have simply been too large.\n\nWould it be possible to split that feature into smaller but still functional slices?\n\nLooking beyond the sheer scope of the issue, you should also pay attention to how the scope develops over time and what kind of tasks are added.\n\nHaving some amount of scope creep is totally okay.\n\nAnd to improve your estimates, you should always factor in some scope creep to your plans.\n\nHowever, if you\u2019re often hitting 50%+ of scope creep on issues, there\u2019s probably something in the planning process that could be fixed.\n\nWhat to do if it looks like your projects are too big?"}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "However, if you\u2019re often hitting 50%+ of scope creep on issues, there\u2019s probably something in the planning process that could be fixed.\n\nWhat to do if it looks like your projects are too big?\n\nIf it looks like the team is trying to solve too large of a problem at once, you may want to look into different strategies of splitting stories.\n\nThe power of small stories to deliver more value for customers is well researched, and there are good strategies out there to slice your stories to optimize your issue sizes.\n\nIn contrast, if it looks like scope creep is the real problem, you should try to plan for the added scope.\n\nIf you already know how much extra work you add on average (e.g.\n\n20% more tasks), you can factor that into your plans.\n\nFor example, this might mean three additional tasks and two extra days).\n\nYou can also start paying attention to certain types of tasks that tend to be added to the scope after starting and gradually increase the quality of your planning."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "You can also start paying attention to certain types of tasks that tend to be added to the scope after starting and gradually increase the quality of your planning.\n\nIt\u2019s also common that challenges with scoping extend to the sub-tasks of the issue.\n\nThere are often a couple of outlier tasks that take the longest to complete for some reason.\n\nIdentifying long running tasks and thinking about if they could have been split somehow will also positively contribute to the quality of planning future issues.\n\nSummary\n\nWorking alone on issues, working on too many things at once, and working in too big increments are three common antipatterns that can negatively affect your issue cycle time.\n\nTo maintain your speed of delivery as your software organization grows, these three areas are worth taking a closer look into \u2014 especially as they\u2019re usually connected.\n\nFor instance, having too much work in progress may make it difficult to work together on issues."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "For instance, having too much work in progress may make it difficult to work together on issues.\n\nIf it looks like you\u2019re facing one or more of these antipatterns, these actions can help you overcome them:\n\nIntroduce work in progress limits to minimize context switching and speed up delivery\n\nAgree to always have multiple contributors working on issues to enforce team work\n\nSplit stories to avoid working in increments that are too big\n\nFinally, there\u2019s a lot more to software development productivity than the flow of delivery and optimizing issue cycle time.\n\nTo learn more about the topic, here\u2019s a holistic approach that also covers things like business impact and team health.\n\nIt\u2019s hard to improve what you don\u2019t measure\n\nIf your team is struggling with any of the problems identified above, you might want to start by tracking your issue cycle time.\n\nSwarmia allows you to do that \u2014 and much more.\n\nGet started with a free 14-day trial."}, {"source": "https://www.swarmia.com/blog/issue-cycle-time/", "content": "Swarmia allows you to do that \u2014 and much more.\n\nGet started with a free 14-day trial.\n\nStart trial\n\nEero Kettunen is a Customer Success Manager at Swarmia.\n\nIn the past, he worked as a Consultant at BCG.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nJun 21, 2022You don\u2019t need a Git analytics toolRead now \u2192\n\nJun 9, 2022DORA change failure rate \u2013 what, why, and howRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nThe essential guide to agile team working agreements\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nDec 8, 2021\n\nSoftware development teams use working agreements to align their ways of working and improve collaboration.\n\nIn this guide, we'll cover what working agreements are, why your team should document them, and what the best practices are.\n\nWe\u2019ll also share a few example templates to help you get started with building your team's working agreement.\n\nWhat are working agreements?\n\nWorking agreements describe how a team wants to work together.\n\nIn practice, they are guidelines, rules, or behaviors the team has agreed on."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "What are working agreements?\n\nWorking agreements describe how a team wants to work together.\n\nIn practice, they are guidelines, rules, or behaviors the team has agreed on.\n\nDepending on the context, the term \"working agreement\" can refer to either the entire document (i.e.\n\na list of all the working agreements) or an individual rule or guideline (e.g.\n\n\"Review pull requests in less than 1 day.\")\n\nWorking agreements describe how your team wants to work together.\n\nSometimes the document is referred to as \"team contract\" or \"team agreement\" and the listed working agreements as \"team standards,\" \"rules of engagement,\" \"ground rules,\" \"team norms,\" \"team rules,\" \"team agreements,\" or \"collaboration guidelines.\"\n\nWhy do you need working agreements?\n\nIn a team, the individual members' ways of working and expectations on how other people should behave don\u2019t often match by default."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "Why do you need working agreements?\n\nIn a team, the individual members' ways of working and expectations on how other people should behave don\u2019t often match by default.\n\nFor a team to work effectively and achieve their goal, the team members need to decide on the ways of working and behaviors they want to follow.\n\nWorking agreements help teams develop a shared sense of responsibility, make it easier to identify and discuss both positive and negative behavior, empower the leader to keep the team accountable, and enhance the team\u2019s productivity.\n\nWhat to include in working agreements?\n\nYour list of working agreements should include all the guidelines, rules, or behaviors the team members are expected to follow."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "What to include in working agreements?\n\nYour list of working agreements should include all the guidelines, rules, or behaviors the team members are expected to follow.\n\nWhen you\u2019re creating the list, it\u2019s helpful to start it with: \"as a team, we agree to...\"\n\nExamples of working agreements:\n\nAsk for help when we need it\n\nBe transparent and honest\n\nActively give constructive feedback\n\nJoin meetings on time\n\nCommunicate our schedule and mark absences to the work calendar\n\nOnly work on a maximum of four stories at a time (WIP limit)\n\nLink all pull requests to Jira issues\n\nTo improve readability, you might want to group your working agreements.\n\nFor example, many working agreement documents have a separate section for \"version control rules\" (how to use e.g.\n\nGitHub)."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "For example, many working agreement documents have a separate section for \"version control rules\" (how to use e.g.\n\nGitHub).\n\nA section on version control rules could include the following agreements:\n\nNever commit directly to the main branch\n\nReview all pull requests (at least 1 approval)\n\nReview pull requests in less than 1 day\n\nOnly merge when all continuous integration (CI) checks pass\n\nSometimes a single working agreement can consist of multiple parts.\n\nFor example, a team's \"definition of done\" could look like this:\n\nThe change has sufficient automated tests\n\nChanges have been tested on the staging environment\n\nCode has been peer-reviewed\n\nAll continuous integration (CI) checks pass\n\nCode is merged to the main branch and successfully deployed\n\nRelevant documentation is updated\n\nTask goal is met\n\nAs every team is different, there is no single working agreement list that will work for all teams."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "To get started with crafting your own, you can take a look at the working agreement example templates below to see what a complete working agreement document looks like.\n\nBest practices\n\n1.\n\nGet started with a simple version\n\nSometimes, teams get stuck and try to cover \"everything\" in the first iteration of their working agreement.\n\nTo move past analysis paralysis, start with something simple.\n\nWrite down the obvious things that everyone in the team agrees on.\n\nOnce you have a shared document, it\u2019s easier to add new working agreements.\n\nWhenever you make a decision together with the team or realize that your team has agreed to behave a certain way, but it hasn\u2019t been documented anywhere, simply add it to the document.\n\n2.\n\nCreate the working agreements together as a team\n\nYou should always create your list of working agreements together with the team.\n\nIt can be tempting to just copy-paste an old working agreement document or an example template, slightly modify it, and call it a day."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "It can be tempting to just copy-paste an old working agreement document or an example template, slightly modify it, and call it a day.\n\nHowever, this often means that some of the working agreements don\u2019t make sense to all the team members.\n\nThis often results in some of the team members ignoring the document altogether as they feel like it doesn\u2019t reflect reality.\n\nYou should always create your list of working agreements together with the team.\n\nWorking agreements only work well when they are important to the team and agreed on by each member of the team.\n\nBy creating the working agreement together, you ensure everyone gets to comment on it and is committed to following the common agreements.\n\n3.\n\nDocument your working agreements in one place\n\nYou should have a single document that you can point to everyone who needs to understand how your team works.\n\nIt\u2019s common for software companies to have company-level rules and processes that every team should follow."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "It\u2019s common for software companies to have company-level rules and processes that every team should follow.\n\nThese may be documented in multiple different places and your team's working agreement may include additions or slight modifications to these rules.\n\nIt\u2019s important that you have a team-specific document where you bring everything together.\n\nFor example, If you have a company-level software development process, you should refer to it in your team's working agreement and include any team-specific additions or modifications next to the reference.\n\n4.\n\nKeep your working agreements in sync with real life\n\nA working agreement should be a living document that reflects how the team actually works.\n\nWhen you work as a team, you learn new things and often need to adjust the way you work together.\n\nOften, these changes happen organically within the team members, and it\u2019s easy to forget to document these into the common list of working agreements."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "Often, these changes happen organically within the team members, and it\u2019s easy to forget to document these into the common list of working agreements.\n\nA working agreement should be a living document that reflects how the team actually works.\n\nOne good way to keep your working agreement up to date is to regularly take a look at it in your team retrospectives.\n\nThis is an opportunity for the team to discuss how you could improve the way you work together.\n\nWhen you have these discussions, you should also remove working agreements that are no longer relevant.\n\nIt\u2019s easy for the list of working agreements to get bloated and become so complex that the team no longer finds it valuable.\n\n5.\n\nMake it easy to propose changes to the working agreements\n\nThe easier you make it for people to propose changes to the working agreements, the more likely it is for the list to stay up to date."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "5.\n\nMake it easy to propose changes to the working agreements\n\nThe easier you make it for people to propose changes to the working agreements, the more likely it is for the list to stay up to date.\n\nIdeally, you should have an entry at the beginning of the working agreement document that tells everyone how they can propose changes.\n\nFor example, if you host your document on a collaborative platform like Google Docs, Notion, or Confluence, you could include a note like this: \"Everyone in the team can propose changes to our working agreements.\n\nYou can propose changes to this document by adding a comment or suggestion and tagging <name of the team lead (/scrum master/agile coach)> in the message.\n\nYou can also suggest new working agreements in the team retrospectives.\"\n\n6.\n\nGo through the working agreements with new team members\n\nWhenever a new person joins the team, it\u2019s important that you go through the working agreements with them."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "6.\n\nGo through the working agreements with new team members\n\nWhenever a new person joins the team, it\u2019s important that you go through the working agreements with them.\n\nThey should be able to comment and ask questions to understand why certain working agreements are the way they are.\n\nGoing through the list together is a great way to onboard people to the team and, at the same time, ensure they're committed to the team\u2019s ways of working.\n\nHow to enforce working agreements\n\nWorking agreements that are not followed are useless and, at worst, harmful.\n\nHaving a ton of agreements that are not actually followed may leave people feeling that the team has a lot of \"bureaucracy\" and useless \"policies\" just for a show but \"no one actually follows them.\"\n\nWorking agreements that are not followed are useless and, at worst, harmful.\n\nA great way to make sure team members follow the agreements is to remind them about the agreements during the course of their work."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "A great way to make sure team members follow the agreements is to remind them about the agreements during the course of their work.\n\nYou can do this by effectively using your tools and continuous integration and by automating everything you reasonably can.\n\nThere are, of course, agreements that can\u2019t be automatically enforced.\n\n(I wonder how you would automatically enforce the agreement to \"be transparent and honest\"?)\n\nIn these cases, discussing working agreements in code reviews and regular retrospectives are your friend.\n\n1.\n\nAutomate all the agreements you can\n\nThe most efficient way to get people to consistently follow a working agreement is to automate it.\n\nIt\u2019s also often cheaper in the long run than having the whole team spend time and energy on adopting a new habit.\n\nAutomating working agreements also has the significant upside of reducing nitpicking in your team.\n\nNo matter how well you do it, reminding other people of things that they should\u2019ve known and done feels annoying."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "No matter how well you do it, reminding other people of things that they should\u2019ve known and done feels annoying.\n\nAutomating agreements also helps you onboard new people and lowers the cognitive load for everyone in the team.\n\nThere are multiple things related to working agreements that you can enforce using your tools and continuous integration.\n\nAutomated code style.\n\nWorking agreements often include references to code style that everyone should follow.\n\nTraditionally, people have enforced these by nitpicking in code reviews.\n\nThis is often a waste of time.\n\nInstead, format your code with a deterministic code formatter (like Prettier or Black) and enforce other aspects of your code style using a linter that works with your programming language (e.g.\n\nESLint for JavaScript and TypeScript).\n\nAutomated code checks.\n\nIn addition to code style, teams often have other code-related agreements."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "ESLint for JavaScript and TypeScript).\n\nAutomated code checks.\n\nIn addition to code style, teams often have other code-related agreements.\n\nFor example, many teams have a working agreement \"test coverage should not decrease\" to continually improve their test coverage while they create new code.\n\nWhatever your code-related agreements are, you can likely use ready-made tools (like Codecov for code coverage) to enforce your agreements or use tools like Danger or Betterer to write your own checks.\n\nAutomated team workflows.\n\nIf you have working agreements related to your development process like \"do X before Y\" or \"send notification to customer support\", you should see if your existing tools support these workflows.\n\nMany issue trackers have a wide range of notification settings and automation features.\n\nYour version control system likely also supports workflow related policies."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "Many issue trackers have a wide range of notification settings and automation features.\n\nYour version control system likely also supports workflow related policies.\n\nFor example, GitHub has a built-in feature for enforcing a working agreement to \"review all code before merging to the main branch.\"\n\nIf you're particularly interested in code reviews, my colleague Kimmo Brunfeldt has written a great guide with best practices for automating your code review processes.\n\nAutomated team habits.\n\nAutomating team habits may be a new thing to most readers, as I'm not aware of any other product than Swarmia that does this.\n\nThe idea with our working agreements feature is to allow your team to adopt working agreements for team habits like \"close bugs in less than three days\" or \"link pull requests to issues.\"\n\nThese working agreements are automatically tracked and your team is notified in Slack whenever you're about to break your agreement and go back to your old, bad habits.\n\nAutomated checklists."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "These working agreements are automatically tracked and your team is notified in Slack whenever you're about to break your agreement and go back to your old, bad habits.\n\nAutomated checklists.\n\nIf you have agreed to complete certain manual steps for each new task you can configure your tools to include a ready-made checklist for the person doing the task.\n\nAutomated checklists or templates for e.g., new issues or pull requests are supported by most software tools like issue and project trackers (Jira, Shortcut, etc.)\n\nand source code management tools (like GitHub and GitLab).\n\nCrossing out things from a checklist reminds team members about working agreements, reduces human error, and helps people to feel progress in their work.\n\n2.\n\nUse code reviews and retrospectives\n\nSome working agreements can\u2019t be automatically enforced as they're often too subjective (\"leave the codebase to a better state than where it was\") or abstract (\"be transparent and honest\")."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "Code reviews and retrospectives are natural places for making sure these working agreements are followed.\n\nWhen developing software, it\u2019s common for people to feel \"too busy\" and cut corners.\n\nSometimes this can be an acceptable trade-off but often it\u2019s just a bad habit.\n\nHaving a list of working agreements that everyone agrees to allows team members to refer to them in code reviews and hold each other to a higher standard.\n\nWorking agreements allow team members hold each other to a higher standard.\n\nAbstract working agreements related to behavior and teamwork are often not binary but more nuanced.\n\nFor example, when a team has agreed to \"be transparent and honest,\" it is possible for the team to follow this in one thing (like communicating the status of their task) and miserably fail in another (e.g.\n\nsharing context on why a task has a high priority)."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "sharing context on why a task has a high priority).\n\nRetrospectives offer a great opportunity to discuss these nuances, when team members feel that the team has not succeeded in keeping their agreements.\n\nIn the end, it\u2019s up to the team to decide what\u2019s good enough for them and what does following a specific working agreement look like in the end.\n\nWorking agreement example templates\n\nTo help you get started, you can check out these two example templates: one for agile project teams and the other one for product teams that are doing on-going product development.\n\nAgile project team working agreement\n\nThis template is for a team that is developing software as a project.\n\nFor example, an external agile team of consultants or an internal team composed of people from multiple teams that are working together as a temporary project team.\n\nThis template is designed to answer the question, \"what should anyone working in or with the team know?\""}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "This template is designed to answer the question, \"what should anyone working in or with the team know?\"\n\nand therefore, it also includes the background for the project.\n\nThis format works well for projects because their scope is limited.\n\nWhen working on a project, you usually have stakeholders to whom you need to communicate about the project.\n\nYou might also have one-off consultants doing specific tasks or new team members joining the project.\n\nIn both cases, understanding the project and the team\u2019s working agreements are important.\n\nClick the image to open the template in Google Docs\n\nProduct team working agreement\n\nThis template is for a team that is developing a software product on an on-going basis.\n\nCompared to the above agile project team working agreement, this is shorter and only includes team-specific working agreements.\n\nSoftware products often have a lot of related context and documentation."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "Compared to the above agile project team working agreement, this is shorter and only includes team-specific working agreements.\n\nSoftware products often have a lot of related context and documentation.\n\nIt\u2019s also common for companies that have their own software products to have company-wide policies and processes.\n\nThere\u2019s no reason to duplicate them to the team's working agreements documentation.\n\nClick the image to open the template in Google Docs\n\nConclusion\n\nWorking agreements are a great tool for agile software teams who want to improve collaboration and be more productive.\n\nWhen you agree on what you want to do together with the whole team and make sure everyone is able to keep the agreements, your team will work together with less friction and be happier.\n\nAutomate feedback loops with Swarmia\u2019s Working Agreements\n\nWorking Agreements allow your team to set shared goals for code reviews, collaboration, work in progress, and more.\n\nGet started with a free 14-day trial."}, {"source": "https://www.swarmia.com/blog/agile-team-working-agreements/", "content": "Get started with a free 14-day trial.\n\nStart trial\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nMar 16, 2022Why investors should care about product development performanceRead now \u2192\n\nNov 11, 2021Swarmia is now SOC 2 compliantRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nMeasuring software development productivity\n\nOtto Hilska, Founder & CEO \u00b7 \n\nNov 9, 2021\n\nThe software world gave up too soon on measuring development productivity, deeming it impossible.\n\nA few years ago a new wave of research arrived that proved otherwise.\n\nAfter discussing the foundations for this measurement approach, this article will share some practical tips for instrumenting a modern high-performance and continuously improving development organization.\n\nFoundations for measuring software engineering\n\nIt's no wonder measuring software development productivity hasn't worked so far."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Foundations for measuring software engineering\n\nIt's no wonder measuring software development productivity hasn't worked so far.\n\nThe discussion easily gravitates toward measuring individual performance, dumbing it down to a single number, or getting the organization to game the metrics to receive recognition.\n\nIn the 2018 book Accelerate, Dr. Nicole Forsgren, Jez Humble, and Gene Kim took a scientific approach to finding measures that would lead to increased organizational performance.\n\nForsgren has continued advancing the book\u2019s ideas and recently published the SPACE framework as an approach for thinking about measurement holistically.\n\nDeveloped by Forsgren, Margaret-Anne Story and several Microsoft researchers, the SPACE framework considers:\n\nSatisfaction and well-being\n\nPerformance\n\nActivity\n\nCommunication and collaboration\n\nEfficiency and flow\n\nThe idea is quite simple: measuring developer productivity is easy to get wrong, but that's not a reason to close your eyes to the information."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "By taking a holistic approach, ranging from flow of work to quality metrics and surveying the developers, you gain understanding to accelerate the team's learning.\n\nAnother classic book that focuses mostly on the flow of work is the ground-breaking Principles of Product Development Flow by Donald G. Reinertsen.\n\nThe key themes revolve around building an economic model for understanding software delivery, managing queues, reducing batch size and limiting Work In Progress.\n\nGreat organizations build feedback loops to support decision-making and move faster than the competition.\n\nIt's up to you to evaluate what to measure in your own context.\n\nHaving built several high-performing product development organizations, I've ended up implementing something like the SPACE framework on several occasions.\n\nFor me, it's easier to categorize the dimensions into three parts: Impact, Flow, and Health.\n\nLet\u2019s first discuss what I mean by Impact.\n\nImpact \u2013 are we driving business outcomes?"}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "For me, it's easier to categorize the dimensions into three parts: Impact, Flow, and Health.\n\nLet\u2019s first discuss what I mean by Impact.\n\nImpact \u2013 are we driving business outcomes?\n\nThis is the most important question: what are we getting in exchange for the investment in product development?\n\nThe answer should not be a list of features but rather your business and its key metrics moving in the right direction.\n\nIn practice, Impact metrics are often owned by Product Managers, and companies that do goal-setting with something like Objectives and Key Results (OKRs) use Impact metrics to align teams.\n\nIn a modern product development organization, agreeing on the objectives and outcomes is a way to empower the teams, as Marty Cagan and Chris Jones write in the 2020 book Empowered.\n\nTraditional organizations control team backlogs from the top at the feature level, while modern organizations empower teams to adjust their own backlogs as long as the team keeps business objectives in mind."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Feature adoption\n\nThe starting point for most software products is to track feature adoption.\n\nYou might use products like Amplitude, Pendo, or Heap to track the events or maybe something like Segment to relay events to your data warehouse.\n\nYou're going to appreciate a flexible solution since you don't know all your research questions upfront.\n\nFor example in our business (of building SaaS tools for data-driven engineering management), we like to focus on metrics about onboarded teams rather than individuals, which would not be well-served by something like Google Analytics.\n\nFeature adoption doesn't automatically guarantee growing revenues and profits.\n\nIt's a reasonable assumption that people who use your product are likely to pay for it, but this assumption also deserves a critical look.\n\nOnce you have this data, it\u2019s easy to analyze how well different features correlate with successful onboarding."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Once you have this data, it\u2019s easy to analyze how well different features correlate with successful onboarding.\n\nInvestment categories\n\nAnother way to think about Impact is through the investment you're making.\n\nDo you understand how much of your engineering effort is going to your company's top priorities, used for keeping the lights on, dealing with technical debt, etc?\n\nThe reality is that sometimes it's difficult to attribute changes in business metrics to individual actions.\n\nIt is more effective to understand how much you're investing in specific priorities and see if that investment is getting you what you want.\n\nBusiness-specific measures\n\nYou\u2019ll need to come up with a leading indicator that helps you understand your own business model faster than you could with lagging indicators such as revenue and profits.\n\nSlack famously established that teams that have sent over 2000 messages have tried the product properly, and 93% of them are still using Slack today."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Slack famously established that teams that have sent over 2000 messages have tried the product properly, and 93% of them are still using Slack today.\n\nThis kind of proxy could be useful for developers responsible for optimizing the onboarding experience, but it might also be a company-wide KPI to align sales and marketing.\n\nA SaaS business could focus on enterprise customers to drive up their Average Revenue per Customer.\n\nYet the numbers lag due to an existing customer base and a successful SMB business.\n\nA better option might be looking at conversion rates and churn for companies of a certain size.\n\nFocusing on these metrics might lead the team to focus on user management, security & compliance, etc.\n\nA team building a robot for picking up products in an e-commerce fulfilment center might want to optimize for the error rates of picking the wrong product or dropping the product.\n\nSome metrics will stay intact for years while others may serve a more short-lived initiative."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Some metrics will stay intact for years while others may serve a more short-lived initiative.\n\nReinertsen suggests that \"if you measure one thing, measure the cost of delay.\"\n\nIn the absence of a more exact method of measuring the cost of delay, these business metrics are likely your best bet.\n\nFlow \u2013 are we delivering continuously without getting stuck?\n\nThe unfortunate reality about complexity in software is that if you just keep doing what you've been doing, you'll keep slowing down.\n\nWhen starting a fresh project, you'll be surprised by how much you can accomplish in a day or two.\n\nAnd in some other environment, you could spend a week trying to get a new database column added.\n\nUnderstanding the flow of work is critical because many of the issues are systemic."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "And in some other environment, you could spend a week trying to get a new database column added.\n\nUnderstanding the flow of work is critical because many of the issues are systemic.\n\nEven the most talented developer might not have the full picture of how much time is being wasted when work is bounced between the teams, half-completed features are put on the shelf as priorities change, or all the code gets reviewed by just one person.\n\nIt's easy to think that you're solving a quality problem by introducing code freezes and release approvals, but in reality, it might not be worth it.\n\nFlow of work is often measured in terms of cycle time.\n\nThe term cycle time comes from manufacturing processes, where cycle time is the time it takes to produce a unit of your product, and lead time is the time it takes to fulfill an order (from a request to delivery).\n\nIn software development, these terms are often mixed."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "In software development, these terms are often mixed.\n\nFor most features, it might not be reasonable to track the full lead time of a feature, as in time from a customer requesting a feature to its delivery.\n\nAssuming that the team is working on a product that's supposed to serve a number of customers, it's unrealistic to expect that the features would be shipped as soon as the team first hears the idea.\n\nTherefore, this article will discuss Flow in terms of cycle time, cycle time for issues, deployment frequency and deployment error rates.\n\nCycle time\n\nWhen talking about cycle time for code, we're talking about the time it takes for code to reach production through code reviews and other process steps.\n\nSometimes it's called change lead time.\n\nCycle time is the most important flow metric because it indicates how well your \u201cengine\u201d is running.\n\nThe point is not to worry about slow activity but rather the periods of inactivity."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Cycle time is the most important flow metric because it indicates how well your \u201cengine\u201d is running.\n\nThe point is not to worry about slow activity but rather the periods of inactivity.\n\nWhen diagnosing a high cycle time, your team might have a conversation about topics like this:\n\nWhat other things are we working on?\n\nStart by visualizing all the work in progress.\n\nBe aware that your issue tracker might not tell the whole truth because development teams typically work on all kinds of ad-hoc tasks all the time.\n\nHow do we split our work?\n\nIt's generally a good idea to ship in small increments.\n\nThis might be more difficult if you can't use feature gates to enable features to customers gradually.\n\nLack of infrastructure often leads to a branching strategy with long-lived branches and additional coordination overhead.\n\nWhat does our automated testing setup look like?\n\nIs it easy to write and run tests?\n\nCan I trust the results from the Continuous Integration (CI) server?\n\nHow do we review code?"}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "What does our automated testing setup look like?\n\nIs it easy to write and run tests?\n\nCan I trust the results from the Continuous Integration (CI) server?\n\nHow do we review code?\n\nIs only one person in the team responsible for code reviews?\n\nDo I need to request reviews from an outside technology expert?\n\nIs it clear who's supposed to review code?\n\nDo we as a team value that work, or is someone pushing us to get back to coding?\n\nHow well does the developer know the codebase?\n\nIf all of the software was built by someone who left the company five years ago, chances are that development is going to be slow.\n\nIs there a separate testing/quality assurance stage?\n\nIs testing happening close to the development team or is the work \"handed off\" to someone on the outside?\n\nHow often do we deploy to production/release our software?\n\nIf the test coverage is low, you might not feel like deploying on Fridays.\n\nOr if deployment is not automated, you won't do it after every change."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "If the test coverage is low, you might not feel like deploying on Fridays.\n\nOr if deployment is not automated, you won't do it after every change.\n\nDeploying less frequently increases the batch size of a deployment, adding more risk to it, again reducing the frequency.\n\nHow much time is spent on tasks beyond writing code?\n\nDevelopers need focus time; it's difficult to get back to code on a 30-minute break between meetings.\n\nDon\u2019t treat cycle time as an aggregate metric to drive down.\n\nThere are perfectly good reasons it will fluctuate and optimizing for a lower cycle time would be harmful.\n\nHowever, when used responsibly, it can be a great discussion-starter.\n\nCycle time for issues\n\nIssue cycle time captures how long your Epics, Stories, Tasks (or however you plan your work) are in progress.\n\nEach team splits work differently, so they're not directly comparable."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Each team splits work differently, so they're not directly comparable.\n\nIf we end up building the same product, it doesn't really matter whether that happens in five tasks taking four hours each, or four tasks taking five hours each.\n\nWe know that things don't always go smoothly.\n\nWhen you expected something to take three days and it ended up taking four weeks of grinding, your team most likely missed an opportunity to adjust plans together.\n\nWhen you find yourself in this type of situation, here are some questions to ask:\n\nWhat other things are we working on?\n\nChances are your team delivered something but simply not this feature.\n\nVisualizing and limiting Work In Progress is a common cure.\n\nHow many people worked on this?\n\nGravitating toward solo projects might feel like it eliminates the communication overhead and helps move things faster.\n\nFrom an individual's perspective, this is true, but it's not true for the team.\n\nAre we good at sharing work?"}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "From an individual's perspective, this is true, but it's not true for the team.\n\nAre we good at sharing work?\n\nSplitting work is both a personal skill and an organizational capability.\n\nDevelopers will argue it's difficult to do.\n\nNevertheless, do more of it, not less.\n\nHow accurate were our plans?\n\nIf the scope of the feature increased by 200% during the development, it's possible that you didn't understand the customer use cases, got surprised by the technical implementation, or simply discovered some nasty corner cases on the way.\n\nWas it possible to split this feature into smaller but still-functional slices?\n\nProduct management, product design and developers need to work together to find a smart way to create the smallest possible end-to-end implementations.\n\nIt's always difficult.\n\nIt feels great to work with a team that constantly delivers products to customers and gets to bask in the glory.\n\nThat's what you get by improving issue cycle time."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "It's always difficult.\n\nIt feels great to work with a team that constantly delivers products to customers and gets to bask in the glory.\n\nThat's what you get by improving issue cycle time.\n\nDeployment frequency & error rate\n\nDepending on the type of software you're building, \"deployment\" or \"release\" might mean different things.\n\nFor a mobile app with an extensive QA process, getting to a two-week release cadence is already a good target, while the best teams building web backends deploy to production after each change.\n\nDeployment frequency doubles both as a throughput metric and as a quality metric.\n\nWhen a team is afraid to deploy, they'll end up doing it less frequently.\n\nSolving the problem typically requires building more infrastructure.\n\nSome of the main considerations are:\n\nIf the build passes, can we feel good about deploying to production?"}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Solving the problem typically requires building more infrastructure.\n\nSome of the main considerations are:\n\nIf the build passes, can we feel good about deploying to production?\n\nIf not, you'll likely want to start building tests from the top of the testing pyramid to test for significant regressions, building the infrastructure for writing good tests (with things like test data factories), and making sure that the team keeps writing tests for all new code.\n\nWhether tests get written cannot be dictated by outside stakeholders: it needs to be owned by the team.\n\nIf the build fails, do we know if it failed randomly or was caused by flaky tests?\n\nYou'll want to understand which tests are causing most of your headaches so that you can focus efforts to improve the situation.\n\nIs the deployment pipeline to production fully automated?\n\nIf not, it's a good idea to keep automating it one step at a time.\n\nInvestments in the CI/CD pipeline tend to pay back in no time."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Is the deployment pipeline to production fully automated?\n\nIf not, it's a good idea to keep automating it one step at a time.\n\nInvestments in the CI/CD pipeline tend to pay back in no time.\n\nDo we understand what happens in production after we've deployed?\n\nBuilding observability and alerting will take time.\n\nIf you have a good baseline setup, it's easy to keep adding these along with your regular development tasks.\n\nIf you don't have anything set up, it will never feel like it's the right time to add observability.\n\nAre developers educated on the production infrastructure?\n\nSome developers never needed to touch a production environment.\n\nIf it's not a part of their onboarding, few people are courageous enough to start making improvements on their own.\n\nSome measures to avoid\n\nHistorically, agile teams have tracked \"velocity\" or \"story points.\u201d Originally meant as a way to help teams get better at splitting work, these units have been abused ever since."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "I've even seen teams invent their own word and unit for velocity so that someone doesn't accidentally try to use it to compare the teams.\n\nIf talking about story points helps you be more disciplined about scoping your sprints, go for it.\n\nIf not, don't feel bad about dropping it, as long as you understand your cycle times.\n\nAnother traditional management pitfall is to focus on utilization, thinking that you want your developers to be 100% occupied.\n\nWhile it's true that 0% utilization is likely a signal about some problems, maximizing it will only lead to worse problems.\n\nAs the utilization approaches 100%, the cycle times shoot up, and the team will slow down (as shown by Reinertsen).\n\nAdditionally, you'll lose the creative problem-solving coming from your development teams.\n\nThere's a time and place for metrics around individual developers.\n\nIn very healthy environments they could be used to improve the quality of coaching conversations while understanding the shortcomings of these measures."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "In very healthy environments they could be used to improve the quality of coaching conversations while understanding the shortcomings of these measures.\n\nUnfortunately, in a bigger organization, an effort to focus on individual metrics is likely to derail your good intentions around data-driven continuous improvement.\n\nDevelopers will rightfully point out how the number of commits per day doesn't tell you how good of a developer they are.\n\nThere are significant gains to be made in the team context alone, so why not start there?\n\nHealth \u2013 are we maintaining balanced ways of working?\n\nThe last dimension to measure is the health of the team.\n\nGood development practices are the foundation for a sustainable pace of working.\n\nIt's also what keeps the team performing in the long run.\n\nWhen the team functions well, you can expect good results in the other categories.\n\nOur discussion will consider team health checks, collaboration and siloing, automated testing, bugs, and production metrics."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Our discussion will consider team health checks, collaboration and siloing, automated testing, bugs, and production metrics.\n\nTeam health checks\n\nTeams often have a continuous improvement cadence, such as a biweekly retrospective.\n\nThe retrospectives might start repeating themselves, and I've found that it's good to occasionally prompt teams to evaluate themselves more holistically.\n\nSpotify has published some of their own team health check PDFs and New Relic published their team-health assessment, but you're free to create your own based on your unique business and culture."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Spotify has published some of their own team health check PDFs and New Relic published their team-health assessment, but you're free to create your own based on your unique business and culture.\n\nI used to ask my teams at Smartly.io to react to these statements every six months:\n\nThe team's bug backlog is manageable\n\nThe team has all the skills needed to build the products in their area\n\nThe team is able to test new product ideas with customers\n\nThe team constantly delivers work in small increments\n\nThe team doesn't have significant technical silos or abandoned features\n\nThe team's work is not blocked by other teams\n\nThe team has communicated a clear vision and how to get there\n\nWe feel safe to challenge each other, and our work is transparent\n\nInstead of development practices, you might occasionally choose to focus on company culture, as proposed in Dr. Ron Westrum's research.\n\nCollaboration & siloing\n\nIt's not obvious what a good level of collaboration is and how to measure it."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Collaboration & siloing\n\nIt's not obvious what a good level of collaboration is and how to measure it.\n\nSiloing is a word with a negative connotation, but an organization with no boundaries is an organization that doesn't get any work done.\n\nIn my experience, software engineering is largely a learning-bound problem.\n\nTeams need context about the business domain, customers, architecture, tools, and technical implementation details.\n\nThere's no way this can be done with a one-time \"knowledge transfer.\u201d Thus, improving collaboration is your best shot at mitigating the learning bottleneck.\n\nFor developers, one of the best ways to learn is to work together with peers.\n\nThis happens through code reviews, planning meetings, retrospectives, and most importantly, by just working on the different corners of the same problem."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "This happens through code reviews, planning meetings, retrospectives, and most importantly, by just working on the different corners of the same problem.\n\nI've found two useful dimensions for measuring collaboration:\n\nFeatures: Having multiple developers working on the same feature means that people need to understand the same corner cases about the business domain.\n\nEven if it's a mobile developer and a backend developer working together, they share the definitions of the complex domain concepts.\n\nCodebases: If a codebase has only been touched by one person, it's going to get increasingly difficult to onboard someone else to it.\n\nIn a bigger codebase, this can be even applied at the file level.\n\nMost organizations think it's expensive to let developers learn about new business concepts and technologies."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "In a bigger codebase, this can be even applied at the file level.\n\nMost organizations think it's expensive to let developers learn about new business concepts and technologies.\n\nIn reality, even a 20% increase in \"less effective\" learning work pales in comparison to the systemic effects of depending on a single developer to build something, let alone having to work on a codebase where all the original authors are long gone.\n\nAutomated testing\n\nTests are one of the primary tools for making sure that the codebase is maintainable in the long term.\n\nMany teams struggle with tests: do we have enough tests, are they reliable enough and do they run fast enough?\n\nI've seen situations where a team fixes the same bug multiple times based on customer bug reports.\n\nSince none of the developers wrote tests for it, no one knew how it was supposed to work.\n\nEventually, someone noticed that they were reverting to the previous bug fix and playing a game of bug tennis."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Since none of the developers wrote tests for it, no one knew how it was supposed to work.\n\nEventually, someone noticed that they were reverting to the previous bug fix and playing a game of bug tennis.\n\nThere are measures like code coverage that can be used for tests, but their applicability depends on your choice of technologies.\n\nFor example, in a statically typed language, you might want to test different things than with a dynamically typed language.\n\nThe important thing is that the team agrees on how to test and does it consistently.\n\nBug fixes should have a test.\n\nFeatures should have a test coverage that makes sense in your context.\n\nIn fact, research shows that a high number of tests is a better indication of quality than code coverage.\n\nIt's also useful to understand if test flakiness is causing problems, and when your test suite is starting to take a long time (15+ minutes) to run.\n\nBugs\n\nAs we know from Principles of Product Development Flow, it's important to take interest in the queues."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Bugs\n\nAs we know from Principles of Product Development Flow, it's important to take interest in the queues.\n\nA bug backlog can be one of your most significant queues.\n\nI've seen teams with almost 1,000 open bugs, which obviously takes a lot of time to manage.\n\nBugs come in various shapes and sizes, and not all of them are created equal.\n\nMost organizations will want to treat them differently based on some segmentation around the expected impact.\n\nFor the most critical bugs you'll want to make sure that they're fixed \u2013 immediately.\n\nAs a rule of thumb, I suggest making sure that the number of bugs in your bug backlog is not more than 3x the number of developers in the team.\n\nGoing from 1000 open bugs to 15 is a topic for a whole another blog post.\n\n\ud83d\ude42\n\nProduction metrics\n\nDevelopers need to understand how their software performs in production.\n\nThis includes things like exceptions, slow queries and queue lengths.\n\nLuckily, this is already well-covered in many teams."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "This includes things like exceptions, slow queries and queue lengths.\n\nLuckily, this is already well-covered in many teams.\n\nDoing this in practice\n\nIn most companies software development is not really measured, possibly with the exception of production infrastructure dashboards and story points.\n\nThis is the result of the industry taking decades to recover from the trauma of trying to measure lines of code.\n\nThe purpose of this article is not to get your organization to measure everything listed; getting from 0 to 100 is not the point.\n\nDo not treat these ideas as a \"maturity model,\u201d where more process and more measurement equals better.\n\nInstead, strive for the minimal process that makes sense with the problems you're dealing with.\n\nMy goal here is to provide a fresh way of looking at the dimensions that matter in developer productivity.\n\nTo me, these are: Impact, Flow and Health."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "My goal here is to provide a fresh way of looking at the dimensions that matter in developer productivity.\n\nTo me, these are: Impact, Flow and Health.\n\nYou'll want to build an organization that's well-educated on development productivity practices, tools, and research, but one that is ultimately focused on solving the most pressing problems iteratively.\n\nThe company culture needs to support a high-quality discussion that is informed by metrics rather than focused on chasing an individual number.\n\nSolutions only make sense when presented in the context of a problem.\n\nWith good infrastructure, teams can better act on the advice in this article and run the full continuous improvement cycle from identifying problems to changing habits.\n\nWant to see Swarmia in action?\n\nWatch our 3-minute product overview to see how Swarmia can help your engineering organization improve software development productivity without sacrificing culture or quality.\n\nWatch now\n\nOtto Hilska is the founder & CEO at Swarmia."}, {"source": "https://www.swarmia.com/blog/measuring-software-development-productivity/", "content": "Watch now\n\nOtto Hilska is the founder & CEO at Swarmia.\n\nIn the past, he scaled the product development team to 100+ people as the Chief Product Officer at Smartly.io, and founded Flowdock.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nFeb 13, 2023Size, age, culture: 3 factors that will shape your productivity pathRead now \u2192\n\nDec 16, 2021Fixing the coffee situation at the office with lean and queuing theoryRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nReduce bias in retrospectives with better data\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nOct 27, 2021\n\nMany software organizations run retrospectives based on mostly subjective data collected from the retrospective participants.\n\nStudies show this leads to skewed insights that often miss broader organizational goals.\n\nOne solution is to add a step to your retrospectives in which you present relevant hard data gathered from a wide array of data sources.\n\nI recently wrote a blog post on well-researched advice on software team productivity that included a summary of a few excellent studies on the effectiveness of retrospectives."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "I recently wrote a blog post on well-researched advice on software team productivity that included a summary of a few excellent studies on the effectiveness of retrospectives.\n\nThese studies highlight how teams often rely too much on the subjective personal experiences of the team members to collect data for the insights and actions generated from the retrospectives.\n\n[Retrospective] discussions might suffer from participant bias, and in cases where they are not supported by hard evidence, they might not reflect reality, but rather the sometimes strong opinions of the participants.\n\n2014)\n\nRetrospectives focused on the personal experiences of the participants often work as great team-building events.\n\nThe challenge is that retrospectives based only on subjective data collected from the participants are susceptible to multiple cognitive biases like recency and confirmation bias.\n\nAs these retrospectives often miss some crucial pieces of data, they may result in false insights."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "As these retrospectives often miss some crucial pieces of data, they may result in false insights.\n\nFalse insights result in actions that are at best a waste of time, at worst, a hindrance to the organization's goals.\n\nWhat a data-driven retrospective looks like\n\nThere is a multitude of ways you can run a retrospective.\n\nThis blog post will use the 5-step retrospective structure from the book \"Agile Retrospectives.\"\n\nIt is one of the most well-known options and is a great, generally applicable approach to running a retrospective.\n\nMost retrospectives we've seen teams run use at least some parts of its structure.\n\nThe five steps of the structure are:\n\nSet the stage: Help people focus on the work at hand.\n\nReiterate the goal.\n\nCreate an atmosphere where people feel comfortable discussing issues.\n\nGet everyone to say a few words.\n\nGather data: Collect the data you need to gain useful insights.\n\nStart with the hard data like events, metrics, features, or stories completed."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Get everyone to say a few words.\n\nGather data: Collect the data you need to gain useful insights.\n\nStart with the hard data like events, metrics, features, or stories completed.\n\nContinue with personal experiences and feelings.\n\nGenerate insights: Ask \"why?\"\n\nThink analytically.\n\nExamine the conditions, interactions, and patterns that contributed to successes or failures.\n\nAvoid jumping to the first solution, and consider additional possibilities to make sure you address the actual root cause.\n\nDecide what to do: Pick the top items from the list of improvements.\n\nDecide the actions you are going to get done.\n\nAssign the actions to individual people.\n\nClose the retrospective: Decide how to document the results, and plan for follow-up.\n\nAsk for feedback about the facilitation/retrospective.\n\nWhen running a data-driven retrospective, our focus is on the second step, \"gather data.\""}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Ask for feedback about the facilitation/retrospective.\n\nWhen running a data-driven retrospective, our focus is on the second step, \"gather data.\"\n\nYou should start the step by first gathering \"hard data like events, metrics, features, or stories completed\" and then continue to the personal experiences and feelings of the participants.\n\nHowever, many teams more or less skip the first part.\n\nI've seen dozens of retrospectives where the organizer rushed to ask questions from the group like \"What went well?\n\nWhat could be improved?\n\nWhat went badly?\"\n\nwithout first thinking about the context.\n\nTo fix the situation, we can add an explicit step that we'll call \"present hard data.\"\n\nTrying to gather hard data combined with personal experiences and feelings is a historic relic.\n\nTraditionally, retrospectives have been promoted by \"agile people\" and consultants\u2014external facilitators.\n\nThus, most retrospective advice is written for these kinds of \"outsiders.\""}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Traditionally, retrospectives have been promoted by \"agile people\" and consultants\u2014external facilitators.\n\nThus, most retrospective advice is written for these kinds of \"outsiders.\"\n\nAn outsider needs to start with \"gathering all the data\" because they don't often have access to it outside the retrospective.\n\nIf you're running a modern software organization that employs retrospectives, you have no reason to do a separate data inventory every time.\n\nYour \"hard data sources\" are not likely to change often.\n\nWhen we add the \"present hard data\" step to our retrospectives, we get four clear benefits:\n\nBetter focus: We don't need to spend time trying to gather the hard data from the participants.\n\nSpending a few minutes going through the most important data is enough.\n\nThen, the \"gather data\" section can focus on getting people to share their personal experiences and feelings.\n\nMore reliable data: Your data quality is better because the data is not based on only what people remember from the past."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "More reliable data: Your data quality is better because the data is not based on only what people remember from the past.\n\nBetter insights: Consistent hard data helps the participants generate better insights by reducing personal biases and making it easier to identify common patterns.\n\nThis ultimately makes it more likely for the team to determine the actual root causes.\n\nContinuous evaluation of your hard data: The step works as a great \"mini-retrospective\" on what hard data your team uses to drive its decision-making.\n\nIf the presented hard data feels irrelevant for the team's continuous improvement, it is a sign that either your hard data or your team may be missing something.\n\nHow to get started with data-driven retrospectives\n\nTo get started with data-driven retrospectives, take inventory of the \"hard data\" sources you already have.\n\nMany organizations have KPIs, OKRs, or similar to make sure the teams in the organization are prioritizing the right things business-wise."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Many organizations have KPIs, OKRs, or similar to make sure the teams in the organization are prioritizing the right things business-wise.\n\nYou might also have insights from your version control system like GitHub and issue tracker like Jira.\n\nSales and customer success data is also often valuable.\n\nThen, think about what data you're currently not collecting but would need to get a holistic picture.\n\nFor example, the SPACE framework is an excellent tool for this.\n\nOverall, your goal is to provide the people in the retrospective with an accurate timeline of what happened within the time period you're focusing on (e.g., last iteration or sprint).\n\nIt can be hard to correctly remember and jointly discuss past events in a constructive way.\n\nFact-based timelines that visualize a project's events offer a possible solution.\n\n2014)\n\nYou will likely identify hard data that you should have but cannot currently automatically gather."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Fact-based timelines that visualize a project's events offer a possible solution.\n\n2014)\n\nYou will likely identify hard data that you should have but cannot currently automatically gather.\n\nYou can compensate for this by making a manual report or making sure you cover it when gathering personal experiences from people.\n\nFor example, many teams don't have very good insights into what kind of work they actually did during the last iteration.\n\nYou can collect this information by answering these questions: \"What did we ship?\n\nHow much work went into the roadmap/toward our OKRs?\n\nHow much went to fixing bugs?\"\n\nAnother common practice used in many retrospectives is to start every session by building a manual timeline of the last iteration.\n\nThis reminds people of the key events that may have contributed to the team's productivity and how everyone is feeling.\n\nIt is worth noting that the more automatic you can make your hard data sources, the better."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "It is worth noting that the more automatic you can make your hard data sources, the better.\n\nIf you rely on manual work in, for example, calculating the ratio between bugs and roadmap work, it is very likely that, at some point, your data will not be up to date.\n\nRelying on manual work also often leads to the team dropping these metrics when they start feeling busy.\n\nThis situation is precisely the opposite of what you want to achieve.\n\nIf anything, you should have a clearer picture of what is essential when you're running low on time.\n\nTo be honest, I haven't personally seen a single team continually do great data-driven retrospectives unless the data and reports were automatically available.\n\nA real-life example of holistic hard data\n\nTo give a real-life example of a diverse combination of hard data, I will describe the hard data sources we use at Swarmia.\n\nWe have four different hard data sources: objectives and key results (OKRs), weekly customer reports, sales pipeline, and Swarmia's Work Log."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "We have four different hard data sources: objectives and key results (OKRs), weekly customer reports, sales pipeline, and Swarmia's Work Log.\n\nObjectives and key results (OKRs)\n\nOKRs include the objectives that we feel are the most important goals for our business right now.\n\nAchieving these usually takes multiple months.\n\nEach objective has a few (2-6) key results to make them more actionable.\n\nWe update the progress of our OKRs every Monday.\n\nEspecially in larger organizations, it can be easy to wander off from the things likely to have the most significant business impact.\n\nOKRs are an excellent data source for bringing those discussions into retrospectives.\n\nWeekly customer report\n\nOur weekly customer report contains key performance indicators (KPIs) such as monthly recurring revenue (MRR), number of paid seats, user activity, and Slack notification adoption.\n\nIt provides retrospectives with the necessary context for evaluating if our decisions have been impactful and served our users well."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "It provides retrospectives with the necessary context for evaluating if our decisions have been impactful and served our users well.\n\nSales pipeline\n\nWe use Hubspot to track our sales pipeline.\n\nSeeing the pipeline is helpful even for the engineers.\n\nIt often provides great context for the features that may be included in the roadmap and is an excellent source of information when discussing the differences between our customers and their needs.\n\nWhen your organization becomes bigger, looking at the sales pipeline becomes less valuable.\n\nBecause of this, our sales team also maintains a \"Customer Feature Wishes\" page that highlights the most common challenges across the deals.\n\nWork Log\n\nThis is the part where I get to toot our own horn (toot, toot!)\n\nas we use our own product in our retrospectives.\n\nWork Log is Swarmia's unique feature that visualizes what has happened within a specific week."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "as we use our own product in our retrospectives.\n\nWork Log is Swarmia's unique feature that visualizes what has happened within a specific week.\n\nIt allows us to see at a glance how much of our activities went into the roadmap (e.g., epics or stories) and how much attention we put into individual issues, bugs, and unplanned work.\n\nIt includes most of the same information as the manually built \"timeline\" discussed above, except it automatically updates in real-time.\n\nConclusion\n\nHopefully, this blog post inspires you to include enough hard data in your retrospectives.\n\nIt will allow your teams to create better insights and actions, ultimately leading to more productive teams and happier engineers.\n\nYou can still run retrospectives in which you put the hard data aside and focus on the feelings and personal experiences of the team.\n\nHaving different kinds of retrospectives will benefit your team and help keep people engaged."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Having different kinds of retrospectives will benefit your team and help keep people engaged.\n\nHowever, ensure you rely on a wide array of data sources when holding retrospectives on topics in which accurate insights are essential.\n\nLeaving hard data out of a retrospective should be a deliberate choice, not an accident.\n\nUse real data in your retrospectives\n\nSwarmia gives your engineering team access to the data you need to have better discussions in retrospectives and other team meetings.\n\nLearn more by starting a free 14-day trial.\n\nStart trial\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/data-driven-retrospectives-stop-fake-improvements/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nAug 31, 2022Why cycle time is a better metric than velocityRead now \u2192\n\nDec 21, 2021Tackling typical problems with issue cycle timeRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nA complete guide to code reviews\n\nKimmo Brunfeldt, Software Engineer \u00b7 \n\nOct 12, 2021\n\nCode reviews are a widely accepted best practice for software development teams.\n\nIn this post, we'll cover why the most successful teams use code reviews, how to adopt them in your development process, and what the best practices are.\n\nThe goals of code reviews are:\n\nSharing knowledge: The depth of know-how shared depends on the thoroughness of the review, but some amount of information will always be transferred.\n\nThe knowledge can be general tips about the framework or programming language or invaluable domain-specific information bits."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "The knowledge can be general tips about the framework or programming language or invaluable domain-specific information bits.\n\nSpreading ownership: Code reviews have a positive impact on mutual code ownership.\n\nIt's easy to end up in a situation where one developer always deals with a certain part of the codebase because they're most familiar with it.\n\nIt might be a short-term win but is often a long-term loss.\n\nWhen ownership is shared, teams become more motivated and autonomous.\n\nUnifying development practices: Every developer has their own tendencies and ways to implement software.\n\nCode reviews help to narrow the gap between individual development styles and make the codebase more unified.\n\nUnification happens through high-level discussions about architecture and software design and via micro-level continuous integration checks, such as coding style enforcement."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Unification happens through high-level discussions about architecture and software design and via micro-level continuous integration checks, such as coding style enforcement.\n\nQuality control: Studies have shown that code reviews can help with catching defects, but even more importantly, they surface software design issues while they are still relatively easy to change.\n\nAdopting code reviews\n\nIt's crucial to set the review process right.\n\nAt worst, code reviews might feel like a hindrance.\n\nAt best, code reviews help to sustain a good, stable team performance for many years.\n\nIf your organization is new to code reviews, introducing them will be a big change in the development process.\n\nWhenever implementing changes to ways of working, it's a good idea to ensure that everyone agrees on the process and has had the chance to contribute to the decision.\n\nThis will cause less friction."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Whenever implementing changes to ways of working, it's a good idea to ensure that everyone agrees on the process and has had the chance to contribute to the decision.\n\nThis will cause less friction.\n\nYou, as a team or an organization, should agree on the philosophy and motivation behind code reviews before implementing them.\n\nYou can write down an internal \"what's a good code review\" document together or refer to existing guides.\n\nIt's a practical way to make sure everyone is aware of the whys.\n\nSocial relationships can't be ignored when talking about peers giving feedback about each other\u2019s work.\n\nThere are no silver bullets.\n\nIt's hard work that requires each individual's contribution.\n\nTo have the best chance of success, make sure to thoroughly discuss and educate your team about communication practices.\n\nBest practices for code reviews\n\nBlog posts about review practices often mention smaller details about branch names, commit message lengths, etc."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Best practices for code reviews\n\nBlog posts about review practices often mention smaller details about branch names, commit message lengths, etc.\n\nWhile those tips are valuable too, this post focuses on more general recommendations.\n\nThere are multiple perspectives to a code review process: the author's, the reviewer's, and the team's point of view.\n\nEach party has an equally important role in the process.\n\nSome best practices apply only to the author or the reviewer, but many of them are important for everyone in the team.\n\nLet's go through what those practices are.\n\nWe'll focus on GitHub and pull request (PR) oriented review processes, but many of the tips apply in general as well.\n\n1.\n\nDecide on a process\n\nResponsibility will bounce between the author and the reviewer(s).\n\nThe more explicit the review process, the less likely the ball is dropped by any party."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "1.\n\nDecide on a process\n\nResponsibility will bounce between the author and the reviewer(s).\n\nThe more explicit the review process, the less likely the ball is dropped by any party.\n\nFor example, our internal PR guidelines look something like this:\n\nDRAFT You can open a PR in a draft state to show progress or request early feedback.\n\nREADY FOR REVIEW You can also skip the draft state and open a PR directly.The review is done by another team member.Usually, there's no need to request a review; Swarmia automatically notifies the team.\n\nA manual review request can be useful if you, for example, want to request a design review from a certain designer.It's polite to have the PR ready so that you're not about to rebase everything 5 times while the reviewer tries to keep up.\n\nCHANGES REQUESTED Fix the requested changes, or discuss whether a fix is needed.Preferably, create new commits after the review.You can directly commit suggestions from the GitHub UI."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "CHANGES REQUESTED Fix the requested changes, or discuss whether a fix is needed.Preferably, create new commits after the review.You can directly commit suggestions from the GitHub UI.\n\nAPPROVED The author is responsible for merging their own PR.\n\nYours might look different, but as long as the team agrees on the process, all is good.\n\n2.\n\nFocus on the right things\n\nTo maintain code review standards across developers, it's a good idea to have guidelines for what to focus on in code reviews.\n\nHere's what we recommend focusing on:\n\nFunctionality: Does the code behave as the PR author likely intended?\n\nDoes the code behave as users would expect?\n\nSoftware design: Is the code well-designed and fitted to the surrounding architecture?\n\nComplexity: Would another developer be able to easily understand and use the code?\n\nTests: Does the PR have correct and well-designed automated tests?\n\nNaming: Are names for variables, functions, etc.\n\ndescriptive?\n\nComments: Are the comments clear and useful?"}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Tests: Does the PR have correct and well-designed automated tests?\n\nNaming: Are names for variables, functions, etc.\n\ndescriptive?\n\nComments: Are the comments clear and useful?\n\nDocumentation: Did the author also update relevant documentation?\n\nDevelopers shouldn't spend their time reviewing things that can be automatically checked.\n\nMore on that in \"Use continuous integration effectively\" and \"Delegate nit-picking to a computer\".\n\n3.\n\nDiscuss the high-level approach early\n\nBefore jumping into coding a complex feature, it's beneficial to discuss the high-level approach first.\n\nUsually, this is done when planning the feature.\n\nIt's not nice for anyone if a PR ends up in a complete rewrite because the approach wasn't discussed beforehand.\n\nRewrites of pull requests do happen every once in a while, but it's a sign that you might want to talk more before the implementation.\n\nSometimes a proof-of-concept implementation is needed to ignite the discussion."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Sometimes a proof-of-concept implementation is needed to ignite the discussion.\n\nAn effective way to get started is to open a draft PR of the approach and make the architecture decision based on the gained information.\n\n4.\n\nOptimize for the team\n\nThis idea is explained well in Google's Engineering Practices document:\n\nWe optimize for the speed at which a team of developers can produce a product together, as opposed to optimizing for the speed at which an individual developer can write code.\n\nSpeedy reviews increase team performance in multiple ways: iteration becomes faster, developers don't need to do time-costly context switches as often, etc.\n\nMake sure the team understands the implications of fast reviews and agrees on a suitable maximum time for responding to a PR.\n\nThe key is to minimize the response lag between the author and the reviewer, even if the whole review process takes long."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "The key is to minimize the response lag between the author and the reviewer, even if the whole review process takes long.\n\nFor example, it might be invaluable for the author to know that their PR will be reviewed, for example, tomorrow morning.\n\nThat said, developers shouldn't interrupt their focus to do reviews.\n\nInstead, they should prioritize them whenever there's a fitting gap\u2014for example after lunch.\n\nReview speed is definitely not solely the reviewer's responsibility\u2014the author has an important role too.\n\nThe easier it is to pick a pull request and review it, the faster the work flows.\n\nOur help article \"Review Code Faster\" covers how to leverage Swarmia to speed up reviews.\n\n5.\n\nDefault to action\n\nSometimes reviews can stall for various reasons.\n\nDuring those times, you should have a bias for action.\n\nOne can approve a PR even if there's some input left for the author to consider."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "During those times, you should have a bias for action.\n\nOne can approve a PR even if there's some input left for the author to consider.\n\nIf a tech decision lingers and work becomes blocked, deciding something relatively quickly is better than slowly concluding to an \"ideal\" decision.\n\nReserve enough time for technical decisions, but move on before you reach analysis paralysis.\n\nDevelopers should be inclined to merge code instead of primarily focusing on poking holes in the implementation.\n\n6.\n\nKeep pull requests small\n\nSmaller batches are easier to design, test, review, and merge.\n\nThere are studies [1] [2] about the optimal amount of changed lines, but it's not an exact science.\n\nGoogle's recommendations put it well:\n\nThere are no hard and fast rules about how large is \u201ctoo large.\u201d 100 lines is usually a reasonable size for a CL, and 1000 lines is usually too large, but it\u2019s up to the judgment of your reviewer."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "The number of files that a change is spread across also affects its \u201csize.\u201d A 200-line change in one file might be okay, but spread across 50 files it would usually be too large.\n\nIt's almost always possible to split a large change into smaller chunks\u2014for example, with a separate refactoring PR that sets the stage for a cleaner implementation.\n\nPracticing slicing also helps to detect minimal shippable increments of your product.\n\nFeature gates or feature flags might be necessary to gain the ability to ship half-ready product features along with the existing ones.\n\nLearn more why small pull requests are better.\n\n7.\n\nFoster a positive feedback culture\n\nEffective communication, in general, is really hard.\n\nGiving feedback about a colleague's work is one of the most challenging forms of communication.\n\nAcknowledge this in code reviews.\n\nHere's a list of suggestions to improve discussions in code reviews:\n\nGive feedback about the code, not about the author.\n\nPick your battles."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Acknowledge this in code reviews.\n\nHere's a list of suggestions to improve discussions in code reviews:\n\nGive feedback about the code, not about the author.\n\nPick your battles.\n\nAccept that there are multiple correct solutions to a problem.\n\nYou're in the same boat.\n\nPR authors are humans with feelings (except dependabot \ud83e\udd16).\n\nProvide reasons, not feelings, to support your position.\n\nUse the \"Yes, and...\" technique to keep an innovative atmosphere.\n\nIt can be an ungracious pattern to dismiss fresh and fragile ideas in a draft PR stage.\n\nKeep the feedback balanced with positive comments.\n\nIt's always delightful to receive praise from the reviewer.\n\nIf the pull request discussion becomes heated, schedule a call to discuss the topic.\n\nIt usually helps to relieve the tension.\n\n8.\n\nUse continuous integration effectively\n\nGitHub Actions and status checks are widely used for building a robust CI pipeline."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "It usually helps to relieve the tension.\n\n8.\n\nUse continuous integration effectively\n\nGitHub Actions and status checks are widely used for building a robust CI pipeline.\n\nHowever, no matter the tools, it's crucial to invest in setting up a CI solution to automate as many quality checks as possible.\n\nAutomated checks allow reviewers to focus on more important topics such as software design, architecture, and readability.\n\nChecks can include tests, test coverage, code style enforcements, commit message conventions, static analysis, and much more.\n\nA variety of metrics produced by continuous integration can help the reviewer to quantify the quality of a PR.\n\nTest coverage and code complexity metrics might reveal interesting insights that otherwise would be hard to estimate.\n\nThese metrics don't necessarily need to be hard pass or fail checks but rather additional data for the review process."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "These metrics don't necessarily need to be hard pass or fail checks but rather additional data for the review process.\n\nInstead of slowing down the review process to catch more bugs, try to improve the automated checks to enable fast movement.\n\n9.\n\nDelegate nit-picking to a computer\n\nWhenever a reviewer spends their time nit-picking on small details, consider if it could be an automated check.\n\nAutomatic check will always be enforced, while the human process relies on the reviewers' memories and moods to reject an anti-pattern.\n\nFor example, our ESLint rules enforce a consistent usage of certain terminology across the product.\n\nThis is far more effective than documentation that would list the correct spelling of each word.\n\nCode formatting is an example of a controversial topic in which almost all solutions are correct.\n\nSpending time debating stylistic choices rarely provides much value to the product, as long as a set of rules are adopted."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Spending time debating stylistic choices rarely provides much value to the product, as long as a set of rules are adopted.\n\nConsistent unpleasing styles (to some individuals) are better than a mixture of multiple styles.\n\nYour team can also adopt pre-existing practices, for example, a TypeScript project could adopt Prettier defaults instead of re-inventing their own.\n\n10.\n\nCommunicate explicitly\n\nWhen reviewing a piece of code, be explicit about the action you request from the author.\n\nLet's say a reviewer has commented, \"This could be done in Postgres in favor of application code\" on a line of code.\n\nAre they requesting a change, suggesting to refactor it later, or just making the author aware of other solutions?\n\nIt's often hard to judge.\n\nGitHub provides tools to be more explicit: for example, \"Request changes\" in a review.\n\nTip for the PR author: dismissing a review resets the pull request state to indicate that the reviewer can review again."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Tip for the PR author: dismissing a review resets the pull request state to indicate that the reviewer can review again.\n\nIt's up to you, the PR author, to decide if it feels important enough to use the feature, but especially in remote teams, it might help to make the process even more explicit.\n\n11.\n\nUse explicit review requests\n\nReview requests in GitHub are a convenient way to let others know that your code is ready for review.\n\nWhile a review can be requested manually, we recommend setting up a CODEOWNERS file to automate requesting a review.\n\nThe method is robust and doesn't rely on individual authors remembering to request reviews.\n\nReviews can also be requested from a team, via CODEOWNERS or manually, which distributes the responsibility among team members.\n\nMake sure reviews are done evenly by all developers instead of siloing reviews to a single person.\n\n12. Review your own code\n\nBefore submitting a PR for a review, go through the changes yourself."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Make sure reviews are done evenly by all developers instead of siloing reviews to a single person.\n\n12. Review your own code\n\nBefore submitting a PR for a review, go through the changes yourself.\n\nThis helps to catch accidentally included changes, typos, and other simple mistakes that potentially waste the reviewer's time.\n\n13.\n\nDocument as much as possible in code\n\nWhen receiving a comment or suggestion, aim for documenting the discussion in code.\n\nIf the reviewer is not sure what the validateUsers function does, elaborate on the functionality ideally by renaming the function or writing a comment in the code.\n\nThis way, the next developer that reads the code will understand the functionality without reading the PR discussions.\n\nIn some cases, the author can copy-paste their PR discussion response as is to comment in the code.\n\n14."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "In some cases, the author can copy-paste their PR discussion response as is to comment in the code.\n\n14.\n\nWrite clear PR descriptions\n\nThe reviewer forms a mental picture of a pull request from multiple information sources: feature planning, description in the issue tracker, PR description, commit messages, chat history, etc.\n\nThe more coherent the picture is, the faster and higher quality the review is.\n\nDecide on the team\u2019s preferred channels to communicate certain information.\n\nAt Swarmia, we use PR descriptions to fill the technical gaps that the Jira issue description didn't cover.\n\nThe additional details often include information such as what setup is needed to test the PR, surprising implementation details, and anything that makes the reviewer's job smoother.\n\nThere are also other ways to add information: code comments, commit messages, commenting on individual lines in a PR as the author, etc.\n\nDemo in any visual form is a nice touch."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "There are also other ways to add information: code comments, commit messages, commenting on individual lines in a PR as the author, etc.\n\nDemo in any visual form is a nice touch.\n\nThe format can be a screenshot, a screen capture, terminal output pasted in a code block, or anything that captures the change well.\n\nGitHub supports both videos and GIFs in the PR descriptions.\n\nIn addition to a static demo video, it's a great practice to build preview versions of your application per PR branch.\n\nThe ability to interactively test the application preview without setting up anything in a local development environment saves time and increases the likelihood of someone manually testing a pull request.\n\nRemember that the fidelity of descriptions required depends on the context.\n\nYou, as a team, need to figure out the perfect balance between explaining nothing or everything.\n\nGitHub also supports issue and pull request templates if you want to standardize parts of the descriptions.\n\n15."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "GitHub also supports issue and pull request templates if you want to standardize parts of the descriptions.\n\n15.\n\nUse the shared repository model\n\nFor most private repositories, we recommend starting with the Shared repository model:\n\nIn the shared repository model, collaborators are granted push access to a single shared repository and topic branches are created when changes need to be made.\n\nThis model makes many aspects of the review process in GitHub simpler than the forking model that is popular among open-source projects.\n\n16.\n\nKeep discussions public\n\nIt's convenient to have a quick chat about a pull request in the office, but be mindful of colleagues working remotely.\n\nIt's polite to add a summary of face-to-face discussion as a PR comment.\n\nPull request discussions are searchable and easily accessible by all developers.\n\nThey act as a history log of discussion which might be incredibly valuable when debugging a production incident later on."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "They act as a history log of discussion which might be incredibly valuable when debugging a production incident later on.\n\nWrapping up\n\nThat concludes our complete guide for code reviews\u2014and you know what that means in a company blog: a quick sales pitch!\n\nIf you're interested in improving your code reviews beyond what GitHub can offer, take a look at our code insights.\n\nSwarmia\u2019s pull request view enables convenient access to your open pull requests, Slack notifications help your teams review code faster, and working agreements help you follow the practices that you've agreed on together with your team.\n\nSpeed up your code reviews with Swarmia\n\nSwarmia\u2019s real-time Slack notifications and team-wide working agreements help you review and merge code to production up to 3x faster.\n\nStart your free 14-day trial today to learn more."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Start your free 14-day trial today to learn more.\n\nStart trial\n\nAdditional reading\n\nGoogle's Engineering Practices\n\nHow to Make Good Code Reviews Better by Gergely Orosz\n\nHow to Make Your Code Reviewer Fall in Love with You by Michael Lynch\n\nCode Review Guidelines for Humans by Philipp Hauer\n\nReducing Pull Request Cycle Time with Swarmia\n\nKimmo Brunfeldt is a Software Engineer at Swarmia.\n\nIn the past, he worked as a Senior Software Engineer at Aiven, consulted enterprise clients at Futurice, and co-founded Alvar Carto.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/a-complete-guide-to-code-reviews/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nJan 5, 2022How software engineers can learn at workRead now \u2192\n\nNov 9, 2021Measuring software development productivityRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nWell-researched advice on software team productivity\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nOct 5, 2021\n\nUnderstanding how individual people and productive teams behave is crucial for improving team performance.\n\nOften, it can be hard to distinguish ideological advice from insights grounded in research.\n\nHere's a list of four reliable resources every software leader should know.\n\nDuring my tech career, I've met a multitude of idealistic people who believe following idea X or methodology Y will somehow magically transform a team or an organization.\n\nIn reality, if you want to make software teams more productive, there are no silver bullets."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "In reality, if you want to make software teams more productive, there are no silver bullets.\n\nEvery software organization is different.\n\nPeople come from different cultures and circumstances.\n\nThey have varying levels of experience, motivations, and personalities.\n\nThe only real way forward is a relentless process of incremental improvement:\n\nIdentify bottlenecks\n\nExperiment with a possible solution\n\nMeasure\n\nAnalyze\n\nRepeat\n\nIt\u2019s simple advice but hard to put into practice.\n\nOne of the biggest challenges in this process of continuous improvement is identifying what you should measure and what kind of behavior you should foster.\n\nThe four resources in this article will give you reliable advice that will help you make meaningful improvements in your organization.\n\nProject Aristotle: Understanding team effectiveness\n\nIf you've heard that \"psychological safety\" is the most important factor for creating productive teams, you've heard about Project Aristotle."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Project Aristotle: Understanding team effectiveness\n\nIf you've heard that \"psychological safety\" is the most important factor for creating productive teams, you've heard about Project Aristotle.\n\nProject Aristotle is Google's most well-known and quoted research on what makes a team effective.\n\nThe main finding of this research: How teams work together is more important than who is on the team.\n\nThe five key dynamics that affect team effectiveness, in order of priority, are:\n\nPsychological safety: Team members feel safe to take risks and be vulnerable in front of each other.\n\nDependability: Team members get things done on time with the expected level of quality.\n\nStructure and clarity: Team members have clear roles, plans, and goals.\n\nMeaning: Work is personally important to team members.\n\nImpact: Team members think their work matters and creates change.\n\nThe researchers have also provided a list of improvement indicators for each key dynamic."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Impact: Team members think their work matters and creates change.\n\nThe researchers have also provided a list of improvement indicators for each key dynamic.\n\nThese are signs that your team needs to improve a particular dynamic:\n\nPsychological safety: Fear of asking for or giving constructive feedback.\n\nHesitance around expressing divergent ideas and asking \"silly\" questions.\n\nDependability: Team has poor visibility into project priorities or progress.\n\nDiffusion of responsibility and no clear owners for tasks or problems.\n\nStructure and clarity: Lack of clarity about who is responsible for what.\n\nUnclear decision-making process, owners, or rationale.\n\nMeaning: Work assignments based solely on ability, expertise, and workload.\n\nThere's little consideration for individual development needs and interests.\n\nLack of regular recognition for achievements or milestones.\n\nImpact: Framing work as \"treading water.\"\n\nToo many goals, limiting the ability to make meaningful progress."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Lack of regular recognition for achievements or milestones.\n\nImpact: Framing work as \"treading water.\"\n\nToo many goals, limiting the ability to make meaningful progress.\n\nTo understand how your team feels about these dynamics, you can use this tool.\n\nIt gives you questions that you can discuss together, which will help your team determine their own needs and commit to making improvements.\n\nDORA: Four key performance metrics\n\nThe DevOps Research and Assessment (DORA) team is a research group that started independently in 2014 and has been part of Google since 2019.\n\nThey're known for the annual \"State of DevOps\" reports.\n\nThe DORA team has conducted seven annual global surveys between 2014\u20132021 that have collected data from more than 32,000 software professionals.\n\nFrom this research, the DORA team has identified four key performance metrics that indicate the performance of a software development team and their ability to provide better business outcomes."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "From this research, the DORA team has identified four key performance metrics that indicate the performance of a software development team and their ability to provide better business outcomes.\n\nThese four DORA metrics are:\n\nDeployment frequency: How often an organization deploys to production.\n\nLead time for change: The time it takes to get committed code to run in production.\n\nChange failure rate: The percentage of production deployments leading to degraded service and remediation (e.g., rollback).\n\nTime to restore service: How long it takes to fix a failure in production.\n\nThe first two metrics, deployment frequency and change lead time, measure the velocity of your engineering teams.\n\nThe second two, mean time to recover and change failure rate, indicate stability.\n\nOne of the main points of the DORA research is that successful teams can improve their velocity while still achieving great stability."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "One of the main points of the DORA research is that successful teams can improve their velocity while still achieving great stability.\n\nStart tracking DORA metrics with Swarmia\n\nSwarmia allows you to not only measure but also improve across the four DORA metrics.\n\nTry Swarmia with a 14-day free trial or book a live demo with our team.\n\nRequest a demo\n\nThe four DORA metrics are the most popular and well-known part of this research.\n\nHowever, it includes many other important insights you should be aware of when applying the metrics.\n\nFor example, the study lists 24 key capabilities that correlate with team performance.\n\nThe research methodology and results of the State of DevOps are explained in detail in the book Accelerate.\n\nIt is a must-read for anyone interested in improving engineering team productivity.\n\nWhile the DORA metrics are very useful, you should not take them as the one and only measure for improving engineering."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "While the DORA metrics are very useful, you should not take them as the one and only measure for improving engineering.\n\nThe research is more focused on identifying things that correlate with a company's financial performance rather than being a roadmap for improving engineering.\n\nSPACE: A framework for developer productivity\n\nSPACE is a framework for developer productivity.\n\nIt looks at developer productivity from the perspective of different organizational levels (individuals, teams & groups, and systems) and dimensions (\n\nA member of the DORA team and author of the book Accelerate, Nicole Forsgren, led this study.\n\nThe goal of SPACE is to give a more complete and nuanced picture of developer productivity beyond the specific metrics included in DORA.\n\nThe SPACE framework aims to overcome the flaws of earlier attempts to measure developer productivity.\n\nThese \"myths and misconceptions about developer productivity\" include:\n\nProductivity is all about developer activity."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "These \"myths and misconceptions about developer productivity\" include:\n\nProductivity is all about developer activity.\n\nProductivity is only about individual performance.\n\nOne productivity metric can tell us everything.\n\nProductivity measures are useful only for managers.\n\nProductivity is only about engineering systems and developer tools.\n\nTo counteract these myths, the SPACE framework \"provides a way to think rationally about productivity in a much bigger space.\"\n\nIt lists five different dimensions of developer productivity you should measure instead:\n\nSatisfaction and well-being: \"Satisfaction is how fulfilled developers feel with their work, team, tools, or culture; well-being is how healthy and happy they are, and how their work impacts it.\"\n\nExample metrics include employee satisfaction, developer efficacy, and burnout.\n\nPerformance: Trying to measure performance through outputs often leads to suboptimal business outcomes."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Example metrics include employee satisfaction, developer efficacy, and burnout.\n\nPerformance: Trying to measure performance through outputs often leads to suboptimal business outcomes.\n\nTherefore, for software development, performance is best evaluated as outcomes instead of output.\n\nExample metrics include reliability, absence of bugs, and customer adoption.\n\nActivity: Countable activities that happen when performing work, such as design documents, commits, and incident mitigation, are almost impossible to measure comprehensively.\n\nTherefore, you should never use them in isolation and instead always balance them with metrics from other dimensions.\n\nCommunication and collaboration: How well do teams communicate and work together?\n\nExample metrics include discoverability of documentation, quality of reviews, and onboarding times for new team members.\n\nEfficiency and flow: These \"capture the ability to complete work or make progress on it with minimal interruptions or delays.\""}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Efficiency and flow: These \"capture the ability to complete work or make progress on it with minimal interruptions or delays.\"\n\nExample metrics include the number of handoffs in a process, perceived ability to stay in flow, and time measures through the system (total time, value-added time, and wait time).\n\nFor a fuller picture of what is happening in your organization, the SPACE framework suggests that you have metrics for these dimensions on three different levels of your organization:\n\nIndividual\n\nTeam or group: People who work together.\n\nSystem: End-to-end work through a system, e.g., the development pipeline of your organization from design to production.\n\nThe SPACE framework authors provide an example table with metrics for each dimension and organization level.\n\nIt gives you a concrete idea of what metrics you could have in your organization.\n\nThe metrics proposed in the example are quite GitHub-centric."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "It gives you a concrete idea of what metrics you could have in your organization.\n\nThe metrics proposed in the example are quite GitHub-centric.\n\nThis is natural as the SPACE framework researchers mostly work at GitHub and Microsoft (owner of GitHub).\n\nThe example table brings us to the biggest strength and challenge of the SPACE framework: You will have to make it your own.\n\nThere are multiple options for what you could use as a metric in your organization, and the metrics you choose depend on what fits your culture and the data you have available.\n\nThere are three things to keep in mind with SPACE.\n\nFirst, you should include metrics from at least three dimensions.\n\nSecond, you should include metrics from all levels of the organization.\n\nThird, at least one of the metrics should include perceptual measures such as survey data.\n\nIncluding perceptions about people's lived experiences can often provide more complete and accurate information than metrics gathered from system behavior alone."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Including perceptions about people's lived experiences can often provide more complete and accurate information than metrics gathered from system behavior alone.\n\nWhen the above recommendations are fulfilled, you will be able to construct a more complete picture of productivity.\n\nIt is also likely that having multiple metrics will create metrics in tension.\n\nThis is by design.\n\nHaving a more balanced view should help you make smarter decisions and tradeoffs among your teams and the whole organization.\n\nIt will also make sure you're not optimizing a single metric to the detriment of the entire system.\n\nIf you want to start applying the SPACE framework to your organization, you can take a look at our free editable canvas (PDF, Google Docs).\n\nRetrospectives: We may be lying to ourselves\n\nSoftware organizations often use retrospectives as a mechanism for continuous improvement.\n\nMany people have inherited this practice from some vein of agile thinking."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Many people have inherited this practice from some vein of agile thinking.\n\nSome hold them because they've personally had some good experiences with them, others because they feel that \"they are a best practice.\"\n\nRetrospectives can be an excellent tool for continuous improvement, and you should probably use them in some form if you're already not doing so.\n\nHowever, know that retrospectives have their limits.\n\nThis study on retrospectives does a great job of highlighting some of the common challenges that you're likely to encounter.\n\nFirst, team-level retrospectives are often \"weak at recognizing issues and successes related to the process areas that are external to the concerns of the teams.\"\n\nSoftware teams often talk\u2014or complain\u2014about organization-level issues in retrospectives: collaboration with sales, product managers, general management, etc.\n\nHowever, this discussion rarely results in any tangible changes in the broader organization."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "However, this discussion rarely results in any tangible changes in the broader organization.\n\nIf you want to hold effective retrospectives and drive change, mainly focus on topics that the team can control or directly affect.\n\nWhenever the team regularly discusses subjects outside of their direct influence, make sure the feedback is addressed on the level of the organization, where real change can be created.\n\nAlternatively, your team's understanding of the surrounding business and organization's goals may be incorrect.\n\nIn these cases, aim to provide the team with more context.\n\nSecond, software team members have biases.\n\nFor example, \"the development teams tend to find people factors as more positive and avoid stating themselves as a target for improvement.\"\n\nThe study also lists situations where the way the team felt did not correspond with the real-world evidence on what had happened during the past few weeks."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "The study also lists situations where the way the team felt did not correspond with the real-world evidence on what had happened during the past few weeks.\n\nTo counteract biases, don\u2019t rely purely on the personal experiences of the team members.\n\nInstead, include \"fact-based evidence to the retrospective in order to base the analysis on a more objective picture of the real situation.\"\n\nThis study\nproposes the use of a visual timeline of project events collected from various sources.\n\nThere are many ways you could do this with your team.\n\nYou can check out Swarmia's work log as an example.\n\nGodspeed!\n\nI believe understanding the principles and mechanisms above will help you improve your software team's performance.\n\nThis research also drives our product development at Swarmia.\n\nWe've seen teams following this advice cut their cycle time by 40% within two months."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "This research also drives our product development at Swarmia.\n\nWe've seen teams following this advice cut their cycle time by 40% within two months.\n\nSwarmia condenses much of the above information into a single tool that is designed to give you easy access to all the key metrics and help you continuously improve.\n\nIf you're interested in seeing what it looks like and how it might help your team, click on the green button below.\n\nGet started with the SPACE of developer productivity\n\nIf you're looking to implement a measuring framework in your engineering organization, we recommend you start from the SPACE framework.\n\nRead our guide to the SPACE framework\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/well-researched-advice-on-software-team-productivity/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nNov 30, 2022How to make time for improving software development productivityRead now \u2192\n\nDec 16, 2021Fixing the coffee situation at the office with lean and queuing theoryRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nBusting the 10x software engineer myth\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nSep 21, 2021\n\nA 10x engineer at work in Chernobyl.\n\nThe Hollywood Archive / Avalon\n\nLeaders often feel proud of their high performers.\n\nIn reality, having \"10x engineers\" in your software organization may be a sign of an organization that is set out to fail in the long run.\n\nAs an engineering leader, it is very tempting to focus on the few individuals performing well in your organization and build your success around these people.\n\nAfter all, they are \u2013 seemingly \u2013 the smartest and most reliable people who create the best solution in the shortest amount of time."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "After all, they are \u2013 seemingly \u2013 the smartest and most reliable people who create the best solution in the shortest amount of time.\n\nEveryone working in software engineering has seen people who seem to get much more done than others.\n\nIf not \"10x,\" then at least \u201c5x\u201d or \u201c3x engineers\u201d.\n\nWhen looking at just everyday information, it seems reasonable that some engineers are just inherently more productive than others.\n\nHowever, the science behind \"10x engineers\" is not very solid.\n\nThe most cited studies on the subject were done decades ago in a very different environment and \u2013 more importantly \u2013 with a fairly small sample size.\n\nOne of the most interesting recent studies comes to a very different conclusion.\n\nIn a controlled environment, the variation between most software engineers is much more modest.\n\nThere is also a significant variation in how the same person performs across multiple tasks.\n\nA person who outperforms others in some task may be average in another."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "There is also a significant variation in how the same person performs across multiple tasks.\n\nA person who outperforms others in some task may be average in another.\n\n\u201cIn summary, while programmers are better and/or faster than others, the importance and scale has been greatly exaggerated.\u201d\n\nThe myth of 10x engineers is a great example of confirmation bias at work.\n\nWhat explains productivity differences, if not mere individual talent?\n\nWhen we take into account the surrounding environment \u2013 the organization as a whole \u2013 it is easy to spot multiple factors that affect performance in addition to individual talent.\n\nDo these two engineers have the same experience with the technology at hand?\n\nHow familiar are they with the system they're working on?\n\nDo they have the same ability to make decisions on the go?\n\nHow easily can they get help?\n\nNow, take a look at your \u201cwow that person gets things done\u201d -experiences with these factors in mind.\n\nThey often become quite mundane."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "How easily can they get help?\n\nNow, take a look at your \u201cwow that person gets things done\u201d -experiences with these factors in mind.\n\nThey often become quite mundane.\n\nPeople love heroics and relish the possibility of working with \u201cthe best.\u201d It is a comforting reality.\n\nMuch nicer than being honest about the challenges and realities in the organization.\n\nThe things that hinder performance.\n\nThings that often feel very hard \u2013 if not impossible \u2013\u00a0to change.\n\nAs a real-life example, I once worked with a company where the company\u2019s leadership considered a specific developer infinitely better than the others.\n\nThe company's CEO would walk into the space where the developers worked and loudly comment \u2013 even to outsiders \u2013 \u201csometimes it feels like X is the only developer who gets anything done.\u201d The developer was visibly proud of the feedback.\n\nOthers were left obviously demotivated."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "Others were left obviously demotivated.\n\nNo one talked about the fact that this particular developer had been developing the same system for the past 15 years, the first five almost alone.\n\nHe relished being \u201cthe best.\"\n\nWrote hard-to-understand procedural code to 5000-line files.\n\nDid not actively share knowledge with his peers.\n\nOver the years, some capable developers had joined the company.\n\nMost of them decided to move on.\n\nThe ones left were happy to coast along and leave all the heroics to the \u201c10x engineer.\u201d As a result, the company had great difficulties in trying to scale its development efforts.\n\nThis is, of course, a very extreme example but illustrates the problem well.\n\nHaving a tiny percentage of high-performing engineers is often a symptom of bigger organizational issues like siloing or imbalance in power and responsibility.\n\nIt is not just the natural order of things that is impossible for you to fight against."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "It is not just the natural order of things that is impossible for you to fight against.\n\nBuilding a better strategy for achieving business success\n\nFrom the perspective of the business's overall success, finding a few 10x unicorn developers is not what will make it or break it for you in the long run.\n\nThe real key to success is to improve the average performance of everyone in the company.\n\nThis is \u2013 statistically speaking \u2013 a more viable strategy.\n\nThe likelihood for those unicorns staying in your company for 5 or 10 years is also very low \u2013 unless you have a somehow extraordinary company.\n\nEven if they stay, they\u2019ll be changing teams \u2013 and every time, they leave the teams built around their behavior scrambling.\n\nAgain, hurting your overall ability to execute your business goals.\n\nInstead, improving your organization to make more people productive will reap the greatest benefits.\n\nIt will allow you to hire more people who can succeed in your engineering organization."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "Instead, improving your organization to make more people productive will reap the greatest benefits.\n\nIt will allow you to hire more people who can succeed in your engineering organization.\n\nThe broader you can turn the pool of people you feel \u201ccould do great work at our company,\u201d the better your odds for scaling with success.\n\nThis realization should make us more holistic.\n\nTurn our attention from individuals to groups of people: teams, departments, and the whole organization.\n\nThis is good news.\n\nThere is plenty of good research on software team performance.\n\nIf your team is struggling with too many bugs in production or you have issues with shipping changes quickly take a look at the DORA metrics.\n\nIf your team does not collaborate well together or team members are not taking ownership, learn how to foster psychological safety.\n\nTo understand the full landscape of developer productivity, check out the SPACE framework."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "To understand the full landscape of developer productivity, check out the SPACE framework.\n\nWhatever you do, the key to success is to understand your team's bottlenecks and take action together with the team to improve the situation.\n\nSome things need one-off changes.\n\nOthers require habits.\n\nAll team habits should be documented into a common working agreement that everyone is aware of and follows.\n\nUseful habits compound over time and create productive teams and organizations.\n\nTL;DR\n\nThe best strategy for most companies is not a relentless focus on trying to hire \u201cthe best\u201d in hopes of finding 10x unicorn engineers.\n\nRather, it is to make sure that the normal, capable engineers you can hire and retain perform their best.\n\nThe organizations that can turn ordinary teams into high-performing ones will be the winners \u2013 and the engineers in them too.\n\nWant to see Swarmia in action?"}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "The organizations that can turn ordinary teams into high-performing ones will be the winners \u2013 and the engineers in them too.\n\nWant to see Swarmia in action?\n\nWatch our 3-minute product overview to see how Swarmia can help your engineering organization improve developer experience and productivity.\n\nNo email required.\n\nWatch product tour\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/busting-the-10x-software-engineer-myth/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nJul 14, 2022Creating the best GitHub experience on SlackRead now \u2192\n\nMay 25, 2022How to balance engineering investments \u2014 and not just keep the lights on?Read now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}]