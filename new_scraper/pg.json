[{"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Product VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for DevelopersPricingCustomersChangelogBlogAbout Us\n\nLog inStart trial\n\nProduct VisibilityFlow InsightsCode InsightsWorking AgreementsIs Swarmia for you?Swarmia for Developers\n\nPricing\n\nCustomers\n\nChangelog\n\nBlog\n\nAbout Us\n\nLogin\n\nStart trial\n\nThe ultimate guide to developer experience\n\nAri-Pekka Koponen, Head of Platform \u00b7 \n\nFeb 28, 2023\n\nUnderstanding developer experience is vital when you want to improve the work engagement and productivity of the developers within your engineering organization.\n\nWe'll cover what developer experience is, why it is important, and how to measure and improve it.\n\nWhat is developer experience (DevEx, DX)?\n\nDeveloper experience (DevEx, DX) is the overall experience of a developer when they are building software in a team.\n\nIt describes how developers perceive, feel about, and value their work."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Developer experience (DevEx, DX) is the overall experience of a developer when they are building software in a team.\n\nIt describes how developers perceive, feel about, and value their work.\n\nThe three components of developer experience are:\n\nHow developers perceive the development infrastructure.\n\nThis includes both the technical infrastructure (e.g., development tools, issue trackers, programming languages, cloud platforms, libraries) and ways of working (e.g., working agreements, processes, and methods).\n\nHow developers feel about their work.\n\nDo they feel respected?\n\nDo they care about their work?\n\nDo they feel like they belong in their team?\n\nHow developers value their work.\n\nDo they feel they\u2019re making an impact?\n\nAre their values and goals aligned with those of the company?\n\nIn research these three components are known as cognition, affect, and conation.\n\nIn this guide we\u2019ll keep things practical and refer to them as infrastructure, feelings about work, and the value of work."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "In this guide we\u2019ll keep things practical and refer to them as infrastructure, feelings about work, and the value of work.\n\nWhy is developer experience important?\n\nImproved developer experience boosts both the productivity and work engagement of the engineers in your organization.\n\nStreamlining your development processes and tools helps developers complete their tasks faster with less pain.\n\nPeople with high engagement are more likely to produce better quality software, collaborate better, and have lower turnover rates.\n\nReseach has shown that human factors are the most critical factors affecting software development productivity and quality.\n\nDeveloper experience gives you a lens to your engineering organization that allows you to improve both the human factor as well as the tools and methods you use \u2014 ultimately leading to better business performance.\n\nHow to measure developer experience?\n\nIf you\u2019re just getting started, talk to your managers, team leads, and developers."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "How to measure developer experience?\n\nIf you\u2019re just getting started, talk to your managers, team leads, and developers.\n\nWhat are the top 5-10 things causing a bad experience for your developers and breaking their flow?\n\nSelect the most impactful problems to solve and set a measurable goal.\n\nAt this stage, companies commonly start improving things like compile times or number of flaky tests and measure things related only to their development infrastructure.\n\nIn the long run, you need to be able to address bigger problems like company culture or the way you structure your teams.\n\nTo achieve this, you need to measure all three components of developer experience: infrastructure, feelings about work, and value of work.\n\nThis requires multiple measures from multiple different angles.\n\nSpecifically, you should track both engineering metrics as well as developer feedback.\n\nFor engineering metrics, common things to measure include wait times, DORA metrics, and your\u00a0investment balance."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Specifically, you should track both engineering metrics as well as developer feedback.\n\nFor engineering metrics, common things to measure include wait times, DORA metrics, and your\u00a0investment balance.\n\nWait time metrics include compile times, test suite duration and flakiness, CI/CD build times, pull request cycle time, and\u00a0issue cycle time.\n\nDORA metrics help you achieve and maintain continuous delivery.\n\nTracking your investment allows you to balance feature work and developer experience improvements.\n\n(More on these metrics below.)\n\nDeveloper feedback allows you to measure satisfaction and wellbeing.\n\nIt also gives context to complex, nuanced problems like cross-team collaboration or changes in how teams work.\n\nDeveloper feedback is invaluable when ensuring that your engineering metrics reflect reality.\n\nIf your teams have a high level of psychological safety and trust, 1-1s and retrospectives are the best ways to get genuine and timely developer feedback."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "If your teams have a high level of psychological safety and trust, 1-1s and retrospectives are the best ways to get genuine and timely developer feedback.\n\nIt should also be easy for developers to report issues when they face them.\n\nYou can \u2014 and should \u2014 also run surveys, but  if you run them too often with too many questions, people won't reply.\n\nSo they\u2019re practically always a lagging indicator, and you should try to find ways of tracking more real-time signals whenever you can.\n\nHow to drive great developer experience\n\nImproving developer experience is a big topic, but this section includes five of the most impactful things you can do.\n\nYou will notice that none of the suggestions is linked to just a single component of developer experience.\n\nThe components are intertwined, so changes in, for example infrastructure will affect how people feel about and value their work.\n\n1.\n\nReduce developer wait times and interruptions\n\nThe number one driver of developer experience is flow."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "1.\n\nReduce developer wait times and interruptions\n\nThe number one driver of developer experience is flow.\n\nAnd the number one enemy of flow is unnecessary wait times and interruptions.\n\nFlow state allows developers to focus on their work, get a sense of accomplishment, and enjoy tackling challenging problems.\n\nUnnecessary wait times and interruptions make developers frustrated and unproductive.\n\nCommon causes preventing developer flow are poor developer tooling, impractical team processes, and unproductive company culture.\n\nExamples include flaky tests, slow code reviews, and wasteful meetings.\n\nThe larger your organization gets, the more things can break people\u2019s flow.\n\nTo tackle wait times and interruptions in your development tooling, you analyze what happens when developers write code and run your CI/CD pipeline.\n\nHow long does it take to compile code, run tests, or deploy to production?"}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "How long does it take to compile code, run tests, or deploy to production?\n\nThe wins here are often small (seconds or minutes), but they have substantial compounding effects since they happen so frequently.\n\nWhen analyzing the flow of developing features end-to-end, you need to understand your lead times, most commonly, issue and pull request cycle times.\n\nHow long does it takes to ship a feature from start to finish and for code to get from the first commit to production (to your customers)?\n\nWhat interrupts developers when they try to complete their tasks?\n\nCommon issues include poor collaboration, working with too large pull requests and stories, and not agreeing on ways of working together.\n\nTackling wait times is an iterative process where you improve things step-by-step.\n\nYou should:\n\nBuild observability into your development process.\n\nThis allows you to understand the full impact of the changes you make."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "You should:\n\nBuild observability into your development process.\n\nThis allows you to understand the full impact of the changes you make.\n\nYou don\u2019t want to optimize a small part of developer experience at the expense of the whole.\n\nTackle issues one by one, starting with the simpler ones.\n\nThis forces you to prioritize and makes it easier to evaluate impact.\n\nGive developers easy access to tools.\n\nThis is one of the simplest and cheapest ways to improve flow.\n\nSeemingly trivial things like timely notifications can remove a whole category of unnecessary wait times.\n\nTweet from Gergely Orosz on why Uber and Shopify replaced their developer Intel Macbooks with M1 ones ($2000+ each)\n\n2.\n\nInvest in maintaining a healthy codebase\n\nNothing demonstrates the importance of developer experience like a chaotic working environment full of breaking tools, bugs, and constant firefighting.\n\nA mistake many organizations make is trying run their engineering organization as a feature factory with 100% efficiency."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "A mistake many organizations make is trying run their engineering organization as a feature factory with 100% efficiency.\n\nAs a result, they\u2019re overwhelmed with managing complexity and struggle to keep the lights on.\n\nInstead of creating chaos, you want to ensure developers have a healthy environment to build and maintain features.\n\nTo achieve this, you need to track your investment balance.\n\nIt lets you see where your time goes and continually invest in paying back technical debt.\n\nThe investment balance above uses a categorization originally developed at Dropbox that divides work into four categories based on its impact: \u201cbuilding new stuff,\u201d \u201cimproving things,\u201d \u201cimproving developer productivity,\u201d and \u201ckeeping the lights on\u201d (KTLO).\n\nCategorizing your work into these buckets allows you to:\n\nContinually pay back tech debt.\n\n10% is a great goal for many teams, but sometimes making more significant investments in issues with major impact makes sense.\n\nUnderstand what causes firefighting."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "10% is a great goal for many teams, but sometimes making more significant investments in issues with major impact makes sense.\n\nUnderstand what causes firefighting.\n\nHigh levels of KTLO contribute to developer burnout and attrition.\n\nUnderstanding what causes KTLO helps you prioritize tech debt improvements.\n\nImprove developer motivation.\n\nDevelopers feel heard when they know that \u201cimproving developer productivity\u201d is a company goal.\n\nCommunicate impact.\n\nDevelopers want to build great things.\n\nEnsure they know how the things they build contribute to the product's success.\n\nTweet from John Cutler illustrating the results of ignoring managing complexity\n\n3.\n\nMake deployments safe and fast\n\nContinuous deployment practices have a proven relationship with better developer experience."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Make deployments safe and fast\n\nContinuous deployment practices have a proven relationship with better developer experience.\n\nThe DevOps Research and Assessment (DORA) team\u2019s studies have shown that teams that ship consistently are more motivated, ship higher-quality code, have less deployment pain and burnout, and have higher levels of job satisfaction.\n\nTo make deployments fast and safe:\n\nWork in small batches.\n\nInstead of using long-lived feature branches, continually integrate work to the main branch.\n\nInvest in automated tests.\n\nIf developers are afraid to deploy on a Friday, you probably need to increase your test coverage or quality.\n\nAutomate repetitive tasks.\n\nEnforce code style with linters and use code analysis tools.\n\nCode reviews should have very few (if any) \u201cnitpicking\u201d comments.\n\nAutomate your deployment process.\n\nWith web applications, deploy every pull request when you merge.\n\nOtherwise, make sure you can create a new release with a few clicks.\n\n4."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Automate your deployment process.\n\nWith web applications, deploy every pull request when you merge.\n\nOtherwise, make sure you can create a new release with a few clicks.\n\n4.\n\nEmpower teams\n\nMost developers have experienced it: Unclear goals and requirements.\n\nUnreasonable deadlines.\n\nArguments over roadmap and priorities.\n\nHigh-priority task overriding everything else \u2013 no one knows why.\n\nSubpar product outcomes as problems are half-solved.\n\nProduct management is a common source of discontent among developers.\n\nA solution many organizations employ is adding more processes and formal roles.\n\nMore people and layers between the customer and the developer.\n\nThis is a dead-end.\n\nThe better option is to build empowered product teams that own the customer experience of a feature or parts of the product end-to-end.\n\nThese teams have higher autonomy, grasp the impact of their work, and encounter fewer blockers.\n\nThese are all things that contribute to great developer experience."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "These teams have higher autonomy, grasp the impact of their work, and encounter fewer blockers.\n\nThese are all things that contribute to great developer experience.\n\nTo create empowered teams:\n\nBuild cross-functional teams.\n\nTeams should be able to tackle customer problems and features end-to-end \u2013 with minimal or no help from other teams.\n\nLet teams own the problem and the solution.\n\nWhen teams have full control over the end result, it creates shared accountability \u2013 a collective responsibility over the success or failure of the whole solution, not just parts of it.\n\nRun blameless retrospectives.\n\nWhen something goes wrong, don\u2019t ask \u201cwho\u201d but \u201cwhy.\u201d This builds psychological safety among the team and promotes collaboration over competition.\n\n5.\n\nOptimize for high work engagement\n\nYou can have an office full of developers with the fastest possible development environments shipping very little code.\n\nEven if they are cranking a ton of code, they might not care about building the right thing."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Even if they are cranking a ton of code, they might not care about building the right thing.\n\nThis is where work engagement comes into play.\n\nDevelopers with high engagement are persistent, dedicated to work, and want to ship quality software.\n\nThey are proactive and willing to support the rest of the organization.\n\nThey are also the most likely people do great work even when your developer experience is still lacking.\n\nHigh work engagement stems from the right balance of stimulation (cognitive load, challenges, and stress) and pleasure (feelings of success, learning, purpose, and connectedness).\n\nWhen people have the right amount of stimulation and enjoy their work, they become excited and engaged.\n\nTo drive great developer experience through work engagement, you should:\n\nInvest in engineering leadership.\n\nManagers account for the majority of variance in team engagement.\n\nMake sure your leaders know how to support great developer experience.\n\nSupport personal growth."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Managers account for the majority of variance in team engagement.\n\nMake sure your leaders know how to support great developer experience.\n\nSupport personal growth.\n\nThe right level of stimulus and sources of pleasure are very personal.\n\nHelp people identify what motivates them and what they enjoy at work.\n\nEnable career progression and continuous learning.\n\nSupport job crafting and ensure developers know how to progress in their career.\n\nBuild connectedness.\n\nInvest in empowered teams where people create impact together.\n\nWrapping it all up\n\nUnderstanding developer experience is vital when you want to improve the lives of the developers in your teams.\n\nHaving a systematic approach to improving developer experience will help you improve both the work engagement and productivity of your developers and, as a result, improve the business performance of your organization."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Start driving better developer experience with Swarmia\n\nIf you're interested in measuring and improving your organization's developer experience, you can get started with a free 14-day trial of Swarmia.\n\nStart free trial\n\nAri-Pekka Koponen is the Head of Platform at Swarmia.\n\nIn the past, he led the Frontend Chapter at Supermetrics and the CTO team at a public company with 350+ engineers.\n\nSubscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month."}, {"source": "https://www.swarmia.com/blog/developer-experience-what-why-how/", "content": "Subscribe to our newsletterGet the latest product updates and #goodreads delivered to your inbox once a month.\n\nMore content from Swarmia\n\nNov 11, 2021Swarmia is now SOC 2 compliantRead now \u2192\n\nOct 12, 2021A complete guide to code reviewsRead now \u2192\n\nLapinlahdenkatu 16,\n\n10090 W. 26th Ave. Suite 100\n\nProduct\n\nVisibility\n\nFlow\u00a0Insights\n\nCode\u00a0Insights\n\nWorking Agreements\n\nUse cases\n\nEngineering metrics\n\nInvestment distribution\n\nDORA metrics\n\nDevelopers\n\nEngineering surveysComing soon\n\nCompany\n\nPricing\n\nCustomers\n\nChangelog\n\nCareers\n\nHelp Center\n\nBlog\n\nAbout Us\n\nSOC 2 Type 2 compliant\n\n\n\nTerms\u00a0of\u00a0ServicePrivacy PolicySecurityStatusManage\u00a0Cookies\n\nhello@swarmia.com\u00a9 Swarmia 2023"}]